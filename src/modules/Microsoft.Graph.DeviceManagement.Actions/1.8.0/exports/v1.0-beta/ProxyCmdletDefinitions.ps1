
# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action addLanguageFiles
.Description
Invoke action addLanguageFiles

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsF4N8HzDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphAddlanguagefilesPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsF4N8HzDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphAddlanguagefilesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [GroupPolicyUploadedLanguageFiles <IMicrosoftGraphGroupPolicyUploadedLanguageFile[]>]: 
    [Content <Byte[]>]: The contents of the uploaded ADML file.
    [FileName <String>]: The file name of the uploaded ADML file.
    [Id <String>]: Key of the entity.
    [LanguageCode <String>]: The language code of the uploaded ADML file.
    [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.

GROUPPOLICYUPLOADEDLANGUAGEFILES <IMicrosoftGraphGroupPolicyUploadedLanguageFile[]>: .
  [Content <Byte[]>]: The contents of the uploaded ADML file.
  [FileName <String>]: The file name of the uploaded ADML file.
  [Id <String>]: Key of the entity.
  [LanguageCode <String>]: The language code of the uploaded ADML file.
  [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/add-mgdevicemanagementgrouppolicyuploadeddefinitionfilelanguagefile
#>
function Add-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AddExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Add', Mandatory)]
    [Parameter(ParameterSetName='AddExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of groupPolicyUploadedDefinitionFile
    ${GroupPolicyUploadedDefinitionFileId},

    [Parameter(ParameterSetName='AddViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AddViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Add', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AddViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsF4N8HzDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphAddlanguagefilesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AddExpanded')]
    [Parameter(ParameterSetName='AddViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AddExpanded')]
    [Parameter(ParameterSetName='AddViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyUploadedLanguageFile[]]
    # .
    # To construct, see NOTES section for GROUPPOLICYUPLOADEDLANGUAGEFILES properties and create a hash table.
    ${GroupPolicyUploadedLanguageFiles},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Add = 'Microsoft.Graph.DeviceManagement.Actions.private\Add-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_Add';
            AddExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Add-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_AddExpanded';
            AddViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Add-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_AddViaIdentity';
            AddViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Add-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_AddViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action approveApps
.Description
Invoke action approveApps

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsQ0Me7IDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphApproveappsPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsQ0Me7IDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphApproveappsPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ApproveAllPermissions <Boolean?>]: 
  [PackageIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/approve-mgdevicemanagementandroidmanagedstoreaccountenterprisesettingapp
#>
function Approve-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingApp {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ApproveExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Approve', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsQ0Me7IDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphApproveappsPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ApproveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ApproveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${ApproveAllPermissions},

    [Parameter(ParameterSetName='ApproveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${PackageIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Approve = 'Microsoft.Graph.DeviceManagement.Actions.private\Approve-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingApp_Approve';
            ApproveExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Approve-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingApp_ApproveExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Wipe a device
.Description
Wipe a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths7IuefzDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths7IuefzDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepEnrollmentData <Boolean?>]: 
  [KeepUserData <Boolean?>]: 
  [MacOSUnlockCode <String>]: 
  [PersistEsimDataPlan <Boolean?>]: 
  [UseProtectedWipe <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/clear-mgdevicemanagementcomanageddevice
#>
function Clear-MgDeviceManagementComanagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='WipeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Wipe', Mandatory)]
    [Parameter(ParameterSetName='WipeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Wipe', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths7IuefzDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepEnrollmentData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${MacOSUnlockCode},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${PersistEsimDataPlan},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${UseProtectedWipe},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Wipe = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementComanagedDevice_Wipe';
            WipeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementComanagedDevice_WipeExpanded';
            WipeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementComanagedDevice_WipeViaIdentity';
            WipeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementComanagedDevice_WipeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Wipe a device
.Description
Wipe a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsWb21PyDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsWb21PyDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepEnrollmentData <Boolean?>]: 
  [KeepUserData <Boolean?>]: 
  [MacOSUnlockCode <String>]: 
  [PersistEsimDataPlan <Boolean?>]: 
  [UseProtectedWipe <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/clear-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Clear-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='WipeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Wipe', Mandatory)]
    [Parameter(ParameterSetName='WipeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Wipe', Mandatory)]
    [Parameter(ParameterSetName='WipeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Wipe', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsWb21PyDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepEnrollmentData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${MacOSUnlockCode},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${PersistEsimDataPlan},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${UseProtectedWipe},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Wipe = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Wipe';
            WipeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_WipeExpanded';
            WipeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_WipeViaIdentity';
            WipeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_WipeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Wipe a device
.Description
Wipe a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsDjbrxcDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsDjbrxcDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepEnrollmentData <Boolean?>]: 
  [KeepUserData <Boolean?>]: 
  [MacOSUnlockCode <String>]: 
  [PersistEsimDataPlan <Boolean?>]: 
  [UseProtectedWipe <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/clear-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Clear-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='WipeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Wipe', Mandatory)]
    [Parameter(ParameterSetName='WipeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Wipe', Mandatory)]
    [Parameter(ParameterSetName='WipeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Wipe', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsDjbrxcDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepEnrollmentData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${MacOSUnlockCode},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${PersistEsimDataPlan},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${UseProtectedWipe},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Wipe = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Wipe';
            WipeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_WipeExpanded';
            WipeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_WipeViaIdentity';
            WipeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_WipeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Wipe a device
.Description
Wipe a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths9Mjyr1DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema1
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths9Mjyr1DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema1>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepEnrollmentData <Boolean?>]: 
  [KeepUserData <Boolean?>]: 
  [MacOSUnlockCode <String>]: 
  [PersistEsimDataPlan <Boolean?>]: 
  [UseProtectedWipe <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/clear-mgdevicemanagementmanageddevice
#>
function Clear-MgDeviceManagementManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='WipeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Wipe', Mandatory)]
    [Parameter(ParameterSetName='WipeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Wipe', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths9Mjyr1DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema1]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepEnrollmentData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${MacOSUnlockCode},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${PersistEsimDataPlan},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${UseProtectedWipe},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Wipe = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementManagedDevice_Wipe';
            WipeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementManagedDevice_WipeExpanded';
            WipeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementManagedDevice_WipeViaIdentity';
            WipeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementManagedDevice_WipeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Wipe a device
.Description
Wipe a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsMuinn5DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsMuinn5DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepEnrollmentData <Boolean?>]: 
  [KeepUserData <Boolean?>]: 
  [MacOSUnlockCode <String>]: 
  [PersistEsimDataPlan <Boolean?>]: 
  [UseProtectedWipe <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/clear-mgdevicemanagementscriptdevicerunstatemanageddevice
#>
function Clear-MgDeviceManagementScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='WipeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Wipe', Mandatory)]
    [Parameter(ParameterSetName='WipeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Wipe', Mandatory)]
    [Parameter(ParameterSetName='WipeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Wipe', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='WipeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsMuinn5DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWipePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepEnrollmentData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${MacOSUnlockCode},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${PersistEsimDataPlan},

    [Parameter(ParameterSetName='WipeExpanded')]
    [Parameter(ParameterSetName='WipeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${UseProtectedWipe},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Wipe = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementScriptDeviceRunStateManagedDevice_Wipe';
            WipeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementScriptDeviceRunStateManagedDevice_WipeExpanded';
            WipeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementScriptDeviceRunStateManagedDevice_WipeViaIdentity';
            WipeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Clear-MgDeviceManagementScriptDeviceRunStateManagedDevice_WipeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action completeSignup
.Description
Invoke action completeSignup

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths16Y7GguDevicemanagementAndroidforworksettingsMicrosoftGraphCompletesignupPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths16Y7GguDevicemanagementAndroidforworksettingsMicrosoftGraphCompletesignupPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [EnterpriseToken <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/complete-mgdevicemanagementandroidforworksettingsignup
#>
function Complete-MgDeviceManagementAndroidForWorkSettingSignup {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CompleteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Complete', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths16Y7GguDevicemanagementAndroidforworksettingsMicrosoftGraphCompletesignupPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CompleteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CompleteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${EnterpriseToken},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Complete = 'Microsoft.Graph.DeviceManagement.Actions.private\Complete-MgDeviceManagementAndroidForWorkSettingSignup_Complete';
            CompleteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Complete-MgDeviceManagementAndroidForWorkSettingSignup_CompleteExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action completeSignup
.Description
Invoke action completeSignup

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsRk2EjiDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphCompletesignupPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsRk2EjiDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphCompletesignupPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [EnterpriseToken <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/complete-mgdevicemanagementandroidmanagedstoreaccountenterprisesettingsignup
#>
function Complete-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingSignup {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CompleteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Complete', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsRk2EjiDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphCompletesignupPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CompleteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CompleteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${EnterpriseToken},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Complete = 'Microsoft.Graph.DeviceManagement.Actions.private\Complete-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingSignup_Complete';
            CompleteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Complete-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingSignup_CompleteExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action connect
.Description
Invoke action connect

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths5LbknhDevicemanagementChromeosonboardingsettingsMicrosoftGraphConnectPostRequestbodyContentApplicationJsonSchema
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths5LbknhDevicemanagementChromeosonboardingsettingsMicrosoftGraphConnectPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [OwnerUserPrincipalName <String>]: 
  [ServiceAccountCredentials <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/connect-mgdevicemanagementchromeosonboardingsetting
#>
function Connect-MgDeviceManagementChromeOSOnboardingSetting {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='ConnectExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Connect', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths5LbknhDevicemanagementChromeosonboardingsettingsMicrosoftGraphConnectPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ConnectExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ConnectExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${OwnerUserPrincipalName},

    [Parameter(ParameterSetName='ConnectExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${ServiceAccountCredentials},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Connect = 'Microsoft.Graph.DeviceManagement.Actions.private\Connect-MgDeviceManagementChromeOSOnboardingSetting_Connect';
            ConnectExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Connect-MgDeviceManagementChromeOSOnboardingSetting_ConnectExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action clone
.Description
Invoke action clone

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementReusablePolicySetting
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/copy-mgdevicemanagementreusablepolicysetting
#>
function Copy-MgDeviceManagementReusablePolicySetting {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementReusablePolicySetting])]
[CmdletBinding(DefaultParameterSetName='Clone', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Clone', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementReusablePolicySetting
    ${DeviceManagementReusablePolicySettingId},

    [Parameter(ParameterSetName='CloneViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Clone = 'Microsoft.Graph.DeviceManagement.Actions.private\Copy-MgDeviceManagementReusablePolicySetting_Clone';
            CloneViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Copy-MgDeviceManagementReusablePolicySetting_CloneViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Disable lost mode
.Description
Disable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementcomanageddevicelostmode
#>
function Disable-MgDeviceManagementComanagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementComanagedDeviceLostMode_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementComanagedDeviceLostMode_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action disable
.Description
Invoke action disable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementcomanageddevice
#>
function Disable-MgDeviceManagementComanagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementComanagedDevice_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementComanagedDevice_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Disable lost mode
.Description
Disable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevicelostmode
#>
function Disable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostMode_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostMode_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action disable
.Description
Invoke action disable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Disable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Disable lost mode
.Description
Disable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicelostmode
#>
function Disable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostMode_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostMode_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action disable
.Description
Invoke action disable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Disable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Disable lost mode
.Description
Disable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementmanageddevicelostmode
#>
function Disable-MgDeviceManagementManagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementManagedDeviceLostMode_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementManagedDeviceLostMode_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action disable
.Description
Invoke action disable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementmanageddevice
#>
function Disable-MgDeviceManagementManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementManagedDevice_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementManagedDevice_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Disable lost mode
.Description
Disable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementscriptdevicerunstatemanageddevicelostmode
#>
function Disable-MgDeviceManagementScriptDeviceRunStateManagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementScriptDeviceRunStateManagedDeviceLostMode_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementScriptDeviceRunStateManagedDeviceLostMode_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action disable
.Description
Invoke action disable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disable-mgdevicemanagementscriptdevicerunstatemanageddevice
#>
function Disable-MgDeviceManagementScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Disable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='DisableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disable = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementScriptDeviceRunStateManagedDevice_Disable';
            DisableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disable-MgDeviceManagementScriptDeviceRunStateManagedDevice_DisableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
A request to remove the active TeamViewer connector
.Description
A request to remove the active TeamViewer connector

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/disconnect-mgdevicemanagementremoteassistancepartner
#>
function Disconnect-MgDeviceManagementRemoteAssistancePartner {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Disconnect', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Disconnect', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of remoteAssistancePartner
    ${RemoteAssistancePartnerId},

    [Parameter(ParameterSetName='DisconnectViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Disconnect = 'Microsoft.Graph.DeviceManagement.Actions.private\Disconnect-MgDeviceManagementRemoteAssistancePartner_Disconnect';
            DisconnectViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Disconnect-MgDeviceManagementRemoteAssistancePartner_DisconnectViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action enableAndroidDeviceAdministratorEnrollment
.Description
Invoke action enableAndroidDeviceAdministratorEnrollment

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementandroiddeviceadministratorenrollment
#>
function Enable-MgDeviceManagementAndroidDeviceAdministratorEnrollment {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Enable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementAndroidDeviceAdministratorEnrollment_Enable';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action enable
.Description
Invoke action enable

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Wi1TrqDevicemanagementAssignmentfiltersMicrosoftGraphEnablePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Wi1TrqDevicemanagementAssignmentfiltersMicrosoftGraphEnablePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Enable <Boolean?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementassignmentfilter
#>
function Enable-MgDeviceManagementAssignmentFilter {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='EnableExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Enable', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Wi1TrqDevicemanagementAssignmentfiltersMicrosoftGraphEnablePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${Enable},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementAssignmentFilter_Enable';
            EnableExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementAssignmentFilter_EnableExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Enable lost mode
.Description
Enable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths19Ysq2ODevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths19Ysq2ODevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Footer <String>]: 
  [Message <String>]: 
  [PhoneNumber <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementcomanageddevicelostmode
#>
function Enable-MgDeviceManagementComanagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='EnableExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Enable', Mandatory)]
    [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Enable', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths19Ysq2ODevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Footer},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Message},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${PhoneNumber},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementComanagedDeviceLostMode_Enable';
            EnableExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementComanagedDeviceLostMode_EnableExpanded';
            EnableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementComanagedDeviceLostMode_EnableViaIdentity';
            EnableViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementComanagedDeviceLostMode_EnableViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Enable lost mode
.Description
Enable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Bnh8PxDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Bnh8PxDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Footer <String>]: 
  [Message <String>]: 
  [PhoneNumber <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevicelostmode
#>
function Enable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='EnableExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Enable', Mandatory)]
    [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Enable', Mandatory)]
    [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Enable', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Bnh8PxDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Footer},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Message},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${PhoneNumber},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostMode_Enable';
            EnableExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostMode_EnableExpanded';
            EnableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostMode_EnableViaIdentity';
            EnableViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostMode_EnableViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action enableGlobalScripts
.Description
Invoke action enableGlobalScripts

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementdevicehealthscriptglobalscript
#>
function Enable-MgDeviceManagementDeviceHealthScriptGlobalScript {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Enable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceHealthScriptGlobalScript_Enable';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Enable lost mode
.Description
Enable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths6Aetd5DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths6Aetd5DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Footer <String>]: 
  [Message <String>]: 
  [PhoneNumber <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicelostmode
#>
function Enable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='EnableExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Enable', Mandatory)]
    [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Enable', Mandatory)]
    [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Enable', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths6Aetd5DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Footer},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Message},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${PhoneNumber},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostMode_Enable';
            EnableExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostMode_EnableExpanded';
            EnableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostMode_EnableViaIdentity';
            EnableViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostMode_EnableViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action enableLegacyPcManagement
.Description
Invoke action enableLegacyPcManagement

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementlegacypcmanagement
#>
function Enable-MgDeviceManagementLegacyPcManagement {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Enable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementLegacyPcManagement_Enable';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Enable lost mode
.Description
Enable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsK312EdDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsK312EdDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Footer <String>]: 
  [Message <String>]: 
  [PhoneNumber <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementmanageddevicelostmode
#>
function Enable-MgDeviceManagementManagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='EnableExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Enable', Mandatory)]
    [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Enable', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsK312EdDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Footer},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Message},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${PhoneNumber},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementManagedDeviceLostMode_Enable';
            EnableExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementManagedDeviceLostMode_EnableExpanded';
            EnableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementManagedDeviceLostMode_EnableViaIdentity';
            EnableViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementManagedDeviceLostMode_EnableViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Enable lost mode
.Description
Enable lost mode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsSlm2TcDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsSlm2TcDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Footer <String>]: 
  [Message <String>]: 
  [PhoneNumber <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementscriptdevicerunstatemanageddevicelostmode
#>
function Enable-MgDeviceManagementScriptDeviceRunStateManagedDeviceLostMode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='EnableExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Enable', Mandatory)]
    [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Enable', Mandatory)]
    [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Enable', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsSlm2TcDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphEnablelostmodePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Footer},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Message},

    [Parameter(ParameterSetName='EnableExpanded')]
    [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${PhoneNumber},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementScriptDeviceRunStateManagedDeviceLostMode_Enable';
            EnableExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementScriptDeviceRunStateManagedDeviceLostMode_EnableExpanded';
            EnableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementScriptDeviceRunStateManagedDeviceLostMode_EnableViaIdentity';
            EnableViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementScriptDeviceRunStateManagedDeviceLostMode_EnableViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Upon enabling, users assigned as administrators via Role Assignment Memberships will no longer require an assigned Intune license.
You are limited to 350 unlicensed direct members for each AAD security group in a role assignment, but you can assign multiple AAD security groups to a role if you need to support more than 350 unlicensed administrators.
Licensed administrators will continue to function as-is in that transitive memberships apply and are not subject to the 350 member limit.
.Description
Upon enabling, users assigned as administrators via Role Assignment Memberships will no longer require an assigned Intune license.
You are limited to 350 unlicensed direct members for each AAD security group in a role assignment, but you can assign multiple AAD security groups to a role if you need to support more than 350 unlicensed administrators.
Licensed administrators will continue to function as-is in that transitive memberships apply and are not subject to the 350 member limit.

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/enable-mgdevicemanagementunlicensedadminstrator
#>
function Enable-MgDeviceManagementUnlicensedAdminstrator {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Enable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Enable = 'Microsoft.Graph.DeviceManagement.Actions.private\Enable-MgDeviceManagementUnlicensedAdminstrator_Enable';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Locate a device
.Description
Locate a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/find-mgdevicemanagementcomanageddevice
#>
function Find-MgDeviceManagementComanagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Locate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Locate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='LocateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Locate = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementComanagedDevice_Locate';
            LocateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementComanagedDevice_LocateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Locate a device
.Description
Locate a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/find-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Find-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Locate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Locate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Locate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='LocateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Locate = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Locate';
            LocateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_LocateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Locate a device
.Description
Locate a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/find-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Find-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Locate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Locate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Locate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='LocateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Locate = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Locate';
            LocateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_LocateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Locate a device
.Description
Locate a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/find-mgdevicemanagementmanageddevice
#>
function Find-MgDeviceManagementManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Locate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Locate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='LocateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Locate = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementManagedDevice_Locate';
            LocateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementManagedDevice_LocateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Locate a device
.Description
Locate a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/find-mgdevicemanagementscriptdevicerunstatemanageddevice
#>
function Find-MgDeviceManagementScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Locate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Locate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Locate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='LocateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Locate = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementScriptDeviceRunStateManagedDevice_Locate';
            LocateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Find-MgDeviceManagementScriptDeviceRunStateManagedDevice_LocateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getAssignmentFiltersStatusDetails
.Description
Invoke action getAssignmentFiltersStatusDetails

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Dv3M96DevicemanagementMicrosoftGraphGetassignmentfiltersstatusdetailsPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphAssignmentFilterStatusDetails
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Dv3M96DevicemanagementMicrosoftGraphGetassignmentfiltersstatusdetailsPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AssignmentFilterIds <String[]>]: 
  [ManagedDeviceId <String>]: 
  [PayloadId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
  [UserId <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementassignmentfilterstatusdetail
#>
function Get-MgDeviceManagementAssignmentFilterStatusDetail {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphAssignmentFilterStatusDetails])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Dv3M96DevicemanagementMicrosoftGraphGetassignmentfiltersstatusdetailsPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${AssignmentFilterIds},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${PayloadId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserId},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementAssignmentFilterStatusDetail_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementAssignmentFilterStatusDetail_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getHealthMetricTimeSeries
.Description
Invoke action getHealthMetricTimeSeries

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Fv96BpDevicemanagementCertificateconnectordetailsIdMicrosoftGraphGethealthmetrictimeseriesPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphCertificateConnectorHealthMetricValue
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Fv96BpDevicemanagementCertificateconnectordetailsIdMicrosoftGraphGethealthmetrictimeseriesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TimeSeries <IMicrosoftGraphTimeSeriesParameter>]: Parameter passed to GetHealthMetricTimeSeries when requesting snapshot time series.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [EndDateTime <DateTime?>]: End time of the series being requested. Optional; if not specified, current time is used.
    [MetricName <String>]: The name of the metric for which a time series is requested.
    [StartDateTime <DateTime?>]: Start time of the series being requested.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

TIMESERIES <IMicrosoftGraphTimeSeriesParameter>: Parameter passed to GetHealthMetricTimeSeries when requesting snapshot time series.
  [(Any) <Object>]: This indicates any property can be added to this object.
  [EndDateTime <DateTime?>]: End time of the series being requested. Optional; if not specified, current time is used.
  [MetricName <String>]: The name of the metric for which a time series is requested.
  [StartDateTime <DateTime?>]: Start time of the series being requested.
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementcertificateconnectordetailhealthmetrictimeseries
#>
function Get-MgDeviceManagementCertificateConnectorDetailHealthMetricTimeSeries {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphCertificateConnectorHealthMetricValue])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of certificateConnectorDetails
    ${CertificateConnectorDetailsId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Fv96BpDevicemanagementCertificateconnectordetailsIdMicrosoftGraphGethealthmetrictimeseriesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphTimeSeriesParameter]
    # Parameter passed to GetHealthMetricTimeSeries when requesting snapshot time series.
    # To construct, see NOTES section for TIMESERIES properties and create a hash table.
    ${TimeSeries},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementCertificateConnectorDetailHealthMetricTimeSeries_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementCertificateConnectorDetailHealthMetricTimeSeries_GetExpanded';
            GetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementCertificateConnectorDetailHealthMetricTimeSeries_GetViaIdentity';
            GetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementCertificateConnectorDetailHealthMetricTimeSeries_GetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getHealthMetrics
.Description
Invoke action getHealthMetrics

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsAsw265DevicemanagementCertificateconnectordetailsIdMicrosoftGraphGethealthmetricsPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphKeyLongValuePair
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsAsw265DevicemanagementCertificateconnectordetailsIdMicrosoftGraphGethealthmetricsPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [MetricNames <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementcertificateconnectordetailhealthmetric
#>
function Get-MgDeviceManagementCertificateConnectorDetailHealthMetric {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphKeyLongValuePair])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of certificateConnectorDetails
    ${CertificateConnectorDetailsId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsAsw265DevicemanagementCertificateconnectordetailsIdMicrosoftGraphGethealthmetricsPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${MetricNames},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementCertificateConnectorDetailHealthMetric_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementCertificateConnectorDetailHealthMetric_GetExpanded';
            GetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementCertificateConnectorDetailHealthMetric_GetViaIdentity';
            GetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementCertificateConnectorDetailHealthMetric_GetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getDevicesScheduledToRetire
.Description
Invoke action getDevicesScheduledToRetire

.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRetireScheduledManagedDevice
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementdevicecompliancepolicydevicescheduledtoretire
#>
function Get-MgDeviceManagementDeviceCompliancePolicyDeviceScheduledToRetire {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRetireScheduledManagedDevice])]
[CmdletBinding(DefaultParameterSetName='Get', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementDeviceCompliancePolicyDeviceScheduledToRetire_Get';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getTargetedUsersAndDevices
.Description
Invoke action getTargetedUsersAndDevices

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1G57514DevicemanagementDeviceconfigurationsMicrosoftGraphGettargetedusersanddevicesPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationTargetedUserAndDevice
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1G57514DevicemanagementDeviceconfigurationsMicrosoftGraphGettargetedusersanddevicesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceConfigurationIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementdeviceconfigurationtargeteduseranddevice
#>
function Get-MgDeviceManagementDeviceConfigurationTargetedUserAndDevice {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationTargetedUserAndDevice])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1G57514DevicemanagementDeviceconfigurationsMicrosoftGraphGettargetedusersanddevicesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceConfigurationIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementDeviceConfigurationTargetedUserAndDevice_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementDeviceConfigurationTargetedUserAndDevice_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update the Proprietary Device Health Script
.Description
Update the Proprietary Device Health Script

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementdevicehealthscriptglobalscripthighestavailableversion
#>
function Get-MgDeviceManagementDeviceHealthScriptGlobalScriptHighestAvailableVersion {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='Get', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementDeviceHealthScriptGlobalScriptHighestAvailableVersion_Get';
            GetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementDeviceHealthScriptGlobalScriptHighestAvailableVersion_GetViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getHealthMetricTimeSeries
.Description
Invoke action getHealthMetricTimeSeries

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsV1Rk0UDevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphGethealthmetrictimeseriesPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphMetricTimeSeriesDataPoint
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsV1Rk0UDevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphGethealthmetrictimeseriesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [EndDateTime <DateTime?>]: 
  [MetricName <String>]: 
  [StartDateTime <DateTime?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementmicrosofttunnelsitemicrosofttunnelserverhealthmetrictimeseries
#>
function Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetricTimeSeries {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphMetricTimeSeriesDataPoint])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of microsoftTunnelServer
    ${MicrosoftTunnelServerId},

    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of microsoftTunnelSite
    ${MicrosoftTunnelSiteId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsV1Rk0UDevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphGethealthmetrictimeseriesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.DateTime]
    # .
    ${EndDateTime},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${MetricName},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.DateTime]
    # .
    ${StartDateTime},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetricTimeSeries_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetricTimeSeries_GetExpanded';
            GetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetricTimeSeries_GetViaIdentity';
            GetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetricTimeSeries_GetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getHealthMetrics
.Description
Invoke action getHealthMetrics

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths12U8BljDevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphGethealthmetricsPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphKeyLongValuePair
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths12U8BljDevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphGethealthmetricsPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [MetricNames <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementmicrosofttunnelsitemicrosofttunnelserverhealthmetric
#>
function Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetric {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphKeyLongValuePair])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of microsoftTunnelServer
    ${MicrosoftTunnelServerId},

    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of microsoftTunnelSite
    ${MicrosoftTunnelSiteId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths12U8BljDevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphGethealthmetricsPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${MetricNames},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetric_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetric_GetExpanded';
            GetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetric_GetViaIdentity';
            GetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerHealthMetric_GetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getActiveMalwareReport
.Description
Invoke action getActiveMalwareReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths924Ql8DevicemanagementReportsMicrosoftGraphGetactivemalwarereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths924Ql8DevicemanagementReportsMicrosoftGraphGetactivemalwarereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportactivemalwarereport
#>
function Get-MgDeviceManagementReportActiveMalwareReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths924Ql8DevicemanagementReportsMicrosoftGraphGetactivemalwarereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportActiveMalwareReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportActiveMalwareReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getActiveMalwareSummaryReport
.Description
Invoke action getActiveMalwareSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths10IfhgpDevicemanagementReportsMicrosoftGraphGetactivemalwaresummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths10IfhgpDevicemanagementReportsMicrosoftGraphGetactivemalwaresummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportactivemalwaresummaryreport
#>
function Get-MgDeviceManagementReportActiveMalwareSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths10IfhgpDevicemanagementReportsMicrosoftGraphGetactivemalwaresummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportActiveMalwareSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportActiveMalwareSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getAppsInstallSummaryReport
.Description
Invoke action getAppsInstallSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsBcvqvrDevicemanagementReportsMicrosoftGraphGetappsinstallsummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsBcvqvrDevicemanagementReportsMicrosoftGraphGetappsinstallsummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportappinstallsummaryreport
#>
function Get-MgDeviceManagementReportAppInstallSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsBcvqvrDevicemanagementReportsMicrosoftGraphGetappsinstallsummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportAppInstallSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportAppInstallSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getAppStatusOverviewReport
.Description
Invoke action getAppStatusOverviewReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsDfju0ZDevicemanagementReportsMicrosoftGraphGetappstatusoverviewreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsDfju0ZDevicemanagementReportsMicrosoftGraphGetappstatusoverviewreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportappstatusoverviewreport
#>
function Get-MgDeviceManagementReportAppStatusOverviewReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsDfju0ZDevicemanagementReportsMicrosoftGraphGetappstatusoverviewreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportAppStatusOverviewReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportAppStatusOverviewReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getCachedReport
.Description
Invoke action getCachedReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1C8L63KDevicemanagementReportsMicrosoftGraphGetcachedreportPostRequestbodyContentApplicationJsonSchema1
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1C8L63KDevicemanagementReportsMicrosoftGraphGetcachedreportPostRequestbodyContentApplicationJsonSchema1>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [GroupBy <String[]>]: 
  [Id <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportcachedreport
#>
function Get-MgDeviceManagementReportCachedReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1C8L63KDevicemanagementReportsMicrosoftGraphGetcachedreportPostRequestbodyContentApplicationJsonSchema1]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Id},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCachedReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCachedReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getCompliancePolicyDevicesReport
.Description
Invoke action getCompliancePolicyDevicesReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1J8LkxdDevicemanagementReportsMicrosoftGraphGetcompliancepolicydevicesreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1J8LkxdDevicemanagementReportsMicrosoftGraphGetcompliancepolicydevicesreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportcompliancepolicydevicereport
#>
function Get-MgDeviceManagementReportCompliancePolicyDeviceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1J8LkxdDevicemanagementReportsMicrosoftGraphGetcompliancepolicydevicesreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyDeviceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyDeviceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getCompliancePolicyDeviceSummaryReport
.Description
Invoke action getCompliancePolicyDeviceSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsGc7X6YDevicemanagementReportsMicrosoftGraphGetcompliancepolicydevicesummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsGc7X6YDevicemanagementReportsMicrosoftGraphGetcompliancepolicydevicesummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportcompliancepolicydevicesummaryreport
#>
function Get-MgDeviceManagementReportCompliancePolicyDeviceSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsGc7X6YDevicemanagementReportsMicrosoftGraphGetcompliancepolicydevicesummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyDeviceSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyDeviceSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getCompliancePolicyNonComplianceReport
.Description
Invoke action getCompliancePolicyNonComplianceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Pvn7TwDevicemanagementReportsMicrosoftGraphGetcompliancepolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema1
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Pvn7TwDevicemanagementReportsMicrosoftGraphGetcompliancepolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema1>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportcompliancepolicynoncompliancereport
#>
function Get-MgDeviceManagementReportCompliancePolicyNonComplianceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Pvn7TwDevicemanagementReportsMicrosoftGraphGetcompliancepolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema1]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyNonComplianceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyNonComplianceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getCompliancePolicyNonComplianceSummaryReport
.Description
Invoke action getCompliancePolicyNonComplianceSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths6K2Wa1DevicemanagementReportsMicrosoftGraphGetcompliancepolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths6K2Wa1DevicemanagementReportsMicrosoftGraphGetcompliancepolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportcompliancepolicynoncompliancesummaryreport
#>
function Get-MgDeviceManagementReportCompliancePolicyNonComplianceSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths6K2Wa1DevicemanagementReportsMicrosoftGraphGetcompliancepolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyNonComplianceSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyNonComplianceSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getCompliancePoliciesReportForDevice
.Description
Invoke action getCompliancePoliciesReportForDevice

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1VpdeuuDevicemanagementReportsMicrosoftGraphGetcompliancepoliciesreportfordevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1VpdeuuDevicemanagementReportsMicrosoftGraphGetcompliancepoliciesreportfordevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportcompliancepolicyreport
#>
function Get-MgDeviceManagementReportCompliancePolicyReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1VpdeuuDevicemanagementReportsMicrosoftGraphGetcompliancepoliciesreportfordevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportCompliancePolicyReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getComplianceSettingNonComplianceReport
.Description
Invoke action getComplianceSettingNonComplianceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1QqqzoyDevicemanagementReportsMicrosoftGraphGetcompliancesettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1QqqzoyDevicemanagementReportsMicrosoftGraphGetcompliancesettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportcompliancesettingnoncompliancereport
#>
function Get-MgDeviceManagementReportComplianceSettingNonComplianceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1QqqzoyDevicemanagementReportsMicrosoftGraphGetcompliancesettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportComplianceSettingNonComplianceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportComplianceSettingNonComplianceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigManagerDevicePolicyStatusReport
.Description
Invoke action getConfigManagerDevicePolicyStatusReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsYuwr1TDevicemanagementReportsMicrosoftGraphGetconfigmanagerdevicepolicystatusreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsYuwr1TDevicemanagementReportsMicrosoftGraphGetconfigmanagerdevicepolicystatusreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigmanagerdevicepolicystatusreport
#>
function Get-MgDeviceManagementReportConfigManagerDevicePolicyStatusReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsYuwr1TDevicemanagementReportsMicrosoftGraphGetconfigmanagerdevicepolicystatusreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigManagerDevicePolicyStatusReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigManagerDevicePolicyStatusReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationPolicyDevicesReport
.Description
Invoke action getConfigurationPolicyDevicesReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Su2PgjDevicemanagementReportsMicrosoftGraphGetconfigurationpolicydevicesreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Su2PgjDevicemanagementReportsMicrosoftGraphGetconfigurationpolicydevicesreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationpolicydevicereport
#>
function Get-MgDeviceManagementReportConfigurationPolicyDeviceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Su2PgjDevicemanagementReportsMicrosoftGraphGetconfigurationpolicydevicesreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyDeviceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyDeviceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationPolicyDeviceSummaryReport
.Description
Invoke action getConfigurationPolicyDeviceSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsTq6Um7DevicemanagementReportsMicrosoftGraphGetconfigurationpolicydevicesummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsTq6Um7DevicemanagementReportsMicrosoftGraphGetconfigurationpolicydevicesummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationpolicydevicesummaryreport
#>
function Get-MgDeviceManagementReportConfigurationPolicyDeviceSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsTq6Um7DevicemanagementReportsMicrosoftGraphGetconfigurationpolicydevicesummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyDeviceSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyDeviceSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationPolicyNonComplianceReport
.Description
Invoke action getConfigurationPolicyNonComplianceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Hds8UqDevicemanagementReportsMicrosoftGraphGetconfigurationpolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Hds8UqDevicemanagementReportsMicrosoftGraphGetconfigurationpolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationpolicynoncompliancereport
#>
function Get-MgDeviceManagementReportConfigurationPolicyNonComplianceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Hds8UqDevicemanagementReportsMicrosoftGraphGetconfigurationpolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyNonComplianceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyNonComplianceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationPolicyNonComplianceSummaryReport
.Description
Invoke action getConfigurationPolicyNonComplianceSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsHd8Wo9DevicemanagementReportsMicrosoftGraphGetconfigurationpolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsHd8Wo9DevicemanagementReportsMicrosoftGraphGetconfigurationpolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationpolicynoncompliancesummaryreport
#>
function Get-MgDeviceManagementReportConfigurationPolicyNonComplianceSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsHd8Wo9DevicemanagementReportsMicrosoftGraphGetconfigurationpolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyNonComplianceSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyNonComplianceSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationPoliciesReportForDevice
.Description
Invoke action getConfigurationPoliciesReportForDevice

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsK1AqbDevicemanagementReportsMicrosoftGraphGetconfigurationpoliciesreportfordevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsK1AqbDevicemanagementReportsMicrosoftGraphGetconfigurationpoliciesreportfordevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationpolicyreport
#>
function Get-MgDeviceManagementReportConfigurationPolicyReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsK1AqbDevicemanagementReportsMicrosoftGraphGetconfigurationpoliciesreportfordevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicyReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationPolicySettingsDeviceSummaryReport
.Description
Invoke action getConfigurationPolicySettingsDeviceSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths7Mtw3WDevicemanagementReportsMicrosoftGraphGetconfigurationpolicysettingsdevicesummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths7Mtw3WDevicemanagementReportsMicrosoftGraphGetconfigurationpolicysettingsdevicesummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationpolicysettingdevicesummaryreport
#>
function Get-MgDeviceManagementReportConfigurationPolicySettingDeviceSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths7Mtw3WDevicemanagementReportsMicrosoftGraphGetconfigurationpolicysettingsdevicesummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicySettingDeviceSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationPolicySettingDeviceSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationSettingDetailsReport
.Description
Invoke action getConfigurationSettingDetailsReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Y2B1ItDevicemanagementReportsMicrosoftGraphGetconfigurationsettingdetailsreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Y2B1ItDevicemanagementReportsMicrosoftGraphGetconfigurationsettingdetailsreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationsettingdetailreport
#>
function Get-MgDeviceManagementReportConfigurationSettingDetailReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Y2B1ItDevicemanagementReportsMicrosoftGraphGetconfigurationsettingdetailsreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationSettingDetailReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationSettingDetailReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationSettingNonComplianceReport
.Description
Invoke action getConfigurationSettingNonComplianceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths19DnnqbDevicemanagementReportsMicrosoftGraphGetconfigurationsettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths19DnnqbDevicemanagementReportsMicrosoftGraphGetconfigurationsettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationsettingnoncompliancereport
#>
function Get-MgDeviceManagementReportConfigurationSettingNonComplianceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths19DnnqbDevicemanagementReportsMicrosoftGraphGetconfigurationsettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationSettingNonComplianceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationSettingNonComplianceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getConfigurationSettingsReport
.Description
Invoke action getConfigurationSettingsReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsS32AefDevicemanagementReportsMicrosoftGraphGetconfigurationsettingsreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsS32AefDevicemanagementReportsMicrosoftGraphGetconfigurationsettingsreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportconfigurationsettingreport
#>
function Get-MgDeviceManagementReportConfigurationSettingReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsS32AefDevicemanagementReportsMicrosoftGraphGetconfigurationsettingsreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationSettingReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportConfigurationSettingReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getDeviceConfigurationPolicySettingsSummaryReport
.Description
Invoke action getDeviceConfigurationPolicySettingsSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsRg67Q3DevicemanagementReportsMicrosoftGraphGetdeviceconfigurationpolicysettingssummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsRg67Q3DevicemanagementReportsMicrosoftGraphGetdeviceconfigurationpolicysettingssummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportdeviceconfigurationpolicysettingsummaryreport
#>
function Get-MgDeviceManagementReportDeviceConfigurationPolicySettingSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsRg67Q3DevicemanagementReportsMicrosoftGraphGetdeviceconfigurationpolicysettingssummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceConfigurationPolicySettingSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceConfigurationPolicySettingSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getDeviceInstallStatusReport
.Description
Invoke action getDeviceInstallStatusReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths17VakklDevicemanagementReportsMicrosoftGraphGetdeviceinstallstatusreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths17VakklDevicemanagementReportsMicrosoftGraphGetdeviceinstallstatusreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportdeviceinstallstatusreport
#>
function Get-MgDeviceManagementReportDeviceInstallStatusReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths17VakklDevicemanagementReportsMicrosoftGraphGetdeviceinstallstatusreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceInstallStatusReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceInstallStatusReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getDeviceManagementIntentPerSettingContributingProfiles
.Description
Invoke action getDeviceManagementIntentPerSettingContributingProfiles

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Sa3Fr9DevicemanagementReportsMicrosoftGraphGetdevicemanagementintentpersettingcontributingprofilesPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Sa3Fr9DevicemanagementReportsMicrosoftGraphGetdevicemanagementintentpersettingcontributingprofilesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportdevicemanagementintentpersettingcontributingprofile
#>
function Get-MgDeviceManagementReportDeviceManagementIntentPerSettingContributingProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Sa3Fr9DevicemanagementReportsMicrosoftGraphGetdevicemanagementintentpersettingcontributingprofilesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceManagementIntentPerSettingContributingProfile_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceManagementIntentPerSettingContributingProfile_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getDeviceManagementIntentSettingsReport
.Description
Invoke action getDeviceManagementIntentSettingsReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsTbh0H2DevicemanagementReportsMicrosoftGraphGetdevicemanagementintentsettingsreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsTbh0H2DevicemanagementReportsMicrosoftGraphGetdevicemanagementintentsettingsreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportdevicemanagementintentsettingreport
#>
function Get-MgDeviceManagementReportDeviceManagementIntentSettingReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsTbh0H2DevicemanagementReportsMicrosoftGraphGetdevicemanagementintentsettingsreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceManagementIntentSettingReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceManagementIntentSettingReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getDeviceNonComplianceReport
.Description
Invoke action getDeviceNonComplianceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsOl9O0RDevicemanagementReportsMicrosoftGraphGetdevicenoncompliancereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsOl9O0RDevicemanagementReportsMicrosoftGraphGetdevicenoncompliancereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportdevicenoncompliancereport
#>
function Get-MgDeviceManagementReportDeviceNonComplianceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsOl9O0RDevicemanagementReportsMicrosoftGraphGetdevicenoncompliancereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceNonComplianceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportDeviceNonComplianceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getEnrollmentConfigurationPoliciesByDevice
.Description
Invoke action getEnrollmentConfigurationPoliciesByDevice

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsD7TdnyDevicemanagementReportsMicrosoftGraphGetenrollmentconfigurationpoliciesbydevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsD7TdnyDevicemanagementReportsMicrosoftGraphGetenrollmentconfigurationpoliciesbydevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportenrollmentconfigurationpolicy
#>
function Get-MgDeviceManagementReportEnrollmentConfigurationPolicy {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsD7TdnyDevicemanagementReportsMicrosoftGraphGetenrollmentconfigurationpoliciesbydevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportEnrollmentConfigurationPolicy_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportEnrollmentConfigurationPolicy_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getFailedMobileAppsReport
.Description
Invoke action getFailedMobileAppsReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1NdtknnDevicemanagementReportsMicrosoftGraphGetfailedmobileappsreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1NdtknnDevicemanagementReportsMicrosoftGraphGetfailedmobileappsreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportfailedmobileappreport
#>
function Get-MgDeviceManagementReportFailedMobileAppReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1NdtknnDevicemanagementReportsMicrosoftGraphGetfailedmobileappsreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportFailedMobileAppReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportFailedMobileAppReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getFailedMobileAppsSummaryReport
.Description
Invoke action getFailedMobileAppsSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsLsdaarDevicemanagementReportsMicrosoftGraphGetfailedmobileappssummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsLsdaarDevicemanagementReportsMicrosoftGraphGetfailedmobileappssummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportfailedmobileappsummaryreport
#>
function Get-MgDeviceManagementReportFailedMobileAppSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsLsdaarDevicemanagementReportsMicrosoftGraphGetfailedmobileappssummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportFailedMobileAppSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportFailedMobileAppSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getReportFilters
.Description
Invoke action getReportFilters

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1J4Do9UDevicemanagementReportsMicrosoftGraphGetreportfiltersPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1J4Do9UDevicemanagementReportsMicrosoftGraphGetreportfiltersPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportfilter
#>
function Get-MgDeviceManagementReportFilter {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1J4Do9UDevicemanagementReportsMicrosoftGraphGetreportfiltersPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportFilter_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportFilter_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getGroupPolicySettingsDeviceSettingsReport
.Description
Invoke action getGroupPolicySettingsDeviceSettingsReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsZ8GcywDevicemanagementReportsMicrosoftGraphGetgrouppolicysettingsdevicesettingsreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsZ8GcywDevicemanagementReportsMicrosoftGraphGetgrouppolicysettingsdevicesettingsreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportgrouppolicysettingdevicesettingreport
#>
function Get-MgDeviceManagementReportGroupPolicySettingDeviceSettingReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsZ8GcywDevicemanagementReportsMicrosoftGraphGetgrouppolicysettingsdevicesettingsreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportGroupPolicySettingDeviceSettingReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportGroupPolicySettingDeviceSettingReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getHistoricalReport
.Description
Invoke action getHistoricalReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Mia7W1DevicemanagementReportsMicrosoftGraphGethistoricalreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Mia7W1DevicemanagementReportsMicrosoftGraphGethistoricalreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreporthistoricalreport
#>
function Get-MgDeviceManagementReportHistoricalReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Mia7W1DevicemanagementReportsMicrosoftGraphGethistoricalreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportHistoricalReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportHistoricalReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getMalwareSummaryReport
.Description
Invoke action getMalwareSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Sitz9RDevicemanagementReportsMicrosoftGraphGetmalwaresummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Sitz9RDevicemanagementReportsMicrosoftGraphGetmalwaresummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportmalwaresummaryreport
#>
function Get-MgDeviceManagementReportMalwareSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Sitz9RDevicemanagementReportsMicrosoftGraphGetmalwaresummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportMalwareSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportMalwareSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getPolicyNonComplianceMetadata
.Description
Invoke action getPolicyNonComplianceMetadata

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths108Pcs6DevicemanagementReportsMicrosoftGraphGetpolicynoncompliancemetadataPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths108Pcs6DevicemanagementReportsMicrosoftGraphGetpolicynoncompliancemetadataPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportpolicynoncompliancemetadata
#>
function Get-MgDeviceManagementReportPolicyNonComplianceMetadata {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths108Pcs6DevicemanagementReportsMicrosoftGraphGetpolicynoncompliancemetadataPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportPolicyNonComplianceMetadata_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportPolicyNonComplianceMetadata_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getPolicyNonComplianceReport
.Description
Invoke action getPolicyNonComplianceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1KwwldyDevicemanagementReportsMicrosoftGraphGetpolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1KwwldyDevicemanagementReportsMicrosoftGraphGetpolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportpolicynoncompliancereport
#>
function Get-MgDeviceManagementReportPolicyNonComplianceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1KwwldyDevicemanagementReportsMicrosoftGraphGetpolicynoncompliancereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportPolicyNonComplianceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportPolicyNonComplianceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getPolicyNonComplianceSummaryReport
.Description
Invoke action getPolicyNonComplianceSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsJ8K6OfDevicemanagementReportsMicrosoftGraphGetpolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsJ8K6OfDevicemanagementReportsMicrosoftGraphGetpolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportpolicynoncompliancesummaryreport
#>
function Get-MgDeviceManagementReportPolicyNonComplianceSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsJ8K6OfDevicemanagementReportsMicrosoftGraphGetpolicynoncompliancesummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportPolicyNonComplianceSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportPolicyNonComplianceSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getQuietTimePolicyUsersReport
.Description
Invoke action getQuietTimePolicyUsersReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1M9IhmqDevicemanagementReportsMicrosoftGraphGetquiettimepolicyusersreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1M9IhmqDevicemanagementReportsMicrosoftGraphGetquiettimepolicyusersreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportquiettimepolicyuserreport
#>
function Get-MgDeviceManagementReportQuietTimePolicyUserReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1M9IhmqDevicemanagementReportsMicrosoftGraphGetquiettimepolicyusersreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportQuietTimePolicyUserReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportQuietTimePolicyUserReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getQuietTimePolicyUserSummaryReport
.Description
Invoke action getQuietTimePolicyUserSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Dvpe7XDevicemanagementReportsMicrosoftGraphGetquiettimepolicyusersummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Dvpe7XDevicemanagementReportsMicrosoftGraphGetquiettimepolicyusersummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportquiettimepolicyusersummaryreport
#>
function Get-MgDeviceManagementReportQuietTimePolicyUserSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Dvpe7XDevicemanagementReportsMicrosoftGraphGetquiettimepolicyusersummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportQuietTimePolicyUserSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportQuietTimePolicyUserSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getRelatedAppsStatusReport
.Description
Invoke action getRelatedAppsStatusReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsUcgxcdDevicemanagementReportsMicrosoftGraphGetrelatedappsstatusreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsUcgxcdDevicemanagementReportsMicrosoftGraphGetrelatedappsstatusreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportrelatedappstatusreport
#>
function Get-MgDeviceManagementReportRelatedAppStatusReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsUcgxcdDevicemanagementReportsMicrosoftGraphGetrelatedappsstatusreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportRelatedAppStatusReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportRelatedAppStatusReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getRemoteAssistanceSessionsReport
.Description
Invoke action getRemoteAssistanceSessionsReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Ch0ZdjDevicemanagementReportsMicrosoftGraphGetremoteassistancesessionsreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Ch0ZdjDevicemanagementReportsMicrosoftGraphGetremoteassistancesessionsreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportremoteassistancesessionreport
#>
function Get-MgDeviceManagementReportRemoteAssistanceSessionReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Ch0ZdjDevicemanagementReportsMicrosoftGraphGetremoteassistancesessionsreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportRemoteAssistanceSessionReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportRemoteAssistanceSessionReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getSettingNonComplianceReport
.Description
Invoke action getSettingNonComplianceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths19Wsha2DevicemanagementReportsMicrosoftGraphGetsettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths19Wsha2DevicemanagementReportsMicrosoftGraphGetsettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportsettingnoncompliancereport
#>
function Get-MgDeviceManagementReportSettingNonComplianceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths19Wsha2DevicemanagementReportsMicrosoftGraphGetsettingnoncompliancereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportSettingNonComplianceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportSettingNonComplianceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getUnhealthyDefenderAgentsReport
.Description
Invoke action getUnhealthyDefenderAgentsReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsIdq7HwDevicemanagementReportsMicrosoftGraphGetunhealthydefenderagentsreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsIdq7HwDevicemanagementReportsMicrosoftGraphGetunhealthydefenderagentsreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportunhealthydefenderagentreport
#>
function Get-MgDeviceManagementReportUnhealthyDefenderAgentReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsIdq7HwDevicemanagementReportsMicrosoftGraphGetunhealthydefenderagentsreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportUnhealthyDefenderAgentReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportUnhealthyDefenderAgentReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getUnhealthyFirewallReport
.Description
Invoke action getUnhealthyFirewallReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths4Dr5S6DevicemanagementReportsMicrosoftGraphGetunhealthyfirewallreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths4Dr5S6DevicemanagementReportsMicrosoftGraphGetunhealthyfirewallreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportunhealthyfirewallreport
#>
function Get-MgDeviceManagementReportUnhealthyFirewallReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths4Dr5S6DevicemanagementReportsMicrosoftGraphGetunhealthyfirewallreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportUnhealthyFirewallReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportUnhealthyFirewallReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getUnhealthyFirewallSummaryReport
.Description
Invoke action getUnhealthyFirewallSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Cmsu6IDevicemanagementReportsMicrosoftGraphGetunhealthyfirewallsummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Cmsu6IDevicemanagementReportsMicrosoftGraphGetunhealthyfirewallsummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportunhealthyfirewallsummaryreport
#>
function Get-MgDeviceManagementReportUnhealthyFirewallSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Cmsu6IDevicemanagementReportsMicrosoftGraphGetunhealthyfirewallsummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportUnhealthyFirewallSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportUnhealthyFirewallSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getUserInstallStatusReport
.Description
Invoke action getUserInstallStatusReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths10RpajiDevicemanagementReportsMicrosoftGraphGetuserinstallstatusreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths10RpajiDevicemanagementReportsMicrosoftGraphGetuserinstallstatusreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportuserinstallstatusreport
#>
function Get-MgDeviceManagementReportUserInstallStatusReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths10RpajiDevicemanagementReportsMicrosoftGraphGetuserinstallstatusreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportUserInstallStatusReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportUserInstallStatusReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getWindowsQualityUpdateAlertsPerPolicyPerDeviceReport
.Description
Invoke action getWindowsQualityUpdateAlertsPerPolicyPerDeviceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Tgit55DevicemanagementReportsMicrosoftGraphGetwindowsqualityupdatealertsperpolicyperdevicereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Tgit55DevicemanagementReportsMicrosoftGraphGetwindowsqualityupdatealertsperpolicyperdevicereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportwindowqualityupdatealertperpolicyperdevicereport
#>
function Get-MgDeviceManagementReportWindowQualityUpdateAlertPerPolicyPerDeviceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Tgit55DevicemanagementReportsMicrosoftGraphGetwindowsqualityupdatealertsperpolicyperdevicereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportWindowQualityUpdateAlertPerPolicyPerDeviceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportWindowQualityUpdateAlertPerPolicyPerDeviceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getWindowsQualityUpdateAlertSummaryReport
.Description
Invoke action getWindowsQualityUpdateAlertSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsNun7U7DevicemanagementReportsMicrosoftGraphGetwindowsqualityupdatealertsummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsNun7U7DevicemanagementReportsMicrosoftGraphGetwindowsqualityupdatealertsummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportwindowqualityupdatealertsummaryreport
#>
function Get-MgDeviceManagementReportWindowQualityUpdateAlertSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsNun7U7DevicemanagementReportsMicrosoftGraphGetwindowsqualityupdatealertsummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportWindowQualityUpdateAlertSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportWindowQualityUpdateAlertSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getWindowsUpdateAlertsPerPolicyPerDeviceReport
.Description
Invoke action getWindowsUpdateAlertsPerPolicyPerDeviceReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1WxxrkkDevicemanagementReportsMicrosoftGraphGetwindowsupdatealertsperpolicyperdevicereportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1WxxrkkDevicemanagementReportsMicrosoftGraphGetwindowsupdatealertsperpolicyperdevicereportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportwindowupdatealertperpolicyperdevicereport
#>
function Get-MgDeviceManagementReportWindowUpdateAlertPerPolicyPerDeviceReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1WxxrkkDevicemanagementReportsMicrosoftGraphGetwindowsupdatealertsperpolicyperdevicereportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportWindowUpdateAlertPerPolicyPerDeviceReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportWindowUpdateAlertPerPolicyPerDeviceReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getWindowsUpdateAlertSummaryReport
.Description
Invoke action getWindowsUpdateAlertSummaryReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths5YzahlDevicemanagementReportsMicrosoftGraphGetwindowsupdatealertsummaryreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths5YzahlDevicemanagementReportsMicrosoftGraphGetwindowsupdatealertsummaryreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Filter <String>]: 
  [GroupBy <String[]>]: 
  [Name <String>]: 
  [OrderBy <String[]>]: 
  [Search <String>]: 
  [Select <String[]>]: 
  [SessionId <String>]: 
  [Skip <Int32?>]: 
  [Top <Int32?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementreportwindowupdatealertsummaryreport
#>
function Get-MgDeviceManagementReportWindowUpdateAlertSummaryReport {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(Mandatory)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Path to write output file to
    ${OutFile},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths5YzahlDevicemanagementReportsMicrosoftGraphGetwindowsupdatealertsummaryreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Filter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupBy},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Name},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Select')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Property},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Search},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${SessionId},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Skip},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('OrderBy')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${Sort},

    [Parameter(ParameterSetName='GetExpanded')]
    [Alias('Limit')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Top},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportWindowUpdateAlertSummaryReport_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementReportWindowUpdateAlertSummaryReport_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getRoleScopeTagsById
.Description
Invoke action getRoleScopeTagsById

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsC9T4K6DevicemanagementRoleassignmentsDeviceandappmanagementroleassignmentIdRolescopetagsMicrosoftGraphGetrolescopetagsbyidPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRoleScopeTag
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsC9T4K6DevicemanagementRoleassignmentsDeviceandappmanagementroleassignmentIdRolescopetagsMicrosoftGraphGetrolescopetagsbyidPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [RoleScopeTagIds <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementroleassignmentrolescopetagrolescopetag
#>
function Get-MgDeviceManagementRoleAssignmentRoleScopeTagRoleScopeTag {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRoleScopeTag])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceAndAppManagementRoleAssignment
    ${DeviceAndAppManagementRoleAssignmentId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsC9T4K6DevicemanagementRoleassignmentsDeviceandappmanagementroleassignmentIdRolescopetagsMicrosoftGraphGetrolescopetagsbyidPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${RoleScopeTagIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementRoleAssignmentRoleScopeTagRoleScopeTag_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementRoleAssignmentRoleScopeTagRoleScopeTag_GetExpanded';
            GetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementRoleAssignmentRoleScopeTagRoleScopeTag_GetViaIdentity';
            GetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementRoleAssignmentRoleScopeTagRoleScopeTag_GetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action getRoleScopeTagsById
.Description
Invoke action getRoleScopeTagsById

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsE9X7RlDevicemanagementRolescopetagsMicrosoftGraphGetrolescopetagsbyidPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRoleScopeTag
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsE9X7RlDevicemanagementRolescopetagsMicrosoftGraphGetrolescopetagsbyidPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [RoleScopeTagIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/get-mgdevicemanagementrolescopetagrolescopetag
#>
function Get-MgDeviceManagementRoleScopeTagRoleScopeTag {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRoleScopeTag])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsE9X7RlDevicemanagementRolescopetagsMicrosoftGraphGetrolescopetagsbyidPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='GetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${RoleScopeTagIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Get = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementRoleScopeTagRoleScopeTag_Get';
            GetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Get-MgDeviceManagementRoleScopeTagRoleScopeTag_GetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action importAppleDeviceIdentityList
.Description
Invoke action importAppleDeviceIdentityList

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Ad4X1ZDevicemanagementDeponboardingsettingsDeponboardingsettingIdImportedappledeviceidentitiesMicrosoftGraphImportappledeviceidentitylistPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedAppleDeviceIdentityResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Ad4X1ZDevicemanagementDeponboardingsettingsDeponboardingsettingIdImportedappledeviceidentitiesMicrosoftGraphImportappledeviceidentitylistPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ImportedAppleDeviceIdentities <IMicrosoftGraphImportedAppleDeviceIdentity[]>]: 
    [Id <String>]: Read-only.
    [CreatedDateTime <DateTime?>]: Created Date Time of the device
    [Description <String>]: The description of the device
    [DiscoverySource <String>]: discoverySource
    [EnrollmentState <String>]: enrollmentState
    [IsDeleted <Boolean?>]: Indicates if the device is deleted from Apple Business Manager
    [IsSupervised <Boolean?>]: Indicates if the Apple device is supervised. More information is at: https://support.apple.com/en-us/HT202837
    [LastContactedDateTime <DateTime?>]: Last Contacted Date Time of the device
    [Platform <String>]: platform
    [RequestedEnrollmentProfileAssignmentDateTime <DateTime?>]: The time enrollment profile was assigned to the device
    [RequestedEnrollmentProfileId <String>]: Enrollment profile Id admin intends to apply to the device during next enrollment
    [SerialNumber <String>]: Device serial number
  [OverwriteImportedDeviceIdentities <Boolean?>]: 

IMPORTEDAPPLEDEVICEIDENTITIES <IMicrosoftGraphImportedAppleDeviceIdentity[]>: .
  [Id <String>]: Read-only.
  [CreatedDateTime <DateTime?>]: Created Date Time of the device
  [Description <String>]: The description of the device
  [DiscoverySource <String>]: discoverySource
  [EnrollmentState <String>]: enrollmentState
  [IsDeleted <Boolean?>]: Indicates if the device is deleted from Apple Business Manager
  [IsSupervised <Boolean?>]: Indicates if the Apple device is supervised. More information is at: https://support.apple.com/en-us/HT202837
  [LastContactedDateTime <DateTime?>]: Last Contacted Date Time of the device
  [Platform <String>]: platform
  [RequestedEnrollmentProfileAssignmentDateTime <DateTime?>]: The time enrollment profile was assigned to the device
  [RequestedEnrollmentProfileId <String>]: Enrollment profile Id admin intends to apply to the device during next enrollment
  [SerialNumber <String>]: Device serial number

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/import-mgdevicemanagementdeponboardingsettingimportedappledeviceidentityappledeviceidentitylist
#>
function Import-MgDeviceManagementDepOnboardingSettingImportedAppleDeviceIdentityAppleDeviceIdentityList {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedAppleDeviceIdentityResult])]
[CmdletBinding(DefaultParameterSetName='ImportExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Import', Mandatory)]
    [Parameter(ParameterSetName='ImportExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of depOnboardingSetting
    ${DepOnboardingSettingId},

    [Parameter(ParameterSetName='ImportViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ImportViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Import', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ImportViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Ad4X1ZDevicemanagementDeponboardingsettingsDeponboardingsettingIdImportedappledeviceidentitiesMicrosoftGraphImportappledeviceidentitylistPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ImportExpanded')]
    [Parameter(ParameterSetName='ImportViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ImportExpanded')]
    [Parameter(ParameterSetName='ImportViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedAppleDeviceIdentity[]]
    # .
    # To construct, see NOTES section for IMPORTEDAPPLEDEVICEIDENTITIES properties and create a hash table.
    ${ImportedAppleDeviceIdentities},

    [Parameter(ParameterSetName='ImportExpanded')]
    [Parameter(ParameterSetName='ImportViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${OverwriteImportedDeviceIdentities},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Import = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementDepOnboardingSettingImportedAppleDeviceIdentityAppleDeviceIdentityList_Import';
            ImportExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementDepOnboardingSettingImportedAppleDeviceIdentityAppleDeviceIdentityList_ImportExpanded';
            ImportViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementDepOnboardingSettingImportedAppleDeviceIdentityAppleDeviceIdentityList_ImportViaIdentity';
            ImportViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementDepOnboardingSettingImportedAppleDeviceIdentityAppleDeviceIdentityList_ImportViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action importDeviceIdentityList
.Description
Invoke action importDeviceIdentityList

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths19M2JbiDevicemanagementImporteddeviceidentitiesMicrosoftGraphImportdeviceidentitylistPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedDeviceIdentityResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths19M2JbiDevicemanagementImporteddeviceidentitiesMicrosoftGraphImportdeviceidentitylistPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ImportedDeviceIdentities <IMicrosoftGraphImportedDeviceIdentity[]>]: 
    [Id <String>]: Read-only.
    [CreatedDateTime <DateTime?>]: Created Date Time of the device
    [Description <String>]: The description of the device
    [EnrollmentState <String>]: enrollmentState
    [ImportedDeviceIdentifier <String>]: Imported Device Identifier
    [ImportedDeviceIdentityType <String>]: importedDeviceIdentityType
    [LastContactedDateTime <DateTime?>]: Last Contacted Date Time of the device
    [LastModifiedDateTime <DateTime?>]: Last Modified DateTime of the description
    [Platform <String>]: platform
  [OverwriteImportedDeviceIdentities <Boolean?>]: 

IMPORTEDDEVICEIDENTITIES <IMicrosoftGraphImportedDeviceIdentity[]>: .
  [Id <String>]: Read-only.
  [CreatedDateTime <DateTime?>]: Created Date Time of the device
  [Description <String>]: The description of the device
  [EnrollmentState <String>]: enrollmentState
  [ImportedDeviceIdentifier <String>]: Imported Device Identifier
  [ImportedDeviceIdentityType <String>]: importedDeviceIdentityType
  [LastContactedDateTime <DateTime?>]: Last Contacted Date Time of the device
  [LastModifiedDateTime <DateTime?>]: Last Modified DateTime of the description
  [Platform <String>]: platform
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/import-mgdevicemanagementimporteddeviceidentitylist
#>
function Import-MgDeviceManagementImportedDeviceIdentityList {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedDeviceIdentityResult])]
[CmdletBinding(DefaultParameterSetName='ImportExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Import', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths19M2JbiDevicemanagementImporteddeviceidentitiesMicrosoftGraphImportdeviceidentitylistPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ImportExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ImportExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedDeviceIdentity[]]
    # .
    # To construct, see NOTES section for IMPORTEDDEVICEIDENTITIES properties and create a hash table.
    ${ImportedDeviceIdentities},

    [Parameter(ParameterSetName='ImportExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${OverwriteImportedDeviceIdentities},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Import = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementImportedDeviceIdentityList_Import';
            ImportExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementImportedDeviceIdentityList_ImportExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action import
.Description
Invoke action import

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Jc0WclDevicemanagementImportedwindowsautopilotdeviceidentitiesMicrosoftGraphImportPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedWindowsAutopilotDeviceIdentity
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Jc0WclDevicemanagementImportedwindowsautopilotdeviceidentitiesMicrosoftGraphImportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ImportedWindowsAutopilotDeviceIdentities <IMicrosoftGraphImportedWindowsAutopilotDeviceIdentity[]>]: 
    [Id <String>]: Read-only.
    [AssignedUserPrincipalName <String>]: UPN of the user the device will be assigned
    [GroupTag <String>]: Group Tag of the Windows autopilot device.
    [HardwareIdentifier <Byte[]>]: Hardware Blob of the Windows autopilot device.
    [ImportId <String>]: The Import Id of the Windows autopilot device.
    [ProductKey <String>]: Product Key of the Windows autopilot device.
    [SerialNumber <String>]: Serial number of the Windows autopilot device.
    [State <IMicrosoftGraphImportedWindowsAutopilotDeviceIdentityState>]: importedWindowsAutopilotDeviceIdentityState
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceErrorCode <Int32?>]: Device error code reported by Device Directory Service(DDS).
      [DeviceErrorName <String>]: Device error name reported by Device Directory Service(DDS).
      [DeviceImportStatus <String>]: importedWindowsAutopilotDeviceIdentityImportStatus
      [DeviceRegistrationId <String>]: Device Registration ID for successfully added device reported by Device Directory Service(DDS).

IMPORTEDWINDOWSAUTOPILOTDEVICEIDENTITIES <IMicrosoftGraphImportedWindowsAutopilotDeviceIdentity[]>: .
  [Id <String>]: Read-only.
  [AssignedUserPrincipalName <String>]: UPN of the user the device will be assigned
  [GroupTag <String>]: Group Tag of the Windows autopilot device.
  [HardwareIdentifier <Byte[]>]: Hardware Blob of the Windows autopilot device.
  [ImportId <String>]: The Import Id of the Windows autopilot device.
  [ProductKey <String>]: Product Key of the Windows autopilot device.
  [SerialNumber <String>]: Serial number of the Windows autopilot device.
  [State <IMicrosoftGraphImportedWindowsAutopilotDeviceIdentityState>]: importedWindowsAutopilotDeviceIdentityState
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceErrorCode <Int32?>]: Device error code reported by Device Directory Service(DDS).
    [DeviceErrorName <String>]: Device error name reported by Device Directory Service(DDS).
    [DeviceImportStatus <String>]: importedWindowsAutopilotDeviceIdentityImportStatus
    [DeviceRegistrationId <String>]: Device Registration ID for successfully added device reported by Device Directory Service(DDS).
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/import-mgdevicemanagementimportedwindowautopilotdeviceidentity
#>
function Import-MgDeviceManagementImportedWindowAutopilotDeviceIdentity {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedWindowsAutopilotDeviceIdentity])]
[CmdletBinding(DefaultParameterSetName='ImportExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Import', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Jc0WclDevicemanagementImportedwindowsautopilotdeviceidentitiesMicrosoftGraphImportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ImportExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ImportExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedWindowsAutopilotDeviceIdentity[]]
    # .
    # To construct, see NOTES section for IMPORTEDWINDOWSAUTOPILOTDEVICEIDENTITIES properties and create a hash table.
    ${ImportedWindowsAutopilotDeviceIdentities},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Import = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementImportedWindowAutopilotDeviceIdentity_Import';
            ImportExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementImportedWindowAutopilotDeviceIdentity_ImportExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action importOffice365DeviceConfigurationPolicies
.Description
Invoke action importOffice365DeviceConfigurationPolicies

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/import-mgdevicemanagementtemplatemigratabletooffice365deviceconfigurationpolicy
#>
function Import-MgDeviceManagementTemplateMigratableToOffice365DeviceConfigurationPolicy {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent])]
[CmdletBinding(DefaultParameterSetName='Import', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Import', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementTemplate
    ${DeviceManagementTemplateId},

    [Parameter(ParameterSetName='ImportViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Import = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementTemplateMigratableToOffice365DeviceConfigurationPolicy_Import';
            ImportViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementTemplateMigratableToOffice365DeviceConfigurationPolicy_ImportViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action importOffice365DeviceConfigurationPolicies
.Description
Invoke action importOffice365DeviceConfigurationPolicies

.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/import-mgdevicemanagementtemplateoffice365deviceconfigurationpolicy
#>
function Import-MgDeviceManagementTemplateOffice365DeviceConfigurationPolicy {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent])]
[CmdletBinding(DefaultParameterSetName='Import', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Import = 'Microsoft.Graph.DeviceManagement.Actions.private\Import-MgDeviceManagementTemplateOffice365DeviceConfigurationPolicy_Import';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Activate eSIM on the device.
.Description
Activate eSIM on the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsV0Rv5SDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsV0Rv5SDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [CarrierUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/initialize-mgdevicemanagementcomanageddeviceesim
#>
function Initialize-MgDeviceManagementComanagedDeviceEsim {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ActivateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Activate', Mandatory)]
    [Parameter(ParameterSetName='ActivateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Activate', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsV0Rv5SDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${CarrierUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Activate = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementComanagedDeviceEsim_Activate';
            ActivateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementComanagedDeviceEsim_ActivateExpanded';
            ActivateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementComanagedDeviceEsim_ActivateViaIdentity';
            ActivateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementComanagedDeviceEsim_ActivateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Activate eSIM on the device.
.Description
Activate eSIM on the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsB4IdpwDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsB4IdpwDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [CarrierUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/initialize-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddeviceesim
#>
function Initialize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceEsim {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ActivateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Activate', Mandatory)]
    [Parameter(ParameterSetName='ActivateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Activate', Mandatory)]
    [Parameter(ParameterSetName='ActivateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Activate', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsB4IdpwDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${CarrierUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Activate = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceEsim_Activate';
            ActivateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceEsim_ActivateExpanded';
            ActivateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceEsim_ActivateViaIdentity';
            ActivateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceEsim_ActivateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Activate eSIM on the device.
.Description
Activate eSIM on the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Gwm0JoDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Gwm0JoDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [CarrierUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/initialize-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddeviceesim
#>
function Initialize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceEsim {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ActivateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Activate', Mandatory)]
    [Parameter(ParameterSetName='ActivateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Activate', Mandatory)]
    [Parameter(ParameterSetName='ActivateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Activate', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Gwm0JoDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${CarrierUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Activate = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceEsim_Activate';
            ActivateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceEsim_ActivateExpanded';
            ActivateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceEsim_ActivateViaIdentity';
            ActivateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceEsim_ActivateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Activate eSIM on the device.
.Description
Activate eSIM on the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsL7OsalDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsL7OsalDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [CarrierUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/initialize-mgdevicemanagementmanageddeviceesim
#>
function Initialize-MgDeviceManagementManagedDeviceEsim {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ActivateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Activate', Mandatory)]
    [Parameter(ParameterSetName='ActivateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Activate', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsL7OsalDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${CarrierUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Activate = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementManagedDeviceEsim_Activate';
            ActivateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementManagedDeviceEsim_ActivateExpanded';
            ActivateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementManagedDeviceEsim_ActivateViaIdentity';
            ActivateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementManagedDeviceEsim_ActivateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Activate eSIM on the device.
.Description
Activate eSIM on the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths93Nt6IDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths93Nt6IDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [CarrierUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/initialize-mgdevicemanagementscriptdevicerunstatemanageddeviceesim
#>
function Initialize-MgDeviceManagementScriptDeviceRunStateManagedDeviceEsim {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ActivateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Activate', Mandatory)]
    [Parameter(ParameterSetName='ActivateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Activate', Mandatory)]
    [Parameter(ParameterSetName='ActivateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Activate', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActivateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths93Nt6IDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphActivatedeviceesimPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ActivateExpanded')]
    [Parameter(ParameterSetName='ActivateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${CarrierUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Activate = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementScriptDeviceRunStateManagedDeviceEsim_Activate';
            ActivateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementScriptDeviceRunStateManagedDeviceEsim_ActivateExpanded';
            ActivateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementScriptDeviceRunStateManagedDeviceEsim_ActivateViaIdentity';
            ActivateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Initialize-MgDeviceManagementScriptDeviceRunStateManagedDeviceEsim_ActivateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Unassigns the resource account from an Autopilot device.
.Description
Unassigns the resource account from an Autopilot device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgaccountdevicemanagementwindowautopilotdeviceidentity
#>
function Invoke-MgAccountDeviceManagementWindowAutopilotDeviceIdentity {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Account', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Account', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='AccountViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Account = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgAccountDeviceManagementWindowAutopilotDeviceIdentity_Account';
            AccountViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgAccountDeviceManagementWindowAutopilotDeviceIdentity_AccountViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
A request to start onboarding.
Must be coupled with the appropriate TeamViewer account information
.Description
A request to start onboarding.
Must be coupled with the appropriate TeamViewer account information

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgbegindevicemanagementremoteassistancepartneronboarding
#>
function Invoke-MgBeginDeviceManagementRemoteAssistancePartnerOnboarding {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Begin', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Begin', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of remoteAssistancePartner
    ${RemoteAssistancePartnerId},

    [Parameter(ParameterSetName='BeginViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Begin = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBeginDeviceManagementRemoteAssistancePartnerOnboarding_Begin';
            BeginViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBeginDeviceManagementRemoteAssistancePartnerOnboarding_BeginViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action bulkReprovisionCloudPc
.Description
Invoke action bulkReprovisionCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1WrkhgvDevicemanagementComanageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1WrkhgvDevicemanagementComanageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ManagedDeviceIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgbulkdevicemanagementcomanageddevicereprovisioncloudpc
#>
function Invoke-MgBulkDeviceManagementComanagedDeviceReprovisionCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='BulkExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Bulk', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1WrkhgvDevicemanagementComanageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='BulkExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='BulkExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${ManagedDeviceIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Bulk = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBulkDeviceManagementComanagedDeviceReprovisionCloudPc_Bulk';
            BulkExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBulkDeviceManagementComanagedDeviceReprovisionCloudPc_BulkExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action bulkReprovisionCloudPc
.Description
Invoke action bulkReprovisionCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths16P9NunDevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths16P9NunDevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ManagedDeviceIds <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgbulkdevicemanagementdetectedappmanageddevicereprovisioncloudpc
#>
function Invoke-MgBulkDeviceManagementDetectedAppManagedDeviceReprovisionCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='BulkExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Bulk', Mandatory)]
    [Parameter(ParameterSetName='BulkExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of detectedApp
    ${DetectedAppId},

    [Parameter(ParameterSetName='BulkViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='BulkViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Bulk', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='BulkViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths16P9NunDevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='BulkExpanded')]
    [Parameter(ParameterSetName='BulkViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='BulkExpanded')]
    [Parameter(ParameterSetName='BulkViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${ManagedDeviceIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Bulk = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBulkDeviceManagementDetectedAppManagedDeviceReprovisionCloudPc_Bulk';
            BulkExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBulkDeviceManagementDetectedAppManagedDeviceReprovisionCloudPc_BulkExpanded';
            BulkViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBulkDeviceManagementDetectedAppManagedDeviceReprovisionCloudPc_BulkViaIdentity';
            BulkViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBulkDeviceManagementDetectedAppManagedDeviceReprovisionCloudPc_BulkViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action bulkReprovisionCloudPc
.Description
Invoke action bulkReprovisionCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths16D2Us5DevicemanagementManageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths16D2Us5DevicemanagementManageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ManagedDeviceIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgbulkdevicemanagementmanageddevicereprovisioncloudpc
#>
function Invoke-MgBulkDeviceManagementManagedDeviceReprovisionCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='BulkExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Bulk', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths16D2Us5DevicemanagementManageddevicesMicrosoftGraphBulkreprovisioncloudpcPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='BulkExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='BulkExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${ManagedDeviceIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Bulk = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBulkDeviceManagementManagedDeviceReprovisionCloudPc_Bulk';
            BulkExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgBulkDeviceManagementManagedDeviceReprovisionCloudPc_BulkExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Clean Windows device
.Description
Clean Windows device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsI15RiiDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsI15RiiDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepUserData <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgcleandevicemanagementcomanageddevicewindowdevice
#>
function Invoke-MgCleanDeviceManagementComanagedDeviceWindowDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CleanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Clean', Mandatory)]
    [Parameter(ParameterSetName='CleanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Clean', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsI15RiiDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Clean = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementComanagedDeviceWindowDevice_Clean';
            CleanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementComanagedDeviceWindowDevice_CleanExpanded';
            CleanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementComanagedDeviceWindowDevice_CleanViaIdentity';
            CleanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementComanagedDeviceWindowDevice_CleanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Clean Windows device
.Description
Clean Windows device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsCd187BDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsCd187BDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepUserData <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgcleandevicemanagementdevicehealthscriptdevicerunstatemanageddevicewindowdevice
#>
function Invoke-MgCleanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CleanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Clean', Mandatory)]
    [Parameter(ParameterSetName='CleanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Clean', Mandatory)]
    [Parameter(ParameterSetName='CleanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Clean', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsCd187BDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Clean = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDevice_Clean';
            CleanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDevice_CleanExpanded';
            CleanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDevice_CleanViaIdentity';
            CleanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDevice_CleanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Clean Windows device
.Description
Clean Windows device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1K5Io6LDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1K5Io6LDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepUserData <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgcleandevicemanagementdeviceshellscriptdevicerunstatemanageddevicewindowdevice
#>
function Invoke-MgCleanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CleanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Clean', Mandatory)]
    [Parameter(ParameterSetName='CleanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Clean', Mandatory)]
    [Parameter(ParameterSetName='CleanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Clean', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1K5Io6LDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Clean = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDevice_Clean';
            CleanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDevice_CleanExpanded';
            CleanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDevice_CleanViaIdentity';
            CleanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDevice_CleanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Clean Windows device
.Description
Clean Windows device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Ll2DrbDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Ll2DrbDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepUserData <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgcleandevicemanagementmanageddevicewindowdevice
#>
function Invoke-MgCleanDeviceManagementManagedDeviceWindowDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CleanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Clean', Mandatory)]
    [Parameter(ParameterSetName='CleanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Clean', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Ll2DrbDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Clean = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementManagedDeviceWindowDevice_Clean';
            CleanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementManagedDeviceWindowDevice_CleanExpanded';
            CleanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementManagedDeviceWindowDevice_CleanViaIdentity';
            CleanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementManagedDeviceWindowDevice_CleanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Clean Windows device
.Description
Clean Windows device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths5Yguq9DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths5Yguq9DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [KeepUserData <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgcleandevicemanagementscriptdevicerunstatemanageddevicewindowdevice
#>
function Invoke-MgCleanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CleanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Clean', Mandatory)]
    [Parameter(ParameterSetName='CleanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Clean', Mandatory)]
    [Parameter(ParameterSetName='CleanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Clean', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CleanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths5Yguq9DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCleanwindowsdevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CleanExpanded')]
    [Parameter(ParameterSetName='CleanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Clean = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDevice_Clean';
            CleanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDevice_CleanExpanded';
            CleanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDevice_CleanViaIdentity';
            CleanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCleanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDevice_CleanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reprovisionCloudPc
.Description
Invoke action reprovisionCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgclouddevicemanagementcomanageddevice
#>
function Invoke-MgCloudDeviceManagementComanagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Cloud', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Cloud', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='CloudViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Cloud = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementComanagedDevice_Cloud';
            CloudViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementComanagedDevice_CloudViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reprovisionCloudPc
.Description
Invoke action reprovisionCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgclouddevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Invoke-MgCloudDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Cloud', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Cloud', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Cloud', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='CloudViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Cloud = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Cloud';
            CloudViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_CloudViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reprovisionCloudPc
.Description
Invoke action reprovisionCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgclouddevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Invoke-MgCloudDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Cloud', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Cloud', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Cloud', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='CloudViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Cloud = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Cloud';
            CloudViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_CloudViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reprovisionCloudPc
.Description
Invoke action reprovisionCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgclouddevicemanagementmanageddevice
#>
function Invoke-MgCloudDeviceManagementManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Cloud', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Cloud', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='CloudViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Cloud = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementManagedDevice_Cloud';
            CloudViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementManagedDevice_CloudViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reprovisionCloudPc
.Description
Invoke action reprovisionCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgclouddevicemanagementscriptdevicerunstatemanageddevice
#>
function Invoke-MgCloudDeviceManagementScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Cloud', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Cloud', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Cloud', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='CloudViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Cloud = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementScriptDeviceRunStateManagedDevice_Cloud';
            CloudViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgCloudDeviceManagementScriptDeviceRunStateManagedDevice_CloudViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action consentToDataSharing
.Description
Invoke action consentToDataSharing

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDataSharingConsent
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgconsentdevicemanagementdatasharingconsenttodatasharing
#>
function Invoke-MgConsentDeviceManagementDataSharingConsentToDataSharing {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDataSharingConsent])]
[CmdletBinding(DefaultParameterSetName='Consent', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Consent', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of dataSharingConsent
    ${DataSharingConsentId},

    [Parameter(ParameterSetName='ConsentViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Consent = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgConsentDeviceManagementDataSharingConsentToDataSharing_Consent';
            ConsentViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgConsentDeviceManagementDataSharingConsentToDataSharing_ConsentViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action deprovision
.Description
Invoke action deprovision

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsKsibueDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsKsibueDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeprovisionReason <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdeprovisiondevicemanagementcomanageddevice
#>
function Invoke-MgDeprovisionDeviceManagementComanagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeprovisionExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Deprovision', Mandatory)]
    [Parameter(ParameterSetName='DeprovisionExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Deprovision', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsKsibueDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeprovisionReason},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Deprovision = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementComanagedDevice_Deprovision';
            DeprovisionExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementComanagedDevice_DeprovisionExpanded';
            DeprovisionViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementComanagedDevice_DeprovisionViaIdentity';
            DeprovisionViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementComanagedDevice_DeprovisionViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action deprovision
.Description
Invoke action deprovision

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsKoxrkgDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsKoxrkgDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeprovisionReason <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdeprovisiondevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Invoke-MgDeprovisionDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeprovisionExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Deprovision', Mandatory)]
    [Parameter(ParameterSetName='DeprovisionExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Deprovision', Mandatory)]
    [Parameter(ParameterSetName='DeprovisionExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Deprovision', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsKoxrkgDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeprovisionReason},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Deprovision = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Deprovision';
            DeprovisionExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_DeprovisionExpanded';
            DeprovisionViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_DeprovisionViaIdentity';
            DeprovisionViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_DeprovisionViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action deprovision
.Description
Invoke action deprovision

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths15N0ZdbDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths15N0ZdbDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeprovisionReason <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdeprovisiondevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Invoke-MgDeprovisionDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeprovisionExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Deprovision', Mandatory)]
    [Parameter(ParameterSetName='DeprovisionExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Deprovision', Mandatory)]
    [Parameter(ParameterSetName='DeprovisionExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Deprovision', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths15N0ZdbDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeprovisionReason},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Deprovision = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Deprovision';
            DeprovisionExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_DeprovisionExpanded';
            DeprovisionViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_DeprovisionViaIdentity';
            DeprovisionViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_DeprovisionViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action deprovision
.Description
Invoke action deprovision

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsE4HznvDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsE4HznvDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeprovisionReason <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdeprovisiondevicemanagementmanageddevice
#>
function Invoke-MgDeprovisionDeviceManagementManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeprovisionExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Deprovision', Mandatory)]
    [Parameter(ParameterSetName='DeprovisionExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Deprovision', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsE4HznvDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeprovisionReason},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Deprovision = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementManagedDevice_Deprovision';
            DeprovisionExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementManagedDevice_DeprovisionExpanded';
            DeprovisionViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementManagedDevice_DeprovisionViaIdentity';
            DeprovisionViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementManagedDevice_DeprovisionViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action deprovision
.Description
Invoke action deprovision

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1A204BwDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1A204BwDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeprovisionReason <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdeprovisiondevicemanagementscriptdevicerunstatemanageddevice
#>
function Invoke-MgDeprovisionDeviceManagementScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeprovisionExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Deprovision', Mandatory)]
    [Parameter(ParameterSetName='DeprovisionExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Deprovision', Mandatory)]
    [Parameter(ParameterSetName='DeprovisionExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Deprovision', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1A204BwDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeprovisionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeprovisionExpanded')]
    [Parameter(ParameterSetName='DeprovisionViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeprovisionReason},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Deprovision = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementScriptDeviceRunStateManagedDevice_Deprovision';
            DeprovisionExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementScriptDeviceRunStateManagedDevice_DeprovisionExpanded';
            DeprovisionViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementScriptDeviceRunStateManagedDevice_DeprovisionViaIdentity';
            DeprovisionViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeprovisionDeviceManagementScriptDeviceRunStateManagedDevice_DeprovisionViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assignedAccessMultiModeProfiles
.Description
Invoke action assignedAccessMultiModeProfiles

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsJifkymDevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphAssignedaccessmultimodeprofilesPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNEDACCESSMULTIMODEPROFILES <IMicrosoftGraphWindowsAssignedAccessProfile[]>: .
  [Id <String>]: Read-only.
  [AppUserModelIds <String[]>]: These are the only Windows Store Apps that will be available to launch from the Start menu.
  [DesktopAppPaths <String[]>]: These are the paths of the Desktop Apps that will be available on the Start menu and the only apps the user will be able to launch.
  [ProfileName <String>]: This is a friendly name used to identify a group of applications, the layout of these apps on the start menu and the users to whom this kiosk configuration is assigned.
  [ShowTaskBar <Boolean?>]: This setting allows the admin to specify whether the Task Bar is shown or not.
  [StartMenuLayoutXml <Byte[]>]: Allows admins to override the default Start layout and prevents the user from changing it. The layout is modified by specifying an XML file based on a layout modification schema. XML needs to be in Binary format.
  [UserAccounts <String[]>]: The user accounts that will be locked to this kiosk configuration.

BODYPARAMETER <IPathsJifkymDevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphAssignedaccessmultimodeprofilesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AssignedAccessMultiModeProfiles <IMicrosoftGraphWindowsAssignedAccessProfile[]>]: 
    [Id <String>]: Read-only.
    [AppUserModelIds <String[]>]: These are the only Windows Store Apps that will be available to launch from the Start menu.
    [DesktopAppPaths <String[]>]: These are the paths of the Desktop Apps that will be available on the Start menu and the only apps the user will be able to launch.
    [ProfileName <String>]: This is a friendly name used to identify a group of applications, the layout of these apps on the start menu and the users to whom this kiosk configuration is assigned.
    [ShowTaskBar <Boolean?>]: This setting allows the admin to specify whether the Task Bar is shown or not.
    [StartMenuLayoutXml <Byte[]>]: Allows admins to override the default Start layout and prevents the user from changing it. The layout is modified by specifying an XML file based on a layout modification schema. XML needs to be in Binary format.
    [UserAccounts <String[]>]: The user accounts that will be locked to this kiosk configuration.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdevicemanagementdeviceconfigurationassignedaccessmultimodeprofile
#>
function Invoke-MgDeviceManagementDeviceConfigurationAssignedAccessMultiModeProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AccessExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Access', Mandatory)]
    [Parameter(ParameterSetName='AccessExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfiguration
    ${DeviceConfigurationId},

    [Parameter(ParameterSetName='AccessViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AccessViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Access', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AccessViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsJifkymDevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphAssignedaccessmultimodeprofilesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AccessExpanded')]
    [Parameter(ParameterSetName='AccessViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AccessExpanded')]
    [Parameter(ParameterSetName='AccessViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphWindowsAssignedAccessProfile[]]
    # .
    # To construct, see NOTES section for ASSIGNEDACCESSMULTIMODEPROFILES properties and create a hash table.
    ${AssignedAccessMultiModeProfiles},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Access = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeviceManagementDeviceConfigurationAssignedAccessMultiModeProfile_Access';
            AccessExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeviceManagementDeviceConfigurationAssignedAccessMultiModeProfile_AccessExpanded';
            AccessViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeviceManagementDeviceConfigurationAssignedAccessMultiModeProfile_AccessViaIdentity';
            AccessViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeviceManagementDeviceConfigurationAssignedAccessMultiModeProfile_AccessViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsPrivacyAccessControls
.Description
Invoke action windowsPrivacyAccessControls

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsB12D8ODevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphWindowsprivacyaccesscontrolsPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsB12D8ODevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphWindowsprivacyaccesscontrolsPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [WindowsPrivacyAccessControls <IMicrosoftGraphWindowsPrivacyDataAccessControlItem[]>]: 
    [Id <String>]: Read-only.
    [AccessLevel <String>]: Determine the access level to specific Windows privacy data category.
    [AppDisplayName <String>]: The Package Family Name of a Windows app. When set, the access level applies to the specified application.
    [AppPackageFamilyName <String>]: The Package Family Name of a Windows app. When set, the access level applies to the specified application.
    [DataCategory <String>]: Windows privacy data category specifier for privacy data access.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

WINDOWSPRIVACYACCESSCONTROLS <IMicrosoftGraphWindowsPrivacyDataAccessControlItem[]>: .
  [Id <String>]: Read-only.
  [AccessLevel <String>]: Determine the access level to specific Windows privacy data category.
  [AppDisplayName <String>]: The Package Family Name of a Windows app. When set, the access level applies to the specified application.
  [AppPackageFamilyName <String>]: The Package Family Name of a Windows app. When set, the access level applies to the specified application.
  [DataCategory <String>]: Windows privacy data category specifier for privacy data access.
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdevicemanagementdeviceconfigurationwindowsprivacyaccesscontrol
#>
function Invoke-MgDeviceManagementDeviceConfigurationWindowsPrivacyAccessControl {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AccessExpanded1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Access1', Mandatory)]
    [Parameter(ParameterSetName='AccessExpanded1', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfiguration
    ${DeviceConfigurationId},

    [Parameter(ParameterSetName='AccessViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AccessViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Access1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AccessViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsB12D8ODevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphWindowsprivacyaccesscontrolsPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AccessExpanded1')]
    [Parameter(ParameterSetName='AccessViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AccessExpanded1')]
    [Parameter(ParameterSetName='AccessViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphWindowsPrivacyDataAccessControlItem[]]
    # .
    # To construct, see NOTES section for WINDOWSPRIVACYACCESSCONTROLS properties and create a hash table.
    ${WindowsPrivacyAccessControls},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Access1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeviceManagementDeviceConfigurationWindowsPrivacyAccessControl_Access1';
            AccessExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeviceManagementDeviceConfigurationWindowsPrivacyAccessControl_AccessExpanded1';
            AccessViaIdentity1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeviceManagementDeviceConfigurationWindowsPrivacyAccessControl_AccessViaIdentity1';
            AccessViaIdentityExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDeviceManagementDeviceConfigurationWindowsPrivacyAccessControl_AccessViaIdentityExpanded1';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Shut down device
.Description
Shut down device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdowndevicemanagementcomanageddeviceshut
#>
function Invoke-MgDownDeviceManagementComanagedDeviceShut {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Down', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Down', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DownViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Down = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementComanagedDeviceShut_Down';
            DownViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementComanagedDeviceShut_DownViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Shut down device
.Description
Shut down device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdowndevicemanagementdevicehealthscriptdevicerunstatemanageddeviceshut
#>
function Invoke-MgDownDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceShut {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Down', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Down', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Down', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='DownViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Down = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceShut_Down';
            DownViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceShut_DownViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Shut down device
.Description
Shut down device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdowndevicemanagementdeviceshellscriptdevicerunstatemanageddeviceshut
#>
function Invoke-MgDownDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceShut {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Down', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Down', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Down', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='DownViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Down = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceShut_Down';
            DownViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceShut_DownViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Shut down device
.Description
Shut down device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdowndevicemanagementmanageddeviceshut
#>
function Invoke-MgDownDeviceManagementManagedDeviceShut {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Down', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Down', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DownViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Down = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementManagedDeviceShut_Down';
            DownViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementManagedDeviceShut_DownViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Shut down device
.Description
Shut down device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgdowndevicemanagementscriptdevicerunstatemanageddeviceshut
#>
function Invoke-MgDownDeviceManagementScriptDeviceRunStateManagedDeviceShut {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Down', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Down', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Down', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='DownViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Down = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementScriptDeviceRunStateManagedDeviceShut_Down';
            DownViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgDownDeviceManagementScriptDeviceRunStateManagedDeviceShut_DownViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action executeAction
.Description
Invoke action executeAction

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths5Wfb68DevicemanagementComanageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphBulkManagedDeviceActionResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths5Wfb68DevicemanagementComanageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ActionName <String>]: managedDeviceRemoteAction
  [CarrierUrl <String>]: 
  [DeprovisionReason <String>]: 
  [DeviceIds <String[]>]: 
  [DeviceName <String>]: 
  [KeepEnrollmentData <Boolean?>]: 
  [KeepUserData <Boolean?>]: 
  [NotificationBody <String>]: 
  [NotificationTitle <String>]: 
  [OrganizationalUnitPath <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgexecutedevicemanagementcomanageddeviceaction
#>
function Invoke-MgExecuteDeviceManagementComanagedDeviceAction {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphBulkManagedDeviceActionResult])]
[CmdletBinding(DefaultParameterSetName='ExecuteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Execute', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths5Wfb68DevicemanagementComanageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # managedDeviceRemoteAction
    ${ActionName},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${CarrierUrl},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeprovisionReason},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeviceName},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepEnrollmentData},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationBody},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationTitle},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${OrganizationalUnitPath},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Execute = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementComanagedDeviceAction_Execute';
            ExecuteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementComanagedDeviceAction_ExecuteExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action executeAction
.Description
Invoke action executeAction

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsYows5ODevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphBulkManagedDeviceActionResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsYows5ODevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ActionName <String>]: managedDeviceRemoteAction
  [CarrierUrl <String>]: 
  [DeprovisionReason <String>]: 
  [DeviceIds <String[]>]: 
  [DeviceName <String>]: 
  [KeepEnrollmentData <Boolean?>]: 
  [KeepUserData <Boolean?>]: 
  [NotificationBody <String>]: 
  [NotificationTitle <String>]: 
  [OrganizationalUnitPath <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgexecutedevicemanagementdetectedappmanageddeviceaction
#>
function Invoke-MgExecuteDeviceManagementDetectedAppManagedDeviceAction {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphBulkManagedDeviceActionResult])]
[CmdletBinding(DefaultParameterSetName='ExecuteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Execute', Mandatory)]
    [Parameter(ParameterSetName='ExecuteExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of detectedApp
    ${DetectedAppId},

    [Parameter(ParameterSetName='ExecuteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Execute', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ExecuteViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsYows5ODevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # managedDeviceRemoteAction
    ${ActionName},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${CarrierUrl},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeprovisionReason},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeviceName},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepEnrollmentData},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationBody},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationTitle},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${OrganizationalUnitPath},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Execute = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementDetectedAppManagedDeviceAction_Execute';
            ExecuteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementDetectedAppManagedDeviceAction_ExecuteExpanded';
            ExecuteViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementDetectedAppManagedDeviceAction_ExecuteViaIdentity';
            ExecuteViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementDetectedAppManagedDeviceAction_ExecuteViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action executeAction
.Description
Invoke action executeAction

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1R3Ij5LDevicemanagementManageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphBulkManagedDeviceActionResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1R3Ij5LDevicemanagementManageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ActionName <String>]: managedDeviceRemoteAction
  [CarrierUrl <String>]: 
  [DeprovisionReason <String>]: 
  [DeviceIds <String[]>]: 
  [DeviceName <String>]: 
  [KeepEnrollmentData <Boolean?>]: 
  [KeepUserData <Boolean?>]: 
  [NotificationBody <String>]: 
  [NotificationTitle <String>]: 
  [OrganizationalUnitPath <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgexecutedevicemanagementmanageddeviceaction
#>
function Invoke-MgExecuteDeviceManagementManagedDeviceAction {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphBulkManagedDeviceActionResult])]
[CmdletBinding(DefaultParameterSetName='ExecuteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Execute', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1R3Ij5LDevicemanagementManageddevicesMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # managedDeviceRemoteAction
    ${ActionName},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${CarrierUrl},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeprovisionReason},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeviceName},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepEnrollmentData},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${KeepUserData},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationBody},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationTitle},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${OrganizationalUnitPath},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Execute = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementManagedDeviceAction_Execute';
            ExecuteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementManagedDeviceAction_ExecuteExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action executeAction
.Description
Invoke action executeAction

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsYsc0TiDevicemanagementWindowsdriverupdateprofilesWindowsdriverupdateprofileIdMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphBulkDriverActionResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsYsc0TiDevicemanagementWindowsdriverupdateprofilesWindowsdriverupdateprofileIdMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ActionName <String>]: An enum type to represent approval actions of single or list of drivers.
  [DeploymentDate <DateTime?>]: 
  [DriverIds <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgexecutedevicemanagementwindowdriverupdateprofileaction
#>
function Invoke-MgExecuteDeviceManagementWindowDriverUpdateProfileAction {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphBulkDriverActionResult])]
[CmdletBinding(DefaultParameterSetName='ExecuteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Execute', Mandatory)]
    [Parameter(ParameterSetName='ExecuteExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsDriverUpdateProfile
    ${WindowsDriverUpdateProfileId},

    [Parameter(ParameterSetName='ExecuteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Execute', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ExecuteViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsYsc0TiDevicemanagementWindowsdriverupdateprofilesWindowsdriverupdateprofileIdMicrosoftGraphExecuteactionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # An enum type to represent approval actions of single or list of drivers.
    ${ActionName},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.DateTime]
    # .
    ${DeploymentDate},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DriverIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Execute = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementWindowDriverUpdateProfileAction_Execute';
            ExecuteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementWindowDriverUpdateProfileAction_ExecuteExpanded';
            ExecuteViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementWindowDriverUpdateProfileAction_ExecuteViaIdentity';
            ExecuteViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExecuteDeviceManagementWindowDriverUpdateProfileAction_ExecuteViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Extend Feature Updates Pause for a Windows Update for Business ring.
.Description
Extend Feature Updates Pause for a Windows Update for Business ring.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgextenddevicemanagementdeviceconfigurationgroupassignmentdeviceconfigurationmicrosoftgraphwindowupdateforbusinessconfigurationfeatureupdatepause
#>
function Invoke-MgExtendDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationFeatureUpdatePause {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Extend', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Extend', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfigurationGroupAssignment
    ${DeviceConfigurationGroupAssignmentId},

    [Parameter(ParameterSetName='Extend', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfiguration
    ${DeviceConfigurationId},

    [Parameter(ParameterSetName='ExtendViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Extend = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExtendDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationFeatureUpdatePause_Extend';
            ExtendViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExtendDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationFeatureUpdatePause_ExtendViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Extend Quality Updates Pause for a Windows Update for Business ring.
.Description
Extend Quality Updates Pause for a Windows Update for Business ring.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgextenddevicemanagementdeviceconfigurationgroupassignmentdeviceconfigurationmicrosoftgraphwindowupdateforbusinessconfigurationqualityupdatepause
#>
function Invoke-MgExtendDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationQualityUpdatePause {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Extend', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Extend', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfigurationGroupAssignment
    ${DeviceConfigurationGroupAssignmentId},

    [Parameter(ParameterSetName='Extend', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfiguration
    ${DeviceConfigurationId},

    [Parameter(ParameterSetName='ExtendViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Extend = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExtendDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationQualityUpdatePause_Extend';
            ExtendViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExtendDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationQualityUpdatePause_ExtendViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Extend Feature Updates Pause for a Windows Update for Business ring.
.Description
Extend Feature Updates Pause for a Windows Update for Business ring.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgextenddevicemanagementdeviceconfigurationmicrosoftgraphwindowupdateforbusinessconfigurationfeatureupdatepause
#>
function Invoke-MgExtendDeviceManagementDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationFeatureUpdatePause {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Extend', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Extend', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfiguration
    ${DeviceConfigurationId},

    [Parameter(ParameterSetName='ExtendViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Extend = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExtendDeviceManagementDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationFeatureUpdatePause_Extend';
            ExtendViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExtendDeviceManagementDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationFeatureUpdatePause_ExtendViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Extend Quality Updates Pause for a Windows Update for Business ring.
.Description
Extend Quality Updates Pause for a Windows Update for Business ring.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgextenddevicemanagementdeviceconfigurationmicrosoftgraphwindowupdateforbusinessconfigurationqualityupdatepause
#>
function Invoke-MgExtendDeviceManagementDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationQualityUpdatePause {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Extend', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Extend', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfiguration
    ${DeviceConfigurationId},

    [Parameter(ParameterSetName='ExtendViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Extend = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExtendDeviceManagementDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationQualityUpdatePause_Extend';
            ExtendViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgExtendDeviceManagementDeviceConfigurationMicrosoftGraphWindowUpdateForBusinessConfigurationQualityUpdatePause_ExtendViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action hasPayloadLinks
.Description
Invoke action hasPayloadLinks

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsJjrzryDevicemanagementDevicecompliancepoliciesMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsJjrzryDevicemanagementDevicecompliancepoliciesMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [PayloadIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mghasdevicemanagementdevicecompliancepolicypayloadlink
#>
function Invoke-MgHasDeviceManagementDeviceCompliancePolicyPayloadLink {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem])]
[CmdletBinding(DefaultParameterSetName='HasExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Has', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsJjrzryDevicemanagementDevicecompliancepoliciesMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${PayloadIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Has = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementDeviceCompliancePolicyPayloadLink_Has';
            HasExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementDeviceCompliancePolicyPayloadLink_HasExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action hasPayloadLinks
.Description
Invoke action hasPayloadLinks

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths8V3WrfDevicemanagementDeviceconfigurationsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths8V3WrfDevicemanagementDeviceconfigurationsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [PayloadIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mghasdevicemanagementdeviceconfigurationpayloadlink
#>
function Invoke-MgHasDeviceManagementDeviceConfigurationPayloadLink {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem])]
[CmdletBinding(DefaultParameterSetName='HasExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Has', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths8V3WrfDevicemanagementDeviceconfigurationsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${PayloadIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Has = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementDeviceConfigurationPayloadLink_Has';
            HasExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementDeviceConfigurationPayloadLink_HasExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action hasPayloadLinks
.Description
Invoke action hasPayloadLinks

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Uvh7JwDevicemanagementDeviceenrollmentconfigurationsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Uvh7JwDevicemanagementDeviceenrollmentconfigurationsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [PayloadIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mghasdevicemanagementdeviceenrollmentconfigurationpayloadlink
#>
function Invoke-MgHasDeviceManagementDeviceEnrollmentConfigurationPayloadLink {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem])]
[CmdletBinding(DefaultParameterSetName='HasExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Has', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Uvh7JwDevicemanagementDeviceenrollmentconfigurationsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${PayloadIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Has = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementDeviceEnrollmentConfigurationPayloadLink_Has';
            HasExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementDeviceEnrollmentConfigurationPayloadLink_HasExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action hasPayloadLinks
.Description
Invoke action hasPayloadLinks

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsHo5CjoDevicemanagementDevicemanagementscriptsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsHo5CjoDevicemanagementDevicemanagementscriptsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [PayloadIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mghasdevicemanagementscriptpayloadlink
#>
function Invoke-MgHasDeviceManagementScriptPayloadLink {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem])]
[CmdletBinding(DefaultParameterSetName='HasExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Has', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsHo5CjoDevicemanagementDevicemanagementscriptsMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${PayloadIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Has = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementScriptPayloadLink_Has';
            HasExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementScriptPayloadLink_HasExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action hasPayloadLinks
.Description
Invoke action hasPayloadLinks

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsRrufjsDevicemanagementWindowsautopilotdeploymentprofilesMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsRrufjsDevicemanagementWindowsautopilotdeploymentprofilesMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [PayloadIds <String[]>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mghasdevicemanagementwindowautopilotdeploymentprofilepayloadlink
#>
function Invoke-MgHasDeviceManagementWindowAutopilotDeploymentProfilePayloadLink {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphHasPayloadLinkResultItem])]
[CmdletBinding(DefaultParameterSetName='HasExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Has', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsRrufjsDevicemanagementWindowsautopilotdeploymentprofilesMicrosoftGraphHaspayloadlinksPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='HasExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${PayloadIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Has = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementWindowAutopilotDeploymentProfilePayloadLink_Has';
            HasExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgHasDeviceManagementWindowAutopilotDeploymentProfilePayloadLink_HasExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Logout shared Apple device active user
.Description
Logout shared Apple device active user

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mglogoutdevicemanagementcomanageddevicesharedappledeviceactiveuser
#>
function Invoke-MgLogoutDeviceManagementComanagedDeviceSharedAppleDeviceActiveUser {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Logout', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Logout', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='LogoutViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Logout = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgLogoutDeviceManagementComanagedDeviceSharedAppleDeviceActiveUser_Logout';
            LogoutViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgLogoutDeviceManagementComanagedDeviceSharedAppleDeviceActiveUser_LogoutViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Logout shared Apple device active user
.Description
Logout shared Apple device active user

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mglogoutdevicemanagementdevicehealthscriptdevicerunstatemanageddevicesharedappledeviceactiveuser
#>
function Invoke-MgLogoutDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceSharedAppleDeviceActiveUser {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Logout', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Logout', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Logout', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='LogoutViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Logout = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgLogoutDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceSharedAppleDeviceActiveUser_Logout';
            LogoutViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgLogoutDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceSharedAppleDeviceActiveUser_LogoutViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Logout shared Apple device active user
.Description
Logout shared Apple device active user

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mglogoutdevicemanagementdeviceshellscriptdevicerunstatemanageddevicesharedappledeviceactiveuser
#>
function Invoke-MgLogoutDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceSharedAppleDeviceActiveUser {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Logout', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Logout', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Logout', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='LogoutViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Logout = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgLogoutDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceSharedAppleDeviceActiveUser_Logout';
            LogoutViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgLogoutDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceSharedAppleDeviceActiveUser_LogoutViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Logout shared Apple device active user
.Description
Logout shared Apple device active user

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mglogoutdevicemanagementmanageddevicesharedappledeviceactiveuser
#>
function Invoke-MgLogoutDeviceManagementManagedDeviceSharedAppleDeviceActiveUser {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Logout', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Logout', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='LogoutViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Logout = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgLogoutDeviceManagementManagedDeviceSharedAppleDeviceActiveUser_Logout';
            LogoutViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgLogoutDeviceManagementManagedDeviceSharedAppleDeviceActiveUser_LogoutViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action overrideComplianceState
.Description
Invoke action overrideComplianceState

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1PcnbojDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1PcnbojDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ComplianceState <String>]: Administrator configured device compliance state Enum
  [RemediationUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgoverridedevicemanagementcomanageddevicecompliancestate
#>
function Invoke-MgOverrideDeviceManagementComanagedDeviceComplianceState {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='OverrideExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Override', Mandatory)]
    [Parameter(ParameterSetName='OverrideExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Override', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1PcnbojDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Administrator configured device compliance state Enum
    ${ComplianceState},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${RemediationUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Override = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementComanagedDeviceComplianceState_Override';
            OverrideExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementComanagedDeviceComplianceState_OverrideExpanded';
            OverrideViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementComanagedDeviceComplianceState_OverrideViaIdentity';
            OverrideViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementComanagedDeviceComplianceState_OverrideViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action overrideComplianceState
.Description
Invoke action overrideComplianceState

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1U660PqDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1U660PqDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ComplianceState <String>]: Administrator configured device compliance state Enum
  [RemediationUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgoverridedevicemanagementdevicehealthscriptdevicerunstatemanageddevicecompliancestate
#>
function Invoke-MgOverrideDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceComplianceState {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='OverrideExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Override', Mandatory)]
    [Parameter(ParameterSetName='OverrideExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Override', Mandatory)]
    [Parameter(ParameterSetName='OverrideExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Override', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1U660PqDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Administrator configured device compliance state Enum
    ${ComplianceState},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${RemediationUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Override = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceComplianceState_Override';
            OverrideExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceComplianceState_OverrideExpanded';
            OverrideViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceComplianceState_OverrideViaIdentity';
            OverrideViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceComplianceState_OverrideViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action overrideComplianceState
.Description
Invoke action overrideComplianceState

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Y9Qwb9DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Y9Qwb9DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ComplianceState <String>]: Administrator configured device compliance state Enum
  [RemediationUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgoverridedevicemanagementdeviceshellscriptdevicerunstatemanageddevicecompliancestate
#>
function Invoke-MgOverrideDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceComplianceState {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='OverrideExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Override', Mandatory)]
    [Parameter(ParameterSetName='OverrideExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Override', Mandatory)]
    [Parameter(ParameterSetName='OverrideExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Override', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Y9Qwb9DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Administrator configured device compliance state Enum
    ${ComplianceState},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${RemediationUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Override = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceComplianceState_Override';
            OverrideExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceComplianceState_OverrideExpanded';
            OverrideViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceComplianceState_OverrideViaIdentity';
            OverrideViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceComplianceState_OverrideViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action overrideComplianceState
.Description
Invoke action overrideComplianceState

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1209QsrDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1209QsrDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ComplianceState <String>]: Administrator configured device compliance state Enum
  [RemediationUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgoverridedevicemanagementmanageddevicecompliancestate
#>
function Invoke-MgOverrideDeviceManagementManagedDeviceComplianceState {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='OverrideExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Override', Mandatory)]
    [Parameter(ParameterSetName='OverrideExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Override', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1209QsrDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Administrator configured device compliance state Enum
    ${ComplianceState},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${RemediationUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Override = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementManagedDeviceComplianceState_Override';
            OverrideExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementManagedDeviceComplianceState_OverrideExpanded';
            OverrideViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementManagedDeviceComplianceState_OverrideViaIdentity';
            OverrideViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementManagedDeviceComplianceState_OverrideViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action overrideComplianceState
.Description
Invoke action overrideComplianceState

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsH6Dt0HDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsH6Dt0HDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ComplianceState <String>]: Administrator configured device compliance state Enum
  [RemediationUrl <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgoverridedevicemanagementscriptdevicerunstatemanageddevicecompliancestate
#>
function Invoke-MgOverrideDeviceManagementScriptDeviceRunStateManagedDeviceComplianceState {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='OverrideExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Override', Mandatory)]
    [Parameter(ParameterSetName='OverrideExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Override', Mandatory)]
    [Parameter(ParameterSetName='OverrideExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Override', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='OverrideViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsH6Dt0HDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphOverridecompliancestatePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Administrator configured device compliance state Enum
    ${ComplianceState},

    [Parameter(ParameterSetName='OverrideExpanded')]
    [Parameter(ParameterSetName='OverrideViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${RemediationUrl},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Override = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementScriptDeviceRunStateManagedDeviceComplianceState_Override';
            OverrideExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementScriptDeviceRunStateManagedDeviceComplianceState_OverrideExpanded';
            OverrideViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementScriptDeviceRunStateManagedDeviceComplianceState_OverrideViaIdentity';
            OverrideViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgOverrideDeviceManagementScriptDeviceRunStateManagedDeviceComplianceState_OverrideViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgplaydevicemanagementcomanageddevicelostmodesound
#>
function Invoke-MgPlayDeviceManagementComanagedDeviceLostModeSound {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Play', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Play', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='PlayViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Play = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementComanagedDeviceLostModeSound_Play';
            PlayViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementComanagedDeviceLostModeSound_PlayViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgplaydevicemanagementdevicehealthscriptdevicerunstatemanageddevicelostmodesound
#>
function Invoke-MgPlayDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostModeSound {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Play', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Play', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Play', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='PlayViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Play = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostModeSound_Play';
            PlayViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceLostModeSound_PlayViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgplaydevicemanagementdeviceshellscriptdevicerunstatemanageddevicelostmodesound
#>
function Invoke-MgPlayDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostModeSound {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Play', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Play', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Play', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='PlayViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Play = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostModeSound_Play';
            PlayViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLostModeSound_PlayViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgplaydevicemanagementmanageddevicelostmodesound
#>
function Invoke-MgPlayDeviceManagementManagedDeviceLostModeSound {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Play', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Play', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='PlayViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Play = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementManagedDeviceLostModeSound_Play';
            PlayViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementManagedDeviceLostModeSound_PlayViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgplaydevicemanagementscriptdevicerunstatemanageddevicelostmodesound
#>
function Invoke-MgPlayDeviceManagementScriptDeviceRunStateManagedDeviceLostModeSound {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Play', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Play', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Play', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='PlayViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Play = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementScriptDeviceRunStateManagedDeviceLostModeSound_Play';
            PlayViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgPlayDeviceManagementScriptDeviceRunStateManagedDeviceLostModeSound_PlayViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action queryByPlatformType
.Description
Invoke action queryByPlatformType

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Aw4396DevicemanagementResourceaccessprofilesMicrosoftGraphQuerybyplatformtypePostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementResourceAccessProfileBase
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Aw4396DevicemanagementResourceaccessprofilesMicrosoftGraphQuerybyplatformtypePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [PlatformType <String>]: Supported platform types for policies.
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgquerydevicemanagementresourceaccessprofile
#>
function Invoke-MgQueryDeviceManagementResourceAccessProfile {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementResourceAccessProfileBase])]
[CmdletBinding(DefaultParameterSetName='QueryExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Query', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Aw4396DevicemanagementResourceaccessprofilesMicrosoftGraphQuerybyplatformtypePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='QueryExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='QueryExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Supported platform types for policies.
    ${PlatformType},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Query = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgQueryDeviceManagementResourceAccessProfile_Query';
            QueryExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgQueryDeviceManagementResourceAccessProfile_QueryExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reenable
.Description
Invoke action reenable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgreenabledevicemanagementcomanageddevice
#>
function Invoke-MgReenableDeviceManagementComanagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reenable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reenable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ReenableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reenable = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementComanagedDevice_Reenable';
            ReenableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementComanagedDevice_ReenableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reenable
.Description
Invoke action reenable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgreenabledevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Invoke-MgReenableDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reenable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reenable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Reenable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='ReenableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reenable = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Reenable';
            ReenableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_ReenableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reenable
.Description
Invoke action reenable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgreenabledevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Invoke-MgReenableDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reenable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reenable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Reenable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='ReenableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reenable = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Reenable';
            ReenableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_ReenableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reenable
.Description
Invoke action reenable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgreenabledevicemanagementmanageddevice
#>
function Invoke-MgReenableDeviceManagementManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reenable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reenable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ReenableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reenable = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementManagedDevice_Reenable';
            ReenableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementManagedDevice_ReenableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reenable
.Description
Invoke action reenable

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgreenabledevicemanagementscriptdevicerunstatemanageddevice
#>
function Invoke-MgReenableDeviceManagementScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reenable', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reenable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Reenable', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='ReenableViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reenable = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementScriptDeviceRunStateManagedDevice_Reenable';
            ReenableViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReenableDeviceManagementScriptDeviceRunStateManagedDevice_ReenableViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reprovision
.Description
Invoke action reprovision

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgreprovisiondevicemanagementvirtualendpointcloudpc
#>
function Invoke-MgReprovisionDeviceManagementVirtualEndpointCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reprovision', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reprovision', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of cloudPC
    ${CloudPcId},

    [Parameter(ParameterSetName='ReprovisionViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reprovision = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReprovisionDeviceManagementVirtualEndpointCloudPc_Reprovision';
            ReprovisionViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReprovisionDeviceManagementVirtualEndpointCloudPc_ReprovisionViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Retire a device
.Description
Retire a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgretiredevicemanagementcomanageddevice
#>
function Invoke-MgRetireDeviceManagementComanagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Retire', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Retire', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RetireViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Retire = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementComanagedDevice_Retire';
            RetireViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementComanagedDevice_RetireViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Retire a device
.Description
Retire a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgretiredevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Invoke-MgRetireDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Retire', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Retire', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Retire', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='RetireViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Retire = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Retire';
            RetireViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_RetireViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Retire a device
.Description
Retire a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgretiredevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Invoke-MgRetireDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Retire', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Retire', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Retire', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='RetireViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Retire = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Retire';
            RetireViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_RetireViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Retire a device
.Description
Retire a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgretiredevicemanagementmanageddevice
#>
function Invoke-MgRetireDeviceManagementManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Retire', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Retire', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RetireViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Retire = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementManagedDevice_Retire';
            RetireViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementManagedDevice_RetireViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Retire a device
.Description
Retire a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgretiredevicemanagementscriptdevicerunstatemanageddevice
#>
function Invoke-MgRetireDeviceManagementScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Retire', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Retire', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Retire', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='RetireViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Retire = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementScriptDeviceRunStateManagedDevice_Retire';
            RetireViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRetireDeviceManagementScriptDeviceRunStateManagedDevice_RetireViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action reupload
.Description
Invoke action reupload

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgreuploaddevicemanagementvirtualendpointdeviceimage
#>
function Invoke-MgReuploadDeviceManagementVirtualEndpointDeviceImage {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reupload', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reupload', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of cloudPcDeviceImage
    ${CloudPcDeviceImageId},

    [Parameter(ParameterSetName='ReuploadViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reupload = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReuploadDeviceManagementVirtualEndpointDeviceImage_Reupload';
            ReuploadViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgReuploadDeviceManagementVirtualEndpointDeviceImage_ReuploadViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Rotate BitLockerKeys
.Description
Rotate BitLockerKeys

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementcomanageddevicebitlockerkey
#>
function Invoke-MgRotateDeviceManagementComanagedDeviceBitLockerKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementComanagedDeviceBitLockerKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementComanagedDeviceBitLockerKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action rotateFileVaultKey
.Description
Invoke action rotateFileVaultKey

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementcomanageddevicefilevaultkey
#>
function Invoke-MgRotateDeviceManagementComanagedDeviceFileVaultKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementComanagedDeviceFileVaultKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementComanagedDeviceFileVaultKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Rotate BitLockerKeys
.Description
Rotate BitLockerKeys

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementdevicehealthscriptdevicerunstatemanageddevicebitlockerkey
#>
function Invoke-MgRotateDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceBitLockerKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceBitLockerKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceBitLockerKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action rotateFileVaultKey
.Description
Invoke action rotateFileVaultKey

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementdevicehealthscriptdevicerunstatemanageddevicefilevaultkey
#>
function Invoke-MgRotateDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceFileVaultKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceFileVaultKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceFileVaultKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Rotate BitLockerKeys
.Description
Rotate BitLockerKeys

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementdeviceshellscriptdevicerunstatemanageddevicebitlockerkey
#>
function Invoke-MgRotateDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceBitLockerKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceBitLockerKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceBitLockerKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action rotateFileVaultKey
.Description
Invoke action rotateFileVaultKey

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementdeviceshellscriptdevicerunstatemanageddevicefilevaultkey
#>
function Invoke-MgRotateDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceFileVaultKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceFileVaultKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceFileVaultKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Rotate BitLockerKeys
.Description
Rotate BitLockerKeys

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementmanageddevicebitlockerkey
#>
function Invoke-MgRotateDeviceManagementManagedDeviceBitLockerKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementManagedDeviceBitLockerKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementManagedDeviceBitLockerKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action rotateFileVaultKey
.Description
Invoke action rotateFileVaultKey

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementmanageddevicefilevaultkey
#>
function Invoke-MgRotateDeviceManagementManagedDeviceFileVaultKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementManagedDeviceFileVaultKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementManagedDeviceFileVaultKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Rotate BitLockerKeys
.Description
Rotate BitLockerKeys

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementscriptdevicerunstatemanageddevicebitlockerkey
#>
function Invoke-MgRotateDeviceManagementScriptDeviceRunStateManagedDeviceBitLockerKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementScriptDeviceRunStateManagedDeviceBitLockerKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementScriptDeviceRunStateManagedDeviceBitLockerKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action rotateFileVaultKey
.Description
Invoke action rotateFileVaultKey

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgrotatedevicemanagementscriptdevicerunstatemanageddevicefilevaultkey
#>
function Invoke-MgRotateDeviceManagementScriptDeviceRunStateManagedDeviceFileVaultKey {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Rotate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Rotate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='RotateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Rotate = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementScriptDeviceRunStateManagedDeviceFileVaultKey_Rotate';
            RotateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgRotateDeviceManagementScriptDeviceRunStateManagedDeviceFileVaultKey_RotateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsDefenderScan
.Description
Invoke action windowsDefenderScan

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths88QmudDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths88QmudDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [QuickScan <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgscandevicemanagementcomanageddevicewindowdefender
#>
function Invoke-MgScanDeviceManagementComanagedDeviceWindowDefender {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ScanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Scan', Mandatory)]
    [Parameter(ParameterSetName='ScanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Scan', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths88QmudDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${QuickScan},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Scan = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementComanagedDeviceWindowDefender_Scan';
            ScanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementComanagedDeviceWindowDefender_ScanExpanded';
            ScanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementComanagedDeviceWindowDefender_ScanViaIdentity';
            ScanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementComanagedDeviceWindowDefender_ScanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsDefenderScan
.Description
Invoke action windowsDefenderScan

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1KdwzpoDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1KdwzpoDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [QuickScan <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgscandevicemanagementdevicehealthscriptdevicerunstatemanageddevicewindowdefender
#>
function Invoke-MgScanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDefender {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ScanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Scan', Mandatory)]
    [Parameter(ParameterSetName='ScanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Scan', Mandatory)]
    [Parameter(ParameterSetName='ScanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Scan', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1KdwzpoDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${QuickScan},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Scan = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDefender_Scan';
            ScanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDefender_ScanExpanded';
            ScanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDefender_ScanViaIdentity';
            ScanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDefender_ScanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsDefenderScan
.Description
Invoke action windowsDefenderScan

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Mtr2IDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Mtr2IDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [QuickScan <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgscandevicemanagementdeviceshellscriptdevicerunstatemanageddevicewindowdefender
#>
function Invoke-MgScanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDefender {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ScanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Scan', Mandatory)]
    [Parameter(ParameterSetName='ScanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Scan', Mandatory)]
    [Parameter(ParameterSetName='ScanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Scan', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Mtr2IDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${QuickScan},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Scan = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDefender_Scan';
            ScanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDefender_ScanExpanded';
            ScanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDefender_ScanViaIdentity';
            ScanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDefender_ScanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsDefenderScan
.Description
Invoke action windowsDefenderScan

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsByrzneDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsByrzneDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [QuickScan <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgscandevicemanagementmanageddevicewindowdefender
#>
function Invoke-MgScanDeviceManagementManagedDeviceWindowDefender {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ScanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Scan', Mandatory)]
    [Parameter(ParameterSetName='ScanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Scan', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsByrzneDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${QuickScan},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Scan = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementManagedDeviceWindowDefender_Scan';
            ScanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementManagedDeviceWindowDefender_ScanExpanded';
            ScanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementManagedDeviceWindowDefender_ScanViaIdentity';
            ScanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementManagedDeviceWindowDefender_ScanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsDefenderScan
.Description
Invoke action windowsDefenderScan

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Rw88NdDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Rw88NdDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [QuickScan <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgscandevicemanagementscriptdevicerunstatemanageddevicewindowdefender
#>
function Invoke-MgScanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDefender {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ScanExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Scan', Mandatory)]
    [Parameter(ParameterSetName='ScanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Scan', Mandatory)]
    [Parameter(ParameterSetName='ScanExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Scan', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScanViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Rw88NdDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphWindowsdefenderscanPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ScanExpanded')]
    [Parameter(ParameterSetName='ScanViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${QuickScan},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Scan = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDefender_Scan';
            ScanExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDefender_ScanExpanded';
            ScanViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDefender_ScanViaIdentity';
            ScanViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScanDeviceManagementScriptDeviceRunStateManagedDeviceWindowDefender_ScanViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action scheduleActionsForRules
.Description
Invoke action scheduleActionsForRules

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsY039HhDevicemanagementDevicecompliancepoliciesDevicecompliancepolicyIdMicrosoftGraphScheduleactionsforrulesPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsY039HhDevicemanagementDevicecompliancepoliciesDevicecompliancepolicyIdMicrosoftGraphScheduleactionsforrulesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceComplianceScheduledActionForRules <IMicrosoftGraphDeviceComplianceScheduledActionForRule1[]>]: 
    [Id <String>]: Read-only.
    [RuleName <String>]: Name of the rule which this scheduled action applies to. Currently scheduled actions are created per policy instead of per rule, thus RuleName is always set to default value PasswordRequired.
    [ScheduledActionConfigurations <IMicrosoftGraphDeviceComplianceActionItem1[]>]: The list of scheduled action configurations for this compliance policy. Compliance policy must have one and only one block scheduled action.
      [Id <String>]: Read-only.
      [ActionType <String>]: Scheduled Action Type Enum
      [GracePeriodHours <Int32?>]: Number of hours to wait till the action will be enforced. Valid values 0 to 8760
      [NotificationMessageCcList <String[]>]: A list of group IDs to speicify who to CC this notification message to.
      [NotificationTemplateId <String>]: What notification Message template to use

DEVICECOMPLIANCESCHEDULEDACTIONFORRULES <IMicrosoftGraphDeviceComplianceScheduledActionForRule1[]>: .
  [Id <String>]: Read-only.
  [RuleName <String>]: Name of the rule which this scheduled action applies to. Currently scheduled actions are created per policy instead of per rule, thus RuleName is always set to default value PasswordRequired.
  [ScheduledActionConfigurations <IMicrosoftGraphDeviceComplianceActionItem1[]>]: The list of scheduled action configurations for this compliance policy. Compliance policy must have one and only one block scheduled action.
    [Id <String>]: Read-only.
    [ActionType <String>]: Scheduled Action Type Enum
    [GracePeriodHours <Int32?>]: Number of hours to wait till the action will be enforced. Valid values 0 to 8760
    [NotificationMessageCcList <String[]>]: A list of group IDs to speicify who to CC this notification message to.
    [NotificationTemplateId <String>]: What notification Message template to use

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgscheduledevicemanagementdevicecompliancepolicyaction
#>
function Invoke-MgScheduleDeviceManagementDeviceCompliancePolicyAction {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ScheduleExpanded1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Schedule1', Mandatory)]
    [Parameter(ParameterSetName='ScheduleExpanded1', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceCompliancePolicy
    ${DeviceCompliancePolicyId},

    [Parameter(ParameterSetName='ScheduleViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScheduleViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Schedule1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ScheduleViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsY039HhDevicemanagementDevicecompliancepoliciesDevicecompliancepolicyIdMicrosoftGraphScheduleactionsforrulesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ScheduleExpanded1')]
    [Parameter(ParameterSetName='ScheduleViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ScheduleExpanded1')]
    [Parameter(ParameterSetName='ScheduleViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceComplianceScheduledActionForRule1[]]
    # .
    # To construct, see NOTES section for DEVICECOMPLIANCESCHEDULEDACTIONFORRULES properties and create a hash table.
    ${DeviceComplianceScheduledActionForRules},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Schedule1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScheduleDeviceManagementDeviceCompliancePolicyAction_Schedule1';
            ScheduleExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScheduleDeviceManagementDeviceCompliancePolicyAction_ScheduleExpanded1';
            ScheduleViaIdentity1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScheduleDeviceManagementDeviceCompliancePolicyAction_ScheduleViaIdentity1';
            ScheduleViaIdentityExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgScheduleDeviceManagementDeviceCompliancePolicyAction_ScheduleViaIdentityExpanded1';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action shareForSchoolDataSyncService
.Description
Invoke action shareForSchoolDataSyncService

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgsharedevicemanagementdeponboardingsetting
#>
function Invoke-MgShareDeviceManagementDepOnboardingSetting {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Share', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Share', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of depOnboardingSetting
    ${DepOnboardingSettingId},

    [Parameter(ParameterSetName='ShareViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Share = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgShareDeviceManagementDepOnboardingSetting_Share';
            ShareViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgShareDeviceManagementDepOnboardingSetting_ShareViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Unassigns the user from an Autopilot device.
.Description
Unassigns the user from an Autopilot device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgunassigndevicemanagementwindowautopilotdeploymentprofileassigneddeviceuserfromdevice
#>
function Invoke-MgUnassignDeviceManagementWindowAutopilotDeploymentProfileAssignedDeviceUserFromDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Unassign', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Unassign', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeploymentProfile
    ${WindowsAutopilotDeploymentProfileId},

    [Parameter(ParameterSetName='Unassign', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='UnassignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Unassign = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUnassignDeviceManagementWindowAutopilotDeploymentProfileAssignedDeviceUserFromDevice_Unassign';
            UnassignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUnassignDeviceManagementWindowAutopilotDeploymentProfileAssignedDeviceUserFromDevice_UnassignViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Unassigns the user from an Autopilot device.
.Description
Unassigns the user from an Autopilot device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgunassigndevicemanagementwindowautopilotdeviceidentityuserfromdevice
#>
function Invoke-MgUnassignDeviceManagementWindowAutopilotDeviceIdentityUserFromDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Unassign', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Unassign', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='UnassignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Unassign = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUnassignDeviceManagementWindowAutopilotDeviceIdentityUserFromDevice_Unassign';
            UnassignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUnassignDeviceManagementWindowAutopilotDeviceIdentityUserFromDevice_UnassignViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action unbind
.Description
Invoke action unbind

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgunbinddevicemanagementandroidforworksetting
#>
function Invoke-MgUnbindDeviceManagementAndroidForWorkSetting {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Unbind', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Unbind = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUnbindDeviceManagementAndroidForWorkSetting_Unbind';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action unbind
.Description
Invoke action unbind

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgunbinddevicemanagementandroidmanagedstoreaccountenterprisesetting
#>
function Invoke-MgUnbindDeviceManagementAndroidManagedStoreAccountEnterpriseSetting {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Unbind', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Unbind = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUnbindDeviceManagementAndroidManagedStoreAccountEnterpriseSetting_Unbind';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action unshareForSchoolDataSyncService
.Description
Invoke action unshareForSchoolDataSyncService

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mgunsharedevicemanagementdeponboardingsetting
#>
function Invoke-MgUnshareDeviceManagementDepOnboardingSetting {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Unshare', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Unshare', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of depOnboardingSetting
    ${DepOnboardingSettingId},

    [Parameter(ParameterSetName='UnshareViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Unshare = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUnshareDeviceManagementDepOnboardingSetting_Unshare';
            UnshareViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUnshareDeviceManagementDepOnboardingSetting_UnshareViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Uploads a new Device Enrollment Program token
.Description
Uploads a new Device Enrollment Program token

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths7Ytj24DevicemanagementDeponboardingsettingsDeponboardingsettingIdMicrosoftGraphUploaddeptokenPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths7Ytj24DevicemanagementDeponboardingsettingsDeponboardingsettingIdMicrosoftGraphUploaddeptokenPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AppleId <String>]: 
  [DepToken <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mguploaddevicemanagementdeponboardingsettingdeptoken
#>
function Invoke-MgUploadDeviceManagementDepOnboardingSettingDepToken {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UploadExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Upload', Mandatory)]
    [Parameter(ParameterSetName='UploadExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of depOnboardingSetting
    ${DepOnboardingSettingId},

    [Parameter(ParameterSetName='UploadViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Upload', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UploadViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths7Ytj24DevicemanagementDeponboardingsettingsDeponboardingsettingIdMicrosoftGraphUploaddeptokenPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UploadExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UploadExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${AppleId},

    [Parameter(ParameterSetName='UploadExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DepToken},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Upload = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUploadDeviceManagementDepOnboardingSettingDepToken_Upload';
            UploadExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUploadDeviceManagementDepOnboardingSettingDepToken_UploadExpanded';
            UploadViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUploadDeviceManagementDepOnboardingSettingDepToken_UploadViaIdentity';
            UploadViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUploadDeviceManagementDepOnboardingSettingDepToken_UploadViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action uploadNewVersion
.Description
Invoke action uploadNewVersion

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsQaczrkDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphUploadnewversionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsQaczrkDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphUploadnewversionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Content <Byte[]>]: 
  [GroupPolicyUploadedLanguageFiles <IMicrosoftGraphGroupPolicyUploadedLanguageFile[]>]: 
    [Content <Byte[]>]: The contents of the uploaded ADML file.
    [FileName <String>]: The file name of the uploaded ADML file.
    [Id <String>]: Key of the entity.
    [LanguageCode <String>]: The language code of the uploaded ADML file.
    [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.

GROUPPOLICYUPLOADEDLANGUAGEFILES <IMicrosoftGraphGroupPolicyUploadedLanguageFile[]>: .
  [Content <Byte[]>]: The contents of the uploaded ADML file.
  [FileName <String>]: The file name of the uploaded ADML file.
  [Id <String>]: Key of the entity.
  [LanguageCode <String>]: The language code of the uploaded ADML file.
  [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/invoke-mguploaddevicemanagementgrouppolicyuploadeddefinitionfilenewversion
#>
function Invoke-MgUploadDeviceManagementGroupPolicyUploadedDefinitionFileNewVersion {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UploadExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Upload', Mandatory)]
    [Parameter(ParameterSetName='UploadExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of groupPolicyUploadedDefinitionFile
    ${GroupPolicyUploadedDefinitionFileId},

    [Parameter(ParameterSetName='UploadViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Upload', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UploadViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsQaczrkDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphUploadnewversionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UploadExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UploadExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Input File for Content (.)
    ${ContentInputFile},

    [Parameter(ParameterSetName='UploadExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyUploadedLanguageFile[]]
    # .
    # To construct, see NOTES section for GROUPPOLICYUPLOADEDLANGUAGEFILES properties and create a hash table.
    ${GroupPolicyUploadedLanguageFiles},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Upload = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUploadDeviceManagementGroupPolicyUploadedDefinitionFileNewVersion_Upload';
            UploadExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUploadDeviceManagementGroupPolicyUploadedDefinitionFileNewVersion_UploadExpanded';
            UploadViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUploadDeviceManagementGroupPolicyUploadedDefinitionFileNewVersion_UploadViaIdentity';
            UploadViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Invoke-MgUploadDeviceManagementGroupPolicyUploadedDefinitionFileNewVersion_UploadViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/lock-mgdevicemanagementcomanageddeviceremote
#>
function Lock-MgDeviceManagementComanagedDeviceRemote {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Lock', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Lock', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='LockViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Lock = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementComanagedDeviceRemote_Lock';
            LockViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementComanagedDeviceRemote_LockViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/lock-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddeviceremote
#>
function Lock-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceRemote {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Lock', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Lock', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Lock', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='LockViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Lock = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceRemote_Lock';
            LockViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceRemote_LockViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/lock-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddeviceremote
#>
function Lock-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceRemote {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Lock', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Lock', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Lock', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='LockViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Lock = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceRemote_Lock';
            LockViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceRemote_LockViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/lock-mgdevicemanagementmanageddeviceremote
#>
function Lock-MgDeviceManagementManagedDeviceRemote {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Lock', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Lock', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='LockViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Lock = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementManagedDeviceRemote_Lock';
            LockViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementManagedDeviceRemote_LockViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Remote lock
.Description
Remote lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/lock-mgdevicemanagementscriptdevicerunstatemanageddeviceremote
#>
function Lock-MgDeviceManagementScriptDeviceRunStateManagedDeviceRemote {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Lock', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Lock', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Lock', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='LockViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Lock = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementScriptDeviceRunStateManagedDeviceRemote_Lock';
            LockViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Lock-MgDeviceManagementScriptDeviceRunStateManagedDeviceRemote_LockViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action moveDevicesToOU
.Description
Invoke action moveDevicesToOU

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsU50RagDevicemanagementComanageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsU50RagDevicemanagementComanageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceIds <String[]>]: 
  [OrganizationalUnitPath <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/move-mgdevicemanagementcomanageddevicetoou
#>
function Move-MgDeviceManagementComanagedDeviceToOu {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='MoveExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Move', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsU50RagDevicemanagementComanageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${OrganizationalUnitPath},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Move = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementComanagedDeviceToOu_Move';
            MoveExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementComanagedDeviceToOu_MoveExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action moveDevicesToOU
.Description
Invoke action moveDevicesToOU

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsZg32IyDevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsZg32IyDevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceIds <String[]>]: 
  [OrganizationalUnitPath <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/move-mgdevicemanagementdetectedappmanageddevicetoou
#>
function Move-MgDeviceManagementDetectedAppManagedDeviceToOu {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='MoveExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Move', Mandatory)]
    [Parameter(ParameterSetName='MoveExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of detectedApp
    ${DetectedAppId},

    [Parameter(ParameterSetName='MoveViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='MoveViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Move', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='MoveViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsZg32IyDevicemanagementDetectedappsDetectedappIdManageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Parameter(ParameterSetName='MoveViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Parameter(ParameterSetName='MoveViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Parameter(ParameterSetName='MoveViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${OrganizationalUnitPath},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Move = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementDetectedAppManagedDeviceToOu_Move';
            MoveExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementDetectedAppManagedDeviceToOu_MoveExpanded';
            MoveViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementDetectedAppManagedDeviceToOu_MoveViaIdentity';
            MoveViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementDetectedAppManagedDeviceToOu_MoveViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action migrateToTemplate
.Description
Invoke action migrateToTemplate

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1S6He5TDevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphMigratetotemplatePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1S6He5TDevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphMigratetotemplatePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [NewTemplateId <String>]: 
  [PreserveCustomValues <Boolean?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/move-mgdevicemanagementintenttotemplate
#>
function Move-MgDeviceManagementIntentToTemplate {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='MigrateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Migrate', Mandatory)]
    [Parameter(ParameterSetName='MigrateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementIntent
    ${DeviceManagementIntentId},

    [Parameter(ParameterSetName='MigrateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='MigrateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Migrate', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='MigrateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1S6He5TDevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphMigratetotemplatePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='MigrateExpanded')]
    [Parameter(ParameterSetName='MigrateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='MigrateExpanded')]
    [Parameter(ParameterSetName='MigrateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NewTemplateId},

    [Parameter(ParameterSetName='MigrateExpanded')]
    [Parameter(ParameterSetName='MigrateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${PreserveCustomValues},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Migrate = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementIntentToTemplate_Migrate';
            MigrateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementIntentToTemplate_MigrateExpanded';
            MigrateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementIntentToTemplate_MigrateViaIdentity';
            MigrateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementIntentToTemplate_MigrateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action moveDevicesToOU
.Description
Invoke action moveDevicesToOU

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Tm5YpiDevicemanagementManageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Tm5YpiDevicemanagementManageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceIds <String[]>]: 
  [OrganizationalUnitPath <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/move-mgdevicemanagementmanageddevicetoou
#>
function Move-MgDeviceManagementManagedDeviceToOu {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='MoveExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Move', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Tm5YpiDevicemanagementManageddevicesMicrosoftGraphMovedevicestoouPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(ParameterSetName='MoveExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${OrganizationalUnitPath},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Move = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementManagedDeviceToOu_Move';
            MoveExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Move-MgDeviceManagementManagedDeviceToOu_MoveExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createToken
.Description
Invoke action createToken

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths11AjevhDevicemanagementAndroiddeviceownerenrollmentprofilesAndroiddeviceownerenrollmentprofileIdMicrosoftGraphCreatetokenPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths11AjevhDevicemanagementAndroiddeviceownerenrollmentprofilesAndroiddeviceownerenrollmentprofileIdMicrosoftGraphCreatetokenPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TokenValidityInSeconds <Int32?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementandroiddeviceownerenrollmentprofiletoken
#>
function New-MgDeviceManagementAndroidDeviceOwnerEnrollmentProfileToken {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of androidDeviceOwnerEnrollmentProfile
    ${AndroidDeviceOwnerEnrollmentProfileId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths11AjevhDevicemanagementAndroiddeviceownerenrollmentprofilesAndroiddeviceownerenrollmentprofileIdMicrosoftGraphCreatetokenPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${TokenValidityInSeconds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidDeviceOwnerEnrollmentProfileToken_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidDeviceOwnerEnrollmentProfileToken_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidDeviceOwnerEnrollmentProfileToken_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidDeviceOwnerEnrollmentProfileToken_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createToken
.Description
Invoke action createToken

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1X3G6SqDevicemanagementAndroidforworkenrollmentprofilesAndroidforworkenrollmentprofileIdMicrosoftGraphCreatetokenPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1X3G6SqDevicemanagementAndroidforworkenrollmentprofilesAndroidforworkenrollmentprofileIdMicrosoftGraphCreatetokenPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TokenValidityInSeconds <Int32?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementandroidforworkenrollmentprofiletoken
#>
function New-MgDeviceManagementAndroidForWorkEnrollmentProfileToken {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of androidForWorkEnrollmentProfile
    ${AndroidForWorkEnrollmentProfileId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1X3G6SqDevicemanagementAndroidforworkenrollmentprofilesAndroidforworkenrollmentprofileIdMicrosoftGraphCreatetokenPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${TokenValidityInSeconds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidForWorkEnrollmentProfileToken_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidForWorkEnrollmentProfileToken_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidForWorkEnrollmentProfileToken_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidForWorkEnrollmentProfileToken_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Generates a web token that is used in an embeddable component.
.Description
Generates a web token that is used in an embeddable component.

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsIaia9DDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphCreategoogleplaywebtokenPostRequestbodyContentApplicationJsonSchema
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsIaia9DDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphCreategoogleplaywebtokenPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ParentUri <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementandroidmanagedstoreaccountenterprisesettinggoogleplaywebtoken
#>
function New-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingGooglePlayWebToken {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsIaia9DDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphCreategoogleplaywebtokenPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${ParentUri},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingGooglePlayWebToken_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingGooglePlayWebToken_CreateExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Download Apple push notification certificate signing request
.Description
Download Apple push notification certificate signing request

.Outputs
System.String
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementapplepushnotificationcertificateapplepushnotificationcertificatesigningrequest
#>
function New-MgDeviceManagementApplePushNotificationCertificateApplePushNotificationCertificateSigningRequest {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='Generate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Generate = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementApplePushNotificationCertificateApplePushNotificationCertificateSigningRequest_Generate';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createDownloadUrl
.Description
Invoke action createDownloadUrl

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementcomanageddevicelogcollectionrequestdownloadurl
#>
function New-MgDeviceManagementComanagedDeviceLogCollectionRequestDownloadUrl {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='Create', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceLogCollectionResponse
    ${DeviceLogCollectionResponseId},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementComanagedDeviceLogCollectionRequestDownloadUrl_Create';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementComanagedDeviceLogCollectionRequestDownloadUrl_CreateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createCopy
.Description
Invoke action createCopy

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Kgt4HiDevicemanagementConfigurationpoliciesDevicemanagementconfigurationpolicyIdMicrosoftGraphCreatecopyPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementConfigurationPolicy
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Kgt4HiDevicemanagementConfigurationpoliciesDevicemanagementconfigurationpolicyIdMicrosoftGraphCreatecopyPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Description <String>]: 
  [DisplayName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementconfigurationpolicycopy
#>
function New-MgDeviceManagementConfigurationPolicyCopy {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementConfigurationPolicy])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementConfigurationPolicy
    ${DeviceManagementConfigurationPolicyId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Kgt4HiDevicemanagementConfigurationpoliciesDevicemanagementconfigurationpolicyIdMicrosoftGraphCreatecopyPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Description},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DisplayName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementConfigurationPolicyCopy_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementConfigurationPolicyCopy_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementConfigurationPolicyCopy_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementConfigurationPolicyCopy_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Generate a public key to use to encrypt the Apple device enrollment program token
.Description
Generate a public key to use to encrypt the Apple device enrollment program token

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementdeponboardingsettingencryptionpublickey
#>
function New-MgDeviceManagementDepOnboardingSettingEncryptionPublicKey {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='Generate', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Generate', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of depOnboardingSetting
    ${DepOnboardingSettingId},

    [Parameter(ParameterSetName='GenerateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Generate = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementDepOnboardingSettingEncryptionPublicKey_Generate';
            GenerateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementDepOnboardingSettingEncryptionPublicKey_GenerateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createDeviceLogCollectionRequest
.Description
Invoke action createDeviceLogCollectionRequest

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1P98AgxDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCreatedevicelogcollectionrequestPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceLogCollectionResponse
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1P98AgxDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCreatedevicelogcollectionrequestPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TemplateType <IMicrosoftGraphDeviceLogCollectionRequest>]: Windows Log Collection request entity.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Id <String>]: The unique identifier
    [TemplateType <String>]: Enum for the template type used for collecting logs

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

TEMPLATETYPE <IMicrosoftGraphDeviceLogCollectionRequest>: Windows Log Collection request entity.
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Id <String>]: The unique identifier
  [TemplateType <String>]: Enum for the template type used for collecting logs
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicelogcollectionrequest
#>
function New-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLogCollectionRequest {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceLogCollectionResponse])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1P98AgxDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphCreatedevicelogcollectionrequestPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceLogCollectionRequest]
    # Windows Log Collection request entity.
    # To construct, see NOTES section for TEMPLATETYPE properties and create a hash table.
    ${TemplateType},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLogCollectionRequest_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLogCollectionRequest_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLogCollectionRequest_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceLogCollectionRequest_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createMigrationReport
.Description
Invoke action createMigrationReport

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsDjtigpDevicemanagementGrouppolicymigrationreportsMicrosoftGraphCreatemigrationreportPostRequestbodyContentApplicationJsonSchema
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsDjtigpDevicemanagementGrouppolicymigrationreportsMicrosoftGraphCreatemigrationreportPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [GroupPolicyObjectFile <IMicrosoftGraphGroupPolicyObjectFile>]: The Group Policy Object file uploaded by admin.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Id <String>]: Read-only.
    [Content <String>]: The Group Policy Object file content.
    [CreatedDateTime <DateTime?>]: The date and time at which the GroupPolicy was first uploaded.
    [GroupPolicyObjectId <String>]: The Group Policy Object GUID from GPO Xml content
    [LastModifiedDateTime <DateTime?>]: The date and time at which the GroupPolicyObjectFile was last modified.
    [OuDistinguishedName <String>]: The distinguished name of the OU.

GROUPPOLICYOBJECTFILE <IMicrosoftGraphGroupPolicyObjectFile>: The Group Policy Object file uploaded by admin.
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Id <String>]: Read-only.
  [Content <String>]: The Group Policy Object file content.
  [CreatedDateTime <DateTime?>]: The date and time at which the GroupPolicy was first uploaded.
  [GroupPolicyObjectId <String>]: The Group Policy Object GUID from GPO Xml content
  [LastModifiedDateTime <DateTime?>]: The date and time at which the GroupPolicyObjectFile was last modified.
  [OuDistinguishedName <String>]: The distinguished name of the OU.
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementgrouppolicymigrationreport
#>
function New-MgDeviceManagementGroupPolicyMigrationReport {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsDjtigpDevicemanagementGrouppolicymigrationreportsMicrosoftGraphCreatemigrationreportPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyObjectFile]
    # The Group Policy Object file uploaded by admin.
    # To construct, see NOTES section for GROUPPOLICYOBJECTFILE properties and create a hash table.
    ${GroupPolicyObjectFile},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementGroupPolicyMigrationReport_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementGroupPolicyMigrationReport_CreateExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createCopy
.Description
Invoke action createCopy

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1FidwqiDevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphCreatecopyPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1FidwqiDevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphCreatecopyPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DisplayName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementintentcopy
#>
function New-MgDeviceManagementIntentCopy {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementIntent
    ${DeviceManagementIntentId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1FidwqiDevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphCreatecopyPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DisplayName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementIntentCopy_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementIntentCopy_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementIntentCopy_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementIntentCopy_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createDownloadUrl
.Description
Invoke action createDownloadUrl

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementmanageddevicelogcollectionrequestdownloadurl
#>
function New-MgDeviceManagementManagedDeviceLogCollectionRequestDownloadUrl {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='Create', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceLogCollectionResponse
    ${DeviceLogCollectionResponseId},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementManagedDeviceLogCollectionRequestDownloadUrl_Create';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementManagedDeviceLogCollectionRequestDownloadUrl_CreateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createDeviceLogCollectionRequest
.Description
Invoke action createDeviceLogCollectionRequest

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Bfb5Z4DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphCreatedevicelogcollectionrequestPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceLogCollectionResponse
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Bfb5Z4DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphCreatedevicelogcollectionrequestPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TemplateType <IMicrosoftGraphDeviceLogCollectionRequest>]: Windows Log Collection request entity.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Id <String>]: The unique identifier
    [TemplateType <String>]: Enum for the template type used for collecting logs

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

TEMPLATETYPE <IMicrosoftGraphDeviceLogCollectionRequest>: Windows Log Collection request entity.
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Id <String>]: The unique identifier
  [TemplateType <String>]: Enum for the template type used for collecting logs
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementmanageddevicelogcollectionrequest
#>
function New-MgDeviceManagementManagedDeviceLogCollectionRequest {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceLogCollectionResponse])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Bfb5Z4DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphCreatedevicelogcollectionrequestPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceLogCollectionRequest]
    # Windows Log Collection request entity.
    # To construct, see NOTES section for TEMPLATETYPE properties and create a hash table.
    ${TemplateType},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementManagedDeviceLogCollectionRequest_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementManagedDeviceLogCollectionRequest_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementManagedDeviceLogCollectionRequest_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementManagedDeviceLogCollectionRequest_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsDefenderUpdateSignatures
.Description
Invoke action windowsDefenderUpdateSignatures

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementmanageddevicewindowsdefenderupdatesignature
#>
function New-MgDeviceManagementManagedDeviceWindowsDefenderUpdateSignature {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Update', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementManagedDeviceWindowsDefenderUpdateSignature_Update';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementManagedDeviceWindowsDefenderUpdateSignature_UpdateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createDownloadUrl
.Description
Invoke action createDownloadUrl

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementmicrosofttunnelserverlogcollectionresponsedownloadurl
#>
function New-MgDeviceManagementMicrosoftTunnelServerLogCollectionResponseDownloadUrl {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='Create', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of microsoftTunnelServerLogCollectionResponse
    ${MicrosoftTunnelServerLogCollectionResponseId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementMicrosoftTunnelServerLogCollectionResponseDownloadUrl_Create';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementMicrosoftTunnelServerLogCollectionResponseDownloadUrl_CreateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createServerLogCollectionRequest
.Description
Invoke action createServerLogCollectionRequest

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths11Xfdy7DevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphCreateserverlogcollectionrequestPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphMicrosoftTunnelServerLogCollectionResponse
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths11Xfdy7DevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphCreateserverlogcollectionrequestPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [EndDateTime <DateTime?>]: 
  [StartDateTime <DateTime?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementmicrosofttunnelsitemicrosofttunnelserverlogcollectionrequest
#>
function New-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerLogCollectionRequest {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphMicrosoftTunnelServerLogCollectionResponse])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of microsoftTunnelServer
    ${MicrosoftTunnelServerId},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of microsoftTunnelSite
    ${MicrosoftTunnelSiteId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths11Xfdy7DevicemanagementMicrosofttunnelsitesMicrosofttunnelsiteIdMicrosofttunnelserversMicrosofttunnelserverIdMicrosoftGraphCreateserverlogcollectionrequestPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.DateTime]
    # .
    ${EndDateTime},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.DateTime]
    # .
    ${StartDateTime},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerLogCollectionRequest_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerLogCollectionRequest_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerLogCollectionRequest_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementMicrosoftTunnelSiteMicrosoftTunnelServerLogCollectionRequest_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createDownloadUrl
.Description
Invoke action createDownloadUrl

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphAppLogCollectionDownloadDetails
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementmobileapptroubleshootingeventapplogcollectionrequestdownloadurl
#>
function New-MgDeviceManagementMobileAppTroubleshootingEventAppLogCollectionRequestDownloadUrl {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphAppLogCollectionDownloadDetails])]
[CmdletBinding(DefaultParameterSetName='Create', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of appLogCollectionRequest
    ${AppLogCollectionRequestId},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of mobileAppTroubleshootingEvent
    ${MobileAppTroubleshootingEventId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementMobileAppTroubleshootingEventAppLogCollectionRequestDownloadUrl_Create';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementMobileAppTroubleshootingEventAppLogCollectionRequestDownloadUrl_CreateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createInstance
.Description
Invoke action createInstance

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Acen0GDevicemanagementTemplatesDevicemanagementtemplateIdMicrosoftGraphCreateinstancePostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Acen0GDevicemanagementTemplatesDevicemanagementtemplateIdMicrosoftGraphCreateinstancePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Description <String>]: 
  [DisplayName <String>]: 
  [RoleScopeTagIds <String[]>]: 
  [SettingsDelta <IMicrosoftGraphDeviceManagementSettingInstance[]>]: 
    [Id <String>]: Read-only.
    [DefinitionId <String>]: The ID of the setting definition for this instance
    [ValueJson <String>]: JSON representation of the value

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

SETTINGSDELTA <IMicrosoftGraphDeviceManagementSettingInstance[]>: .
  [Id <String>]: Read-only.
  [DefinitionId <String>]: The ID of the setting definition for this instance
  [ValueJson <String>]: JSON representation of the value
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementtemplateinstance
#>
function New-MgDeviceManagementTemplateInstance {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementTemplate
    ${DeviceManagementTemplateId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Acen0GDevicemanagementTemplatesDevicemanagementtemplateIdMicrosoftGraphCreateinstancePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Description},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DisplayName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${RoleScopeTagIds},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementSettingInstance[]]
    # .
    # To construct, see NOTES section for SETTINGSDELTA properties and create a hash table.
    ${SettingsDelta},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementTemplateInstance_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementTemplateInstance_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementTemplateInstance_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementTemplateInstance_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action createInstance
.Description
Invoke action createInstance

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsPamc92DevicemanagementTemplatesDevicemanagementtemplateIdMigratabletoDevicemanagementtemplateId1MicrosoftGraphCreateinstancePostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsPamc92DevicemanagementTemplatesDevicemanagementtemplateIdMigratabletoDevicemanagementtemplateId1MicrosoftGraphCreateinstancePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Description <String>]: 
  [DisplayName <String>]: 
  [RoleScopeTagIds <String[]>]: 
  [SettingsDelta <IMicrosoftGraphDeviceManagementSettingInstance[]>]: 
    [Id <String>]: Read-only.
    [DefinitionId <String>]: The ID of the setting definition for this instance
    [ValueJson <String>]: JSON representation of the value

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

SETTINGSDELTA <IMicrosoftGraphDeviceManagementSettingInstance[]>: .
  [Id <String>]: Read-only.
  [DefinitionId <String>]: The ID of the setting definition for this instance
  [ValueJson <String>]: JSON representation of the value
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/new-mgdevicemanagementtemplatemigratabletoinstance
#>
function New-MgDeviceManagementTemplateMigratableToInstance {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntent])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementTemplate
    ${DeviceManagementTemplateId},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementTemplate
    ${DeviceManagementTemplateId1},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsPamc92DevicemanagementTemplatesDevicemanagementtemplateIdMigratabletoDevicemanagementtemplateId1MicrosoftGraphCreateinstancePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Description},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DisplayName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${RoleScopeTagIds},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementSettingInstance[]]
    # .
    # To construct, see NOTES section for SETTINGSDELTA properties and create a hash table.
    ${SettingsDelta},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Create = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementTemplateMigratableToInstance_Create';
            CreateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementTemplateMigratableToInstance_CreateExpanded';
            CreateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementTemplateMigratableToInstance_CreateViaIdentity';
            CreateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\New-MgDeviceManagementTemplateMigratableToInstance_CreateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Delete user from shared Apple device
.Description
Delete user from shared Apple device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Opz1A7DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Opz1A7DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [UserPrincipalName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/remove-mgdevicemanagementcomanageddeviceuserfromsharedappledevice
#>
function Remove-MgDeviceManagementComanagedDeviceUserFromSharedAppleDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeleteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='DeleteExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Delete', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Opz1A7DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeleteExpanded')]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeleteExpanded')]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserPrincipalName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Delete = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementComanagedDeviceUserFromSharedAppleDevice_Delete';
            DeleteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementComanagedDeviceUserFromSharedAppleDevice_DeleteExpanded';
            DeleteViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementComanagedDeviceUserFromSharedAppleDevice_DeleteViaIdentity';
            DeleteViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementComanagedDeviceUserFromSharedAppleDevice_DeleteViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Delete user from shared Apple device
.Description
Delete user from shared Apple device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1U3Hg5YDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1U3Hg5YDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [UserPrincipalName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/remove-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddeviceuserfromsharedappledevice
#>
function Remove-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeleteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='DeleteExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='DeleteExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Delete', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1U3Hg5YDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeleteExpanded')]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeleteExpanded')]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserPrincipalName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Delete = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice_Delete';
            DeleteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice_DeleteExpanded';
            DeleteViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice_DeleteViaIdentity';
            DeleteViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice_DeleteViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Delete user from shared Apple device
.Description
Delete user from shared Apple device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths3Uwt37DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths3Uwt37DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [UserPrincipalName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/remove-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddeviceuserfromsharedappledevice
#>
function Remove-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeleteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='DeleteExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='DeleteExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Delete', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths3Uwt37DevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeleteExpanded')]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeleteExpanded')]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserPrincipalName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Delete = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice_Delete';
            DeleteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice_DeleteExpanded';
            DeleteViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice_DeleteViaIdentity';
            DeleteViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceUserFromSharedAppleDevice_DeleteViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action removeLanguageFiles
.Description
Invoke action removeLanguageFiles

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsCyujbsDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphRemovelanguagefilesPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsCyujbsDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphRemovelanguagefilesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [GroupPolicyUploadedLanguageFiles <IMicrosoftGraphGroupPolicyUploadedLanguageFile[]>]: 
    [Content <Byte[]>]: The contents of the uploaded ADML file.
    [FileName <String>]: The file name of the uploaded ADML file.
    [Id <String>]: Key of the entity.
    [LanguageCode <String>]: The language code of the uploaded ADML file.
    [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.

GROUPPOLICYUPLOADEDLANGUAGEFILES <IMicrosoftGraphGroupPolicyUploadedLanguageFile[]>: .
  [Content <Byte[]>]: The contents of the uploaded ADML file.
  [FileName <String>]: The file name of the uploaded ADML file.
  [Id <String>]: Key of the entity.
  [LanguageCode <String>]: The language code of the uploaded ADML file.
  [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/remove-mgdevicemanagementgrouppolicyuploadeddefinitionfilelanguagefile
#>
function Remove-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='RemoveExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Remove', Mandatory)]
    [Parameter(ParameterSetName='RemoveExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of groupPolicyUploadedDefinitionFile
    ${GroupPolicyUploadedDefinitionFileId},

    [Parameter(ParameterSetName='RemoveViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RemoveViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Remove', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RemoveViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsCyujbsDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphRemovelanguagefilesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='RemoveExpanded')]
    [Parameter(ParameterSetName='RemoveViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='RemoveExpanded')]
    [Parameter(ParameterSetName='RemoveViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyUploadedLanguageFile[]]
    # .
    # To construct, see NOTES section for GROUPPOLICYUPLOADEDLANGUAGEFILES properties and create a hash table.
    ${GroupPolicyUploadedLanguageFiles},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Remove = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_Remove';
            RemoveExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_RemoveExpanded';
            RemoveViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_RemoveViaIdentity';
            RemoveViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_RemoveViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action remove
.Description
Invoke action remove

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/remove-mgdevicemanagementgrouppolicyuploadeddefinitionfile
#>
function Remove-MgDeviceManagementGroupPolicyUploadedDefinitionFile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Remove', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Remove', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of groupPolicyUploadedDefinitionFile
    ${GroupPolicyUploadedDefinitionFileId},

    [Parameter(ParameterSetName='RemoveViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Remove = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementGroupPolicyUploadedDefinitionFile_Remove';
            RemoveViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementGroupPolicyUploadedDefinitionFile_RemoveViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Delete user from shared Apple device
.Description
Delete user from shared Apple device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths5C9DebDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema1
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths5C9DebDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema1>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [UserPrincipalName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/remove-mgdevicemanagementmanageddeviceuserfromsharedappledevice
#>
function Remove-MgDeviceManagementManagedDeviceUserFromSharedAppleDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='DeleteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='DeleteExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Delete', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths5C9DebDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphDeleteuserfromsharedappledevicePostRequestbodyContentApplicationJsonSchema1]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='DeleteExpanded')]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='DeleteExpanded')]
    [Parameter(ParameterSetName='DeleteViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserPrincipalName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Delete = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementManagedDeviceUserFromSharedAppleDevice_Delete';
            DeleteExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementManagedDeviceUserFromSharedAppleDevice_DeleteExpanded';
            DeleteViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementManagedDeviceUserFromSharedAppleDevice_DeleteViaIdentity';
            DeleteViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Remove-MgDeviceManagementManagedDeviceUserFromSharedAppleDevice_DeleteViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action requestSignupUrl
.Description
Invoke action requestSignupUrl

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths4D3Ll5DevicemanagementAndroidforworksettingsMicrosoftGraphRequestsignupurlPostRequestbodyContentApplicationJsonSchema
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths4D3Ll5DevicemanagementAndroidforworksettingsMicrosoftGraphRequestsignupurlPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [HostName <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/request-mgdevicemanagementandroidforworksettingsignupurl
#>
function Request-MgDeviceManagementAndroidForWorkSettingSignupUrl {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='RequestExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Request', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths4D3Ll5DevicemanagementAndroidforworksettingsMicrosoftGraphRequestsignupurlPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='RequestExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='RequestExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${HostName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Request = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementAndroidForWorkSettingSignupUrl_Request';
            RequestExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementAndroidForWorkSettingSignupUrl_RequestExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action requestSignupUrl
.Description
Invoke action requestSignupUrl

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Mblqr0DevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphRequestsignupurlPostRequestbodyContentApplicationJsonSchema
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Mblqr0DevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphRequestsignupurlPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [HostName <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/request-mgdevicemanagementandroidmanagedstoreaccountenterprisesettingsignupurl
#>
function Request-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingSignupUrl {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='RequestExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Request', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Mblqr0DevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphRequestsignupurlPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='RequestExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='RequestExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${HostName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Request = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingSignupUrl_Request';
            RequestExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingSignupUrl_RequestExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Request remote assistance
.Description
Request remote assistance

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/request-mgdevicemanagementcomanageddeviceremoteassistance
#>
function Request-MgDeviceManagementComanagedDeviceRemoteAssistance {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Request', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RequestViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Request = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementComanagedDeviceRemoteAssistance_Request';
            RequestViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementComanagedDeviceRemoteAssistance_RequestViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Request remote assistance
.Description
Request remote assistance

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/request-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddeviceremoteassistance
#>
function Request-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceRemoteAssistance {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Request', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='RequestViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Request = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceRemoteAssistance_Request';
            RequestViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceRemoteAssistance_RequestViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Request remote assistance
.Description
Request remote assistance

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/request-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddeviceremoteassistance
#>
function Request-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceRemoteAssistance {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Request', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='RequestViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Request = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceRemoteAssistance_Request';
            RequestViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceRemoteAssistance_RequestViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Request remote assistance
.Description
Request remote assistance

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/request-mgdevicemanagementmanageddeviceremoteassistance
#>
function Request-MgDeviceManagementManagedDeviceRemoteAssistance {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Request', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RequestViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Request = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementManagedDeviceRemoteAssistance_Request';
            RequestViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementManagedDeviceRemoteAssistance_RequestViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action requestUpgrade
.Description
Invoke action requestUpgrade

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/request-mgdevicemanagementmicrosofttunnelsiteupgrade
#>
function Request-MgDeviceManagementMicrosoftTunnelSiteUpgrade {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Request', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of microsoftTunnelSite
    ${MicrosoftTunnelSiteId},

    [Parameter(ParameterSetName='RequestViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Request = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementMicrosoftTunnelSiteUpgrade_Request';
            RequestViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementMicrosoftTunnelSiteUpgrade_RequestViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Request remote assistance
.Description
Request remote assistance

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/request-mgdevicemanagementscriptdevicerunstatemanageddeviceremoteassistance
#>
function Request-MgDeviceManagementScriptDeviceRunStateManagedDeviceRemoteAssistance {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Request', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Request', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='RequestViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Request = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementScriptDeviceRunStateManagedDeviceRemoteAssistance_Request';
            RequestViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Request-MgDeviceManagementScriptDeviceRunStateManagedDeviceRemoteAssistance_RequestViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reset passcode
.Description
Reset passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/reset-mgdevicemanagementcomanageddevicepasscode
#>
function Reset-MgDeviceManagementComanagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reset', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ResetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reset = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementComanagedDevicePasscode_Reset';
            ResetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementComanagedDevicePasscode_ResetViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reset passcode
.Description
Reset passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/reset-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevicepasscode
#>
function Reset-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reset', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='ResetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reset = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevicePasscode_Reset';
            ResetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevicePasscode_ResetViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reset passcode
.Description
Reset passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/reset-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicepasscode
#>
function Reset-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reset', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='ResetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reset = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevicePasscode_Reset';
            ResetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevicePasscode_ResetViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reset passcode
.Description
Reset passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/reset-mgdevicemanagementmanageddevicepasscode
#>
function Reset-MgDeviceManagementManagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reset', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ResetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reset = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementManagedDevicePasscode_Reset';
            ResetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementManagedDevicePasscode_ResetViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reset passcode
.Description
Reset passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/reset-mgdevicemanagementscriptdevicerunstatemanageddevicepasscode
#>
function Reset-MgDeviceManagementScriptDeviceRunStateManagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reset', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='ResetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reset = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementScriptDeviceRunStateManagedDevicePasscode_Reset';
            ResetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Reset-MgDeviceManagementScriptDeviceRunStateManagedDevicePasscode_ResetViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action resizeCloudPc
.Description
Invoke action resizeCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Wn58V5DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Wn58V5DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TargetServicePlanId <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/resize-mgdevicemanagementcomanageddevicecloudpc
#>
function Resize-MgDeviceManagementComanagedDeviceCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ResizeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Resize', Mandatory)]
    [Parameter(ParameterSetName='ResizeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Resize', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Wn58V5DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${TargetServicePlanId},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Resize = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementComanagedDeviceCloudPc_Resize';
            ResizeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementComanagedDeviceCloudPc_ResizeExpanded';
            ResizeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementComanagedDeviceCloudPc_ResizeViaIdentity';
            ResizeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementComanagedDeviceCloudPc_ResizeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action resizeCloudPc
.Description
Invoke action resizeCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsQ2DhylDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsQ2DhylDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TargetServicePlanId <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/resize-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevicecloudpc
#>
function Resize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ResizeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Resize', Mandatory)]
    [Parameter(ParameterSetName='ResizeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Resize', Mandatory)]
    [Parameter(ParameterSetName='ResizeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Resize', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsQ2DhylDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${TargetServicePlanId},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Resize = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceCloudPc_Resize';
            ResizeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceCloudPc_ResizeExpanded';
            ResizeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceCloudPc_ResizeViaIdentity';
            ResizeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceCloudPc_ResizeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action resizeCloudPc
.Description
Invoke action resizeCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths18Td8LeDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths18Td8LeDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TargetServicePlanId <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/resize-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicecloudpc
#>
function Resize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ResizeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Resize', Mandatory)]
    [Parameter(ParameterSetName='ResizeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Resize', Mandatory)]
    [Parameter(ParameterSetName='ResizeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Resize', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths18Td8LeDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${TargetServicePlanId},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Resize = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceCloudPc_Resize';
            ResizeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceCloudPc_ResizeExpanded';
            ResizeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceCloudPc_ResizeViaIdentity';
            ResizeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceCloudPc_ResizeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action resizeCloudPc
.Description
Invoke action resizeCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Xt2Z82DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Xt2Z82DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TargetServicePlanId <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/resize-mgdevicemanagementmanageddevicecloudpc
#>
function Resize-MgDeviceManagementManagedDeviceCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ResizeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Resize', Mandatory)]
    [Parameter(ParameterSetName='ResizeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Resize', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Xt2Z82DevicemanagementManageddevicesManageddeviceIdMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${TargetServicePlanId},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Resize = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementManagedDeviceCloudPc_Resize';
            ResizeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementManagedDeviceCloudPc_ResizeExpanded';
            ResizeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementManagedDeviceCloudPc_ResizeViaIdentity';
            ResizeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementManagedDeviceCloudPc_ResizeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action resizeCloudPc
.Description
Invoke action resizeCloudPc

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths5Z68LrDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths5Z68LrDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [TargetServicePlanId <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/resize-mgdevicemanagementscriptdevicerunstatemanageddevicecloudpc
#>
function Resize-MgDeviceManagementScriptDeviceRunStateManagedDeviceCloudPc {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ResizeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Resize', Mandatory)]
    [Parameter(ParameterSetName='ResizeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Resize', Mandatory)]
    [Parameter(ParameterSetName='ResizeExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Resize', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths5Z68LrDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphResizecloudpcPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ResizeExpanded')]
    [Parameter(ParameterSetName='ResizeViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${TargetServicePlanId},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Resize = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementScriptDeviceRunStateManagedDeviceCloudPc_Resize';
            ResizeExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementScriptDeviceRunStateManagedDeviceCloudPc_ResizeExpanded';
            ResizeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementScriptDeviceRunStateManagedDeviceCloudPc_ResizeViaIdentity';
            ResizeViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Resize-MgDeviceManagementScriptDeviceRunStateManagedDeviceCloudPc_ResizeViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reboot device
.Description
Reboot device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restart-mgdevicemanagementcomanageddevicenow
#>
function Restart-MgDeviceManagementComanagedDeviceNow {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reboot', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reboot', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RebootViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reboot = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementComanagedDeviceNow_Reboot';
            RebootViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementComanagedDeviceNow_RebootViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reboot device
.Description
Reboot device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restart-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevicenow
#>
function Restart-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceNow {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reboot', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reboot', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Reboot', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='RebootViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reboot = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceNow_Reboot';
            RebootViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceNow_RebootViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reboot device
.Description
Reboot device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restart-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicenow
#>
function Restart-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceNow {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reboot', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reboot', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Reboot', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='RebootViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reboot = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceNow_Reboot';
            RebootViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceNow_RebootViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reboot device
.Description
Reboot device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restart-mgdevicemanagementmanageddevicenow
#>
function Restart-MgDeviceManagementManagedDeviceNow {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reboot', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reboot', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RebootViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reboot = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementManagedDeviceNow_Reboot';
            RebootViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementManagedDeviceNow_RebootViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reboot device
.Description
Reboot device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restart-mgdevicemanagementscriptdevicerunstatemanageddevicenow
#>
function Restart-MgDeviceManagementScriptDeviceRunStateManagedDeviceNow {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Reboot', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Reboot', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Reboot', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='RebootViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Reboot = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementScriptDeviceRunStateManagedDeviceNow_Reboot';
            RebootViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restart-MgDeviceManagementScriptDeviceRunStateManagedDeviceNow_RebootViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Recover passcode
.Description
Recover passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restore-mgdevicemanagementcomanageddevicepasscode
#>
function Restore-MgDeviceManagementComanagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Recover', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Recover', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RecoverViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Recover = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementComanagedDevicePasscode_Recover';
            RecoverViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementComanagedDevicePasscode_RecoverViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Recover passcode
.Description
Recover passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restore-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevicepasscode
#>
function Restore-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Recover', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Recover', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Recover', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='RecoverViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Recover = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevicePasscode_Recover';
            RecoverViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevicePasscode_RecoverViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Recover passcode
.Description
Recover passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restore-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicepasscode
#>
function Restore-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Recover', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Recover', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Recover', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='RecoverViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Recover = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevicePasscode_Recover';
            RecoverViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevicePasscode_RecoverViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Recover passcode
.Description
Recover passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restore-mgdevicemanagementmanageddevicepasscode
#>
function Restore-MgDeviceManagementManagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Recover', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Recover', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RecoverViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Recover = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementManagedDevicePasscode_Recover';
            RecoverViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementManagedDevicePasscode_RecoverViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Recover passcode
.Description
Recover passcode

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/restore-mgdevicemanagementscriptdevicerunstatemanageddevicepasscode
#>
function Restore-MgDeviceManagementScriptDeviceRunStateManagedDevicePasscode {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Recover', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Recover', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Recover', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='RecoverViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Recover = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementScriptDeviceRunStateManagedDevicePasscode_Recover';
            RecoverViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Restore-MgDeviceManagementScriptDeviceRunStateManagedDevicePasscode_RecoverViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action revokeToken
.Description
Invoke action revokeToken

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/revoke-mgdevicemanagementandroiddeviceownerenrollmentprofiletoken
#>
function Revoke-MgDeviceManagementAndroidDeviceOwnerEnrollmentProfileToken {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Revoke', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of androidDeviceOwnerEnrollmentProfile
    ${AndroidDeviceOwnerEnrollmentProfileId},

    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Revoke = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementAndroidDeviceOwnerEnrollmentProfileToken_Revoke';
            RevokeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementAndroidDeviceOwnerEnrollmentProfileToken_RevokeViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action revokeToken
.Description
Invoke action revokeToken

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/revoke-mgdevicemanagementandroidforworkenrollmentprofiletoken
#>
function Revoke-MgDeviceManagementAndroidForWorkEnrollmentProfileToken {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Revoke', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of androidForWorkEnrollmentProfile
    ${AndroidForWorkEnrollmentProfileId},

    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Revoke = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementAndroidForWorkEnrollmentProfileToken_Revoke';
            RevokeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementAndroidForWorkEnrollmentProfileToken_RevokeViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Revoke all Apple Vpp licenses for a device
.Description
Revoke all Apple Vpp licenses for a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/revoke-mgdevicemanagementcomanageddeviceapplevpplicense
#>
function Revoke-MgDeviceManagementComanagedDeviceAppleVppLicense {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Revoke', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Revoke = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementComanagedDeviceAppleVppLicense_Revoke';
            RevokeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementComanagedDeviceAppleVppLicense_RevokeViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Revoke all Apple Vpp licenses for a device
.Description
Revoke all Apple Vpp licenses for a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/revoke-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddeviceapplevpplicense
#>
function Revoke-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceAppleVppLicense {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Revoke', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Revoke = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceAppleVppLicense_Revoke';
            RevokeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceAppleVppLicense_RevokeViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Revoke all Apple Vpp licenses for a device
.Description
Revoke all Apple Vpp licenses for a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/revoke-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddeviceapplevpplicense
#>
function Revoke-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceAppleVppLicense {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Revoke', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Revoke = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceAppleVppLicense_Revoke';
            RevokeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceAppleVppLicense_RevokeViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Revoke all Apple Vpp licenses for a device
.Description
Revoke all Apple Vpp licenses for a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/revoke-mgdevicemanagementmanageddeviceapplevpplicense
#>
function Revoke-MgDeviceManagementManagedDeviceAppleVppLicense {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Revoke', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Revoke = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementManagedDeviceAppleVppLicense_Revoke';
            RevokeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementManagedDeviceAppleVppLicense_RevokeViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Revoke all Apple Vpp licenses for a device
.Description
Revoke all Apple Vpp licenses for a device

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/revoke-mgdevicemanagementscriptdevicerunstatemanageddeviceapplevpplicense
#>
function Revoke-MgDeviceManagementScriptDeviceRunStateManagedDeviceAppleVppLicense {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Revoke', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Revoke = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementScriptDeviceRunStateManagedDeviceAppleVppLicense_Revoke';
            RevokeViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Revoke-MgDeviceManagementScriptDeviceRunStateManagedDeviceAppleVppLicense_RevokeViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action searchExistingIdentities
.Description
Invoke action searchExistingIdentities

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsHi19O6DevicemanagementImporteddeviceidentitiesMicrosoftGraphSearchexistingidentitiesPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedDeviceIdentity
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsHi19O6DevicemanagementImporteddeviceidentitiesMicrosoftGraphSearchexistingidentitiesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ImportedDeviceIdentities <IMicrosoftGraphImportedDeviceIdentity[]>]: 
    [Id <String>]: Read-only.
    [CreatedDateTime <DateTime?>]: Created Date Time of the device
    [Description <String>]: The description of the device
    [EnrollmentState <String>]: enrollmentState
    [ImportedDeviceIdentifier <String>]: Imported Device Identifier
    [ImportedDeviceIdentityType <String>]: importedDeviceIdentityType
    [LastContactedDateTime <DateTime?>]: Last Contacted Date Time of the device
    [LastModifiedDateTime <DateTime?>]: Last Modified DateTime of the description
    [Platform <String>]: platform

IMPORTEDDEVICEIDENTITIES <IMicrosoftGraphImportedDeviceIdentity[]>: .
  [Id <String>]: Read-only.
  [CreatedDateTime <DateTime?>]: Created Date Time of the device
  [Description <String>]: The description of the device
  [EnrollmentState <String>]: enrollmentState
  [ImportedDeviceIdentifier <String>]: Imported Device Identifier
  [ImportedDeviceIdentityType <String>]: importedDeviceIdentityType
  [LastContactedDateTime <DateTime?>]: Last Contacted Date Time of the device
  [LastModifiedDateTime <DateTime?>]: Last Modified DateTime of the description
  [Platform <String>]: platform
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/search-mgdevicemanagementimporteddeviceidentityexistingidentity
#>
function Search-MgDeviceManagementImportedDeviceIdentityExistingIdentity {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedDeviceIdentity])]
[CmdletBinding(DefaultParameterSetName='SearchExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Search', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsHi19O6DevicemanagementImporteddeviceidentitiesMicrosoftGraphSearchexistingidentitiesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SearchExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SearchExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphImportedDeviceIdentity[]]
    # .
    # To construct, see NOTES section for IMPORTEDDEVICEIDENTITIES properties and create a hash table.
    ${ImportedDeviceIdentities},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Search = 'Microsoft.Graph.DeviceManagement.Actions.private\Search-MgDeviceManagementImportedDeviceIdentityExistingIdentity_Search';
            SearchExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Search-MgDeviceManagementImportedDeviceIdentityExistingIdentity_SearchExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action sendCustomNotificationToCompanyPortal
.Description
Invoke action sendCustomNotificationToCompanyPortal

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsJu0QzrDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsJu0QzrDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [NotificationBody <String>]: 
  [NotificationTitle <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/send-mgdevicemanagementcomanageddevicecustomnotificationtocompanyportal
#>
function Send-MgDeviceManagementComanagedDeviceCustomNotificationToCompanyPortal {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SendExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Send', Mandatory)]
    [Parameter(ParameterSetName='SendExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='SendViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SendViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Send', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SendViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsJu0QzrDevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SendExpanded')]
    [Parameter(ParameterSetName='SendViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SendExpanded')]
    [Parameter(ParameterSetName='SendViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationBody},

    [Parameter(ParameterSetName='SendExpanded')]
    [Parameter(ParameterSetName='SendViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationTitle},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Send = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementComanagedDeviceCustomNotificationToCompanyPortal_Send';
            SendExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementComanagedDeviceCustomNotificationToCompanyPortal_SendExpanded';
            SendViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementComanagedDeviceCustomNotificationToCompanyPortal_SendViaIdentity';
            SendViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementComanagedDeviceCustomNotificationToCompanyPortal_SendViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action sendCustomNotificationToCompanyPortal
.Description
Invoke action sendCustomNotificationToCompanyPortal

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1RrfeupDevicemanagementMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1RrfeupDevicemanagementMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [GroupsToNotify <String[]>]: 
  [NotificationBody <String>]: 
  [NotificationTitle <String>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/send-mgdevicemanagementcustomnotificationtocompanyportal
#>
function Send-MgDeviceManagementCustomNotificationToCompanyPortal {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SendExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Send', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1RrfeupDevicemanagementMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SendExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SendExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${GroupsToNotify},

    [Parameter(ParameterSetName='SendExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationBody},

    [Parameter(ParameterSetName='SendExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationTitle},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Send = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementCustomNotificationToCompanyPortal_Send';
            SendExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementCustomNotificationToCompanyPortal_SendExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action sendCustomNotificationToCompanyPortal
.Description
Invoke action sendCustomNotificationToCompanyPortal

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1R4OrraDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1R4OrraDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [NotificationBody <String>]: 
  [NotificationTitle <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/send-mgdevicemanagementmanageddevicecustomnotificationtocompanyportal
#>
function Send-MgDeviceManagementManagedDeviceCustomNotificationToCompanyPortal {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SendExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Send', Mandatory)]
    [Parameter(ParameterSetName='SendExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='SendViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SendViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Send', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SendViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1R4OrraDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphSendcustomnotificationtocompanyportalPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SendExpanded')]
    [Parameter(ParameterSetName='SendViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SendExpanded')]
    [Parameter(ParameterSetName='SendViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationBody},

    [Parameter(ParameterSetName='SendExpanded')]
    [Parameter(ParameterSetName='SendViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${NotificationTitle},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Send = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementManagedDeviceCustomNotificationToCompanyPortal_Send';
            SendExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementManagedDeviceCustomNotificationToCompanyPortal_SendExpanded';
            SendViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementManagedDeviceCustomNotificationToCompanyPortal_SendViaIdentity';
            SendViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementManagedDeviceCustomNotificationToCompanyPortal_SendViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Sends test message using the specified notificationMessageTemplate in the default locale
.Description
Sends test message using the specified notificationMessageTemplate in the default locale

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/send-mgdevicemanagementnotificationmessagetemplatetestmessage
#>
function Send-MgDeviceManagementNotificationMessageTemplateTestMessage {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Send', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Send', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of notificationMessageTemplate
    ${NotificationMessageTemplateId},

    [Parameter(ParameterSetName='SendViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Send = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementNotificationMessageTemplateTestMessage_Send';
            SendViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Send-MgDeviceManagementNotificationMessageTemplateTestMessage_SendViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Sets the AndroidManagedStoreAccountEnterpriseSettings AndroidDeviceOwnerFullyManagedEnrollmentEnabled to the given value.
.Description
Sets the AndroidManagedStoreAccountEnterpriseSettings AndroidDeviceOwnerFullyManagedEnrollmentEnabled to the given value.

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Wtan1TDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphSetandroiddeviceownerfullymanagedenrollmentstatePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Wtan1TDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphSetandroiddeviceownerfullymanagedenrollmentstatePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Enabled <Boolean?>]: 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementandroidmanagedstoreaccountenterprisesettingandroiddeviceownerfullymanagedenrollmentstate
#>
function Set-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingAndroidDeviceOwnerFullyManagedEnrollmentState {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Wtan1TDevicemanagementAndroidmanagedstoreaccountenterprisesettingsMicrosoftGraphSetandroiddeviceownerfullymanagedenrollmentstatePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${Enabled},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingAndroidDeviceOwnerFullyManagedEnrollmentState_Set';
            SetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingAndroidDeviceOwnerFullyManagedEnrollmentState_SetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action setPriority
.Description
Invoke action setPriority

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsW7QdckDevicemanagementAppleuserinitiatedenrollmentprofilesAppleuserinitiatedenrollmentprofileIdMicrosoftGraphSetpriorityPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsW7QdckDevicemanagementAppleuserinitiatedenrollmentprofilesAppleuserinitiatedenrollmentprofileIdMicrosoftGraphSetpriorityPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Priority <Int32?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementappleuserinitiatedenrollmentprofilepriority
#>
function Set-MgDeviceManagementAppleUserInitiatedEnrollmentProfilePriority {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of appleUserInitiatedEnrollmentProfile
    ${AppleUserInitiatedEnrollmentProfileId},

    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsW7QdckDevicemanagementAppleuserinitiatedenrollmentprofilesAppleuserinitiatedenrollmentprofileIdMicrosoftGraphSetpriorityPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Priority},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementAppleUserInitiatedEnrollmentProfilePriority_Set';
            SetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementAppleUserInitiatedEnrollmentProfilePriority_SetExpanded';
            SetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementAppleUserInitiatedEnrollmentProfilePriority_SetViaIdentity';
            SetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementAppleUserInitiatedEnrollmentProfilePriority_SetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Set device name of the device.
.Description
Set device name of the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsCjyki9DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsCjyki9DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementcomanageddevicename
#>
function Set-MgDeviceManagementComanagedDeviceName {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsCjyki9DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeviceName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementComanagedDeviceName_Set';
            SetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementComanagedDeviceName_SetExpanded';
            SetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementComanagedDeviceName_SetViaIdentity';
            SetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementComanagedDeviceName_SetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsI6E5RhDevicemanagementConfigurationpoliciesDevicemanagementconfigurationpolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementConfigurationPolicyAssignment
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphDeviceManagementConfigurationPolicyAssignment[]>: .
  [Id <String>]: Read-only.
  [Source <String>]: Represents source of assignment.
  [SourceId <String>]: The identifier of the source of the assignment.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPathsI6E5RhDevicemanagementConfigurationpoliciesDevicemanagementconfigurationpolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphDeviceManagementConfigurationPolicyAssignment[]>]: 
    [Id <String>]: Read-only.
    [Source <String>]: Represents source of assignment.
    [SourceId <String>]: The identifier of the source of the assignment.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementconfigurationpolicy
#>
function Set-MgDeviceManagementConfigurationPolicy {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementConfigurationPolicyAssignment])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementConfigurationPolicy
    ${DeviceManagementConfigurationPolicyId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsI6E5RhDevicemanagementConfigurationpoliciesDevicemanagementconfigurationpolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementConfigurationPolicyAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementConfigurationPolicy_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementConfigurationPolicy_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementConfigurationPolicy_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementConfigurationPolicy_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action setDefaultProfile
.Description
Invoke action setDefaultProfile

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdeponboardingsettingenrollmentprofiledefaultprofile
#>
function Set-MgDeviceManagementDepOnboardingSettingEnrollmentProfileDefaultProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Set', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of depOnboardingSetting
    ${DepOnboardingSettingId},

    [Parameter(ParameterSetName='Set', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of enrollmentProfile
    ${EnrollmentProfileId},

    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDepOnboardingSettingEnrollmentProfileDefaultProfile_Set';
            SetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDepOnboardingSettingEnrollmentProfileDefaultProfile_SetViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action setScheduledRetireState
.Description
Invoke action setScheduledRetireState

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsZtf0R2DevicemanagementDevicecompliancepoliciesMicrosoftGraphSetscheduledretirestatePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsZtf0R2DevicemanagementDevicecompliancepoliciesMicrosoftGraphSetscheduledretirestatePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ManagedDeviceIds <String[]>]: 
  [State <String>]: Cancel or confirm scheduled retire 
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdevicecompliancepolicyscheduledretirestate
#>
function Set-MgDeviceManagementDeviceCompliancePolicyScheduledRetireState {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsZtf0R2DevicemanagementDevicecompliancepoliciesMicrosoftGraphSetscheduledretirestatePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${ManagedDeviceIds},

    [Parameter(ParameterSetName='SetExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # Cancel or confirm scheduled retire
    ${State},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCompliancePolicyScheduledRetireState_Set';
            SetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCompliancePolicyScheduledRetireState_SetExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsYydoy0DevicemanagementDevicecompliancepoliciesDevicecompliancepolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceCompliancePolicyAssignment1
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphDeviceCompliancePolicyAssignment1[]>: .
  [Id <String>]: Read-only.
  [Source <String>]: Represents source of assignment.
  [SourceId <String>]: The identifier of the source of the assignment.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPathsYydoy0DevicemanagementDevicecompliancepoliciesDevicecompliancepolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphDeviceCompliancePolicyAssignment1[]>]: 
    [Id <String>]: Read-only.
    [Source <String>]: Represents source of assignment.
    [SourceId <String>]: The identifier of the source of the assignment.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdevicecompliancepolicy
#>
function Set-MgDeviceManagementDeviceCompliancePolicy {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceCompliancePolicyAssignment1])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign1', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded1', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceCompliancePolicy
    ${DeviceCompliancePolicyId},

    [Parameter(ParameterSetName='AssignViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsYydoy0DevicemanagementDevicecompliancepoliciesDevicecompliancepolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded1')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded1')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceCompliancePolicyAssignment1[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCompliancePolicy_Assign1';
            AssignExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCompliancePolicy_AssignExpanded1';
            AssignViaIdentity1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCompliancePolicy_AssignViaIdentity1';
            AssignViaIdentityExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCompliancePolicy_AssignViaIdentityExpanded1';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsQg6Va1DevicemanagementDevicecompliancescriptsDevicecompliancescriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsQg6Va1DevicemanagementDevicecompliancescriptsDevicecompliancescriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceHealthScriptAssignments <IMicrosoftGraphDeviceHealthScriptAssignment[]>]: 
    [Id <String>]: Read-only.
    [RunRemediationScript <Boolean?>]: Determine whether we want to run detection script only or run both detection script and remediation script
    [RunSchedule <IMicrosoftGraphDeviceHealthScriptRunSchedule>]: Base type of Device health script run schedule.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Interval <Int32?>]: The x value of every x hours for hourly schedule, every x days for Daily Schedule, every x weeks for weekly schedule, every x months for Monthly Schedule. Valid values 1 to 23
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

DEVICEHEALTHSCRIPTASSIGNMENTS <IMicrosoftGraphDeviceHealthScriptAssignment[]>: .
  [Id <String>]: Read-only.
  [RunRemediationScript <Boolean?>]: Determine whether we want to run detection script only or run both detection script and remediation script
  [RunSchedule <IMicrosoftGraphDeviceHealthScriptRunSchedule>]: Base type of Device health script run schedule.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Interval <Int32?>]: The x value of every x hours for hourly schedule, every x days for Daily Schedule, every x weeks for weekly schedule, every x months for Monthly Schedule. Valid values 1 to 23
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdevicecompliancescript
#>
function Set-MgDeviceManagementDeviceComplianceScript {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceComplianceScript
    ${DeviceComplianceScriptId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsQg6Va1DevicemanagementDevicecompliancescriptsDevicecompliancescriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceHealthScriptAssignment[]]
    # .
    # To construct, see NOTES section for DEVICEHEALTHSCRIPTASSIGNMENTS properties and create a hash table.
    ${DeviceHealthScriptAssignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceComplianceScript_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceComplianceScript_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceComplianceScript_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceComplianceScript_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths35Cy05DevicemanagementDeviceconfigurationsDeviceconfigurationIdGroupassignmentsDeviceconfigurationgroupassignmentIdDeviceconfigurationMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationAssignment1
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphDeviceConfigurationAssignment1[]>: .
  [Id <String>]: Read-only.
  [Source <String>]: Represents source of assignment.
  [SourceId <String>]: The identifier of the source of the assignment. This property is read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPaths35Cy05DevicemanagementDeviceconfigurationsDeviceconfigurationIdGroupassignmentsDeviceconfigurationgroupassignmentIdDeviceconfigurationMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphDeviceConfigurationAssignment1[]>]: 
    [Id <String>]: Read-only.
    [Source <String>]: Represents source of assignment.
    [SourceId <String>]: The identifier of the source of the assignment. This property is read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.
  [DeviceConfigurationGroupAssignments <IMicrosoftGraphDeviceConfigurationGroupAssignment[]>]: 
    [Id <String>]: Read-only.
    [DeviceConfiguration <IMicrosoftGraphDeviceConfiguration>]: Device Configuration.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [Assignments <IMicrosoftGraphDeviceConfigurationAssignment1[]>]: The list of assignments for the device configuration profile.
      [CreatedDateTime <DateTime?>]: DateTime the object was created.
      [Description <String>]: Admin provided description of the Device Configuration.
      [DeviceManagementApplicabilityRuleDeviceMode <IMicrosoftGraphDeviceManagementApplicabilityRuleDeviceMode>]: deviceManagementApplicabilityRuleDeviceMode
        [(Any) <Object>]: This indicates any property can be added to this object.
        [DeviceMode <String>]: Windows 10 Device Mode type.
        [Name <String>]: Name for object.
        [RuleType <String>]: Supported Applicability rule types for Device Configuration
      [DeviceManagementApplicabilityRuleOSEdition <IMicrosoftGraphDeviceManagementApplicabilityRuleOSEdition>]: deviceManagementApplicabilityRuleOsEdition
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Name <String>]: Name for object.
        [OSEditionTypes <String[]>]: Applicability rule OS edition type.
        [RuleType <String>]: Supported Applicability rule types for Device Configuration
      [DeviceManagementApplicabilityRuleOSVersion <IMicrosoftGraphDeviceManagementApplicabilityRuleOSVersion>]: deviceManagementApplicabilityRuleOsVersion
        [(Any) <Object>]: This indicates any property can be added to this object.
        [MaxOSVersion <String>]: Max OS version for Applicability Rule.
        [MinOSVersion <String>]: Min OS version for Applicability Rule.
        [Name <String>]: Name for object.
        [RuleType <String>]: Supported Applicability rule types for Device Configuration
      [DeviceSettingStateSummaries <IMicrosoftGraphSettingStateDeviceSummary[]>]: Device Configuration Setting State Device Summary
        [Id <String>]: Read-only.
        [CompliantDeviceCount <Int32?>]: Device Compliant count for the setting
        [ConflictDeviceCount <Int32?>]: Device conflict error count for the setting
        [ErrorDeviceCount <Int32?>]: Device error count for the setting
        [InstancePath <String>]: Name of the InstancePath for the setting
        [NonCompliantDeviceCount <Int32?>]: Device NonCompliant count for the setting
        [NotApplicableDeviceCount <Int32?>]: Device Not Applicable count for the setting
        [RemediatedDeviceCount <Int32?>]: Device Compliant count for the setting
        [SettingName <String>]: Name of the setting
        [UnknownDeviceCount <Int32?>]: Device Unkown count for the setting
      [DeviceStatusOverview <IMicrosoftGraphDeviceConfigurationDeviceOverview>]: deviceConfigurationDeviceOverview
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Id <String>]: Read-only.
        [ConfigurationVersion <Int32?>]: Version of the policy for that overview
        [ConflictCount <Int32?>]: Number of devices in conflict
        [ErrorCount <Int32?>]: Number of error devices
        [FailedCount <Int32?>]: Number of failed devices
        [LastUpdateDateTime <DateTime?>]: Last update time
        [NotApplicableCount <Int32?>]: Number of not applicable devices
        [NotApplicablePlatformCount <Int32?>]: Number of not applicable devices due to mismatch platform and policy
        [PendingCount <Int32?>]: Number of pending devices
        [SuccessCount <Int32?>]: Number of succeeded devices
      [DeviceStatuses <IMicrosoftGraphDeviceConfigurationDeviceStatus[]>]: Device configuration installation status by device.
        [Id <String>]: Read-only.
        [ComplianceGracePeriodExpirationDateTime <DateTime?>]: The DateTime when device compliance grace period expires
        [DeviceDisplayName <String>]: Device name of the DevicePolicyStatus.
        [DeviceModel <String>]: The device model that is being reported
        [LastReportedDateTime <DateTime?>]: Last modified date time of the policy report.
        [Platform <Int32?>]: Platform of the device that is being reported
        [Status <String>]: complianceStatus
        [UserName <String>]: The User Name that is being reported
        [UserPrincipalName <String>]: UserPrincipalName.
      [DisplayName <String>]: Admin provided name of the device configuration.
      [GroupAssignments <IMicrosoftGraphDeviceConfigurationGroupAssignment[]>]: The list of group assignments for the device configuration profile.
      [LastModifiedDateTime <DateTime?>]: DateTime the object was last modified.
      [RoleScopeTagIds <String[]>]: List of Scope Tags for this Entity instance.
      [SupportsScopeTags <Boolean?>]: Indicates whether or not the underlying Device Configuration supports the assignment of scope tags. Assigning to the ScopeTags property is not allowed when this value is false and entities will not be visible to scoped users. This occurs for Legacy policies created in Silverlight and can be resolved by deleting and recreating the policy in the Azure Portal. This property is read-only.
      [UserStatusOverview <IMicrosoftGraphDeviceConfigurationUserOverview>]: deviceConfigurationUserOverview
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Id <String>]: Read-only.
        [ConfigurationVersion <Int32?>]: Version of the policy for that overview
        [ConflictCount <Int32?>]: Number of users in conflict
        [ErrorCount <Int32?>]: Number of error Users
        [FailedCount <Int32?>]: Number of failed Users
        [LastUpdateDateTime <DateTime?>]: Last update time
        [NotApplicableCount <Int32?>]: Number of not applicable users
        [PendingCount <Int32?>]: Number of pending Users
        [SuccessCount <Int32?>]: Number of succeeded Users
      [UserStatuses <IMicrosoftGraphDeviceConfigurationUserStatus[]>]: Device configuration installation status by user.
        [Id <String>]: Read-only.
        [DevicesCount <Int32?>]: Devices count for that user.
        [LastReportedDateTime <DateTime?>]: Last modified date time of the policy report.
        [Status <String>]: complianceStatus
        [UserDisplayName <String>]: User name of the DevicePolicyStatus.
        [UserPrincipalName <String>]: UserPrincipalName.
      [Version <Int32?>]: Version of the device configuration.
    [ExcludeGroup <Boolean?>]: Indicates if this group is should be excluded. Defaults that the group should be included
    [TargetGroupId <String>]: The Id of the AAD group we are targeting the device configuration to.

DEVICECONFIGURATIONGROUPASSIGNMENTS <IMicrosoftGraphDeviceConfigurationGroupAssignment[]>: .
  [Id <String>]: Read-only.
  [DeviceConfiguration <IMicrosoftGraphDeviceConfiguration>]: Device Configuration.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Id <String>]: Read-only.
    [Assignments <IMicrosoftGraphDeviceConfigurationAssignment1[]>]: The list of assignments for the device configuration profile.
      [Id <String>]: Read-only.
      [Source <String>]: Represents source of assignment.
      [SourceId <String>]: The identifier of the source of the assignment. This property is read-only.
      [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
        [(Any) <Object>]: This indicates any property can be added to this object.
        [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
        [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.
    [CreatedDateTime <DateTime?>]: DateTime the object was created.
    [Description <String>]: Admin provided description of the Device Configuration.
    [DeviceManagementApplicabilityRuleDeviceMode <IMicrosoftGraphDeviceManagementApplicabilityRuleDeviceMode>]: deviceManagementApplicabilityRuleDeviceMode
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceMode <String>]: Windows 10 Device Mode type.
      [Name <String>]: Name for object.
      [RuleType <String>]: Supported Applicability rule types for Device Configuration
    [DeviceManagementApplicabilityRuleOSEdition <IMicrosoftGraphDeviceManagementApplicabilityRuleOSEdition>]: deviceManagementApplicabilityRuleOsEdition
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Name <String>]: Name for object.
      [OSEditionTypes <String[]>]: Applicability rule OS edition type.
      [RuleType <String>]: Supported Applicability rule types for Device Configuration
    [DeviceManagementApplicabilityRuleOSVersion <IMicrosoftGraphDeviceManagementApplicabilityRuleOSVersion>]: deviceManagementApplicabilityRuleOsVersion
      [(Any) <Object>]: This indicates any property can be added to this object.
      [MaxOSVersion <String>]: Max OS version for Applicability Rule.
      [MinOSVersion <String>]: Min OS version for Applicability Rule.
      [Name <String>]: Name for object.
      [RuleType <String>]: Supported Applicability rule types for Device Configuration
    [DeviceSettingStateSummaries <IMicrosoftGraphSettingStateDeviceSummary[]>]: Device Configuration Setting State Device Summary
      [Id <String>]: Read-only.
      [CompliantDeviceCount <Int32?>]: Device Compliant count for the setting
      [ConflictDeviceCount <Int32?>]: Device conflict error count for the setting
      [ErrorDeviceCount <Int32?>]: Device error count for the setting
      [InstancePath <String>]: Name of the InstancePath for the setting
      [NonCompliantDeviceCount <Int32?>]: Device NonCompliant count for the setting
      [NotApplicableDeviceCount <Int32?>]: Device Not Applicable count for the setting
      [RemediatedDeviceCount <Int32?>]: Device Compliant count for the setting
      [SettingName <String>]: Name of the setting
      [UnknownDeviceCount <Int32?>]: Device Unkown count for the setting
    [DeviceStatusOverview <IMicrosoftGraphDeviceConfigurationDeviceOverview>]: deviceConfigurationDeviceOverview
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [ConfigurationVersion <Int32?>]: Version of the policy for that overview
      [ConflictCount <Int32?>]: Number of devices in conflict
      [ErrorCount <Int32?>]: Number of error devices
      [FailedCount <Int32?>]: Number of failed devices
      [LastUpdateDateTime <DateTime?>]: Last update time
      [NotApplicableCount <Int32?>]: Number of not applicable devices
      [NotApplicablePlatformCount <Int32?>]: Number of not applicable devices due to mismatch platform and policy
      [PendingCount <Int32?>]: Number of pending devices
      [SuccessCount <Int32?>]: Number of succeeded devices
    [DeviceStatuses <IMicrosoftGraphDeviceConfigurationDeviceStatus[]>]: Device configuration installation status by device.
      [Id <String>]: Read-only.
      [ComplianceGracePeriodExpirationDateTime <DateTime?>]: The DateTime when device compliance grace period expires
      [DeviceDisplayName <String>]: Device name of the DevicePolicyStatus.
      [DeviceModel <String>]: The device model that is being reported
      [LastReportedDateTime <DateTime?>]: Last modified date time of the policy report.
      [Platform <Int32?>]: Platform of the device that is being reported
      [Status <String>]: complianceStatus
      [UserName <String>]: The User Name that is being reported
      [UserPrincipalName <String>]: UserPrincipalName.
    [DisplayName <String>]: Admin provided name of the device configuration.
    [GroupAssignments <IMicrosoftGraphDeviceConfigurationGroupAssignment[]>]: The list of group assignments for the device configuration profile.
    [LastModifiedDateTime <DateTime?>]: DateTime the object was last modified.
    [RoleScopeTagIds <String[]>]: List of Scope Tags for this Entity instance.
    [SupportsScopeTags <Boolean?>]: Indicates whether or not the underlying Device Configuration supports the assignment of scope tags. Assigning to the ScopeTags property is not allowed when this value is false and entities will not be visible to scoped users. This occurs for Legacy policies created in Silverlight and can be resolved by deleting and recreating the policy in the Azure Portal. This property is read-only.
    [UserStatusOverview <IMicrosoftGraphDeviceConfigurationUserOverview>]: deviceConfigurationUserOverview
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [ConfigurationVersion <Int32?>]: Version of the policy for that overview
      [ConflictCount <Int32?>]: Number of users in conflict
      [ErrorCount <Int32?>]: Number of error Users
      [FailedCount <Int32?>]: Number of failed Users
      [LastUpdateDateTime <DateTime?>]: Last update time
      [NotApplicableCount <Int32?>]: Number of not applicable users
      [PendingCount <Int32?>]: Number of pending Users
      [SuccessCount <Int32?>]: Number of succeeded Users
    [UserStatuses <IMicrosoftGraphDeviceConfigurationUserStatus[]>]: Device configuration installation status by user.
      [Id <String>]: Read-only.
      [DevicesCount <Int32?>]: Devices count for that user.
      [LastReportedDateTime <DateTime?>]: Last modified date time of the policy report.
      [Status <String>]: complianceStatus
      [UserDisplayName <String>]: User name of the DevicePolicyStatus.
      [UserPrincipalName <String>]: UserPrincipalName.
    [Version <Int32?>]: Version of the device configuration.
  [ExcludeGroup <Boolean?>]: Indicates if this group is should be excluded. Defaults that the group should be included
  [TargetGroupId <String>]: The Id of the AAD group we are targeting the device configuration to.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdeviceconfigurationgroupassignmentdeviceconfiguration
#>
function Set-MgDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfiguration {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationAssignment1])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfigurationGroupAssignment
    ${DeviceConfigurationGroupAssignmentId},

    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfiguration
    ${DeviceConfigurationId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths35Cy05DevicemanagementDeviceconfigurationsDeviceconfigurationIdGroupassignmentsDeviceconfigurationgroupassignmentIdDeviceconfigurationMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationAssignment1[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationGroupAssignment[]]
    # .
    # To construct, see NOTES section for DEVICECONFIGURATIONGROUPASSIGNMENTS properties and create a hash table.
    ${DeviceConfigurationGroupAssignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfiguration_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfiguration_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfiguration_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceConfigurationGroupAssignmentDeviceConfiguration_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsKq4LptDevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema1
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationAssignment1
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphDeviceConfigurationAssignment1[]>: .
  [Id <String>]: Read-only.
  [Source <String>]: Represents source of assignment.
  [SourceId <String>]: The identifier of the source of the assignment. This property is read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPathsKq4LptDevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema1>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphDeviceConfigurationAssignment1[]>]: 
    [Id <String>]: Read-only.
    [Source <String>]: Represents source of assignment.
    [SourceId <String>]: The identifier of the source of the assignment. This property is read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.
  [DeviceConfigurationGroupAssignments <IMicrosoftGraphDeviceConfigurationGroupAssignment[]>]: 
    [Id <String>]: Read-only.
    [DeviceConfiguration <IMicrosoftGraphDeviceConfiguration>]: Device Configuration.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [Assignments <IMicrosoftGraphDeviceConfigurationAssignment1[]>]: The list of assignments for the device configuration profile.
      [CreatedDateTime <DateTime?>]: DateTime the object was created.
      [Description <String>]: Admin provided description of the Device Configuration.
      [DeviceManagementApplicabilityRuleDeviceMode <IMicrosoftGraphDeviceManagementApplicabilityRuleDeviceMode>]: deviceManagementApplicabilityRuleDeviceMode
        [(Any) <Object>]: This indicates any property can be added to this object.
        [DeviceMode <String>]: Windows 10 Device Mode type.
        [Name <String>]: Name for object.
        [RuleType <String>]: Supported Applicability rule types for Device Configuration
      [DeviceManagementApplicabilityRuleOSEdition <IMicrosoftGraphDeviceManagementApplicabilityRuleOSEdition>]: deviceManagementApplicabilityRuleOsEdition
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Name <String>]: Name for object.
        [OSEditionTypes <String[]>]: Applicability rule OS edition type.
        [RuleType <String>]: Supported Applicability rule types for Device Configuration
      [DeviceManagementApplicabilityRuleOSVersion <IMicrosoftGraphDeviceManagementApplicabilityRuleOSVersion>]: deviceManagementApplicabilityRuleOsVersion
        [(Any) <Object>]: This indicates any property can be added to this object.
        [MaxOSVersion <String>]: Max OS version for Applicability Rule.
        [MinOSVersion <String>]: Min OS version for Applicability Rule.
        [Name <String>]: Name for object.
        [RuleType <String>]: Supported Applicability rule types for Device Configuration
      [DeviceSettingStateSummaries <IMicrosoftGraphSettingStateDeviceSummary[]>]: Device Configuration Setting State Device Summary
        [Id <String>]: Read-only.
        [CompliantDeviceCount <Int32?>]: Device Compliant count for the setting
        [ConflictDeviceCount <Int32?>]: Device conflict error count for the setting
        [ErrorDeviceCount <Int32?>]: Device error count for the setting
        [InstancePath <String>]: Name of the InstancePath for the setting
        [NonCompliantDeviceCount <Int32?>]: Device NonCompliant count for the setting
        [NotApplicableDeviceCount <Int32?>]: Device Not Applicable count for the setting
        [RemediatedDeviceCount <Int32?>]: Device Compliant count for the setting
        [SettingName <String>]: Name of the setting
        [UnknownDeviceCount <Int32?>]: Device Unkown count for the setting
      [DeviceStatusOverview <IMicrosoftGraphDeviceConfigurationDeviceOverview>]: deviceConfigurationDeviceOverview
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Id <String>]: Read-only.
        [ConfigurationVersion <Int32?>]: Version of the policy for that overview
        [ConflictCount <Int32?>]: Number of devices in conflict
        [ErrorCount <Int32?>]: Number of error devices
        [FailedCount <Int32?>]: Number of failed devices
        [LastUpdateDateTime <DateTime?>]: Last update time
        [NotApplicableCount <Int32?>]: Number of not applicable devices
        [NotApplicablePlatformCount <Int32?>]: Number of not applicable devices due to mismatch platform and policy
        [PendingCount <Int32?>]: Number of pending devices
        [SuccessCount <Int32?>]: Number of succeeded devices
      [DeviceStatuses <IMicrosoftGraphDeviceConfigurationDeviceStatus[]>]: Device configuration installation status by device.
        [Id <String>]: Read-only.
        [ComplianceGracePeriodExpirationDateTime <DateTime?>]: The DateTime when device compliance grace period expires
        [DeviceDisplayName <String>]: Device name of the DevicePolicyStatus.
        [DeviceModel <String>]: The device model that is being reported
        [LastReportedDateTime <DateTime?>]: Last modified date time of the policy report.
        [Platform <Int32?>]: Platform of the device that is being reported
        [Status <String>]: complianceStatus
        [UserName <String>]: The User Name that is being reported
        [UserPrincipalName <String>]: UserPrincipalName.
      [DisplayName <String>]: Admin provided name of the device configuration.
      [GroupAssignments <IMicrosoftGraphDeviceConfigurationGroupAssignment[]>]: The list of group assignments for the device configuration profile.
      [LastModifiedDateTime <DateTime?>]: DateTime the object was last modified.
      [RoleScopeTagIds <String[]>]: List of Scope Tags for this Entity instance.
      [SupportsScopeTags <Boolean?>]: Indicates whether or not the underlying Device Configuration supports the assignment of scope tags. Assigning to the ScopeTags property is not allowed when this value is false and entities will not be visible to scoped users. This occurs for Legacy policies created in Silverlight and can be resolved by deleting and recreating the policy in the Azure Portal. This property is read-only.
      [UserStatusOverview <IMicrosoftGraphDeviceConfigurationUserOverview>]: deviceConfigurationUserOverview
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Id <String>]: Read-only.
        [ConfigurationVersion <Int32?>]: Version of the policy for that overview
        [ConflictCount <Int32?>]: Number of users in conflict
        [ErrorCount <Int32?>]: Number of error Users
        [FailedCount <Int32?>]: Number of failed Users
        [LastUpdateDateTime <DateTime?>]: Last update time
        [NotApplicableCount <Int32?>]: Number of not applicable users
        [PendingCount <Int32?>]: Number of pending Users
        [SuccessCount <Int32?>]: Number of succeeded Users
      [UserStatuses <IMicrosoftGraphDeviceConfigurationUserStatus[]>]: Device configuration installation status by user.
        [Id <String>]: Read-only.
        [DevicesCount <Int32?>]: Devices count for that user.
        [LastReportedDateTime <DateTime?>]: Last modified date time of the policy report.
        [Status <String>]: complianceStatus
        [UserDisplayName <String>]: User name of the DevicePolicyStatus.
        [UserPrincipalName <String>]: UserPrincipalName.
      [Version <Int32?>]: Version of the device configuration.
    [ExcludeGroup <Boolean?>]: Indicates if this group is should be excluded. Defaults that the group should be included
    [TargetGroupId <String>]: The Id of the AAD group we are targeting the device configuration to.

DEVICECONFIGURATIONGROUPASSIGNMENTS <IMicrosoftGraphDeviceConfigurationGroupAssignment[]>: .
  [Id <String>]: Read-only.
  [DeviceConfiguration <IMicrosoftGraphDeviceConfiguration>]: Device Configuration.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Id <String>]: Read-only.
    [Assignments <IMicrosoftGraphDeviceConfigurationAssignment1[]>]: The list of assignments for the device configuration profile.
      [Id <String>]: Read-only.
      [Source <String>]: Represents source of assignment.
      [SourceId <String>]: The identifier of the source of the assignment. This property is read-only.
      [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
        [(Any) <Object>]: This indicates any property can be added to this object.
        [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
        [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.
    [CreatedDateTime <DateTime?>]: DateTime the object was created.
    [Description <String>]: Admin provided description of the Device Configuration.
    [DeviceManagementApplicabilityRuleDeviceMode <IMicrosoftGraphDeviceManagementApplicabilityRuleDeviceMode>]: deviceManagementApplicabilityRuleDeviceMode
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceMode <String>]: Windows 10 Device Mode type.
      [Name <String>]: Name for object.
      [RuleType <String>]: Supported Applicability rule types for Device Configuration
    [DeviceManagementApplicabilityRuleOSEdition <IMicrosoftGraphDeviceManagementApplicabilityRuleOSEdition>]: deviceManagementApplicabilityRuleOsEdition
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Name <String>]: Name for object.
      [OSEditionTypes <String[]>]: Applicability rule OS edition type.
      [RuleType <String>]: Supported Applicability rule types for Device Configuration
    [DeviceManagementApplicabilityRuleOSVersion <IMicrosoftGraphDeviceManagementApplicabilityRuleOSVersion>]: deviceManagementApplicabilityRuleOsVersion
      [(Any) <Object>]: This indicates any property can be added to this object.
      [MaxOSVersion <String>]: Max OS version for Applicability Rule.
      [MinOSVersion <String>]: Min OS version for Applicability Rule.
      [Name <String>]: Name for object.
      [RuleType <String>]: Supported Applicability rule types for Device Configuration
    [DeviceSettingStateSummaries <IMicrosoftGraphSettingStateDeviceSummary[]>]: Device Configuration Setting State Device Summary
      [Id <String>]: Read-only.
      [CompliantDeviceCount <Int32?>]: Device Compliant count for the setting
      [ConflictDeviceCount <Int32?>]: Device conflict error count for the setting
      [ErrorDeviceCount <Int32?>]: Device error count for the setting
      [InstancePath <String>]: Name of the InstancePath for the setting
      [NonCompliantDeviceCount <Int32?>]: Device NonCompliant count for the setting
      [NotApplicableDeviceCount <Int32?>]: Device Not Applicable count for the setting
      [RemediatedDeviceCount <Int32?>]: Device Compliant count for the setting
      [SettingName <String>]: Name of the setting
      [UnknownDeviceCount <Int32?>]: Device Unkown count for the setting
    [DeviceStatusOverview <IMicrosoftGraphDeviceConfigurationDeviceOverview>]: deviceConfigurationDeviceOverview
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [ConfigurationVersion <Int32?>]: Version of the policy for that overview
      [ConflictCount <Int32?>]: Number of devices in conflict
      [ErrorCount <Int32?>]: Number of error devices
      [FailedCount <Int32?>]: Number of failed devices
      [LastUpdateDateTime <DateTime?>]: Last update time
      [NotApplicableCount <Int32?>]: Number of not applicable devices
      [NotApplicablePlatformCount <Int32?>]: Number of not applicable devices due to mismatch platform and policy
      [PendingCount <Int32?>]: Number of pending devices
      [SuccessCount <Int32?>]: Number of succeeded devices
    [DeviceStatuses <IMicrosoftGraphDeviceConfigurationDeviceStatus[]>]: Device configuration installation status by device.
      [Id <String>]: Read-only.
      [ComplianceGracePeriodExpirationDateTime <DateTime?>]: The DateTime when device compliance grace period expires
      [DeviceDisplayName <String>]: Device name of the DevicePolicyStatus.
      [DeviceModel <String>]: The device model that is being reported
      [LastReportedDateTime <DateTime?>]: Last modified date time of the policy report.
      [Platform <Int32?>]: Platform of the device that is being reported
      [Status <String>]: complianceStatus
      [UserName <String>]: The User Name that is being reported
      [UserPrincipalName <String>]: UserPrincipalName.
    [DisplayName <String>]: Admin provided name of the device configuration.
    [GroupAssignments <IMicrosoftGraphDeviceConfigurationGroupAssignment[]>]: The list of group assignments for the device configuration profile.
    [LastModifiedDateTime <DateTime?>]: DateTime the object was last modified.
    [RoleScopeTagIds <String[]>]: List of Scope Tags for this Entity instance.
    [SupportsScopeTags <Boolean?>]: Indicates whether or not the underlying Device Configuration supports the assignment of scope tags. Assigning to the ScopeTags property is not allowed when this value is false and entities will not be visible to scoped users. This occurs for Legacy policies created in Silverlight and can be resolved by deleting and recreating the policy in the Azure Portal. This property is read-only.
    [UserStatusOverview <IMicrosoftGraphDeviceConfigurationUserOverview>]: deviceConfigurationUserOverview
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [ConfigurationVersion <Int32?>]: Version of the policy for that overview
      [ConflictCount <Int32?>]: Number of users in conflict
      [ErrorCount <Int32?>]: Number of error Users
      [FailedCount <Int32?>]: Number of failed Users
      [LastUpdateDateTime <DateTime?>]: Last update time
      [NotApplicableCount <Int32?>]: Number of not applicable users
      [PendingCount <Int32?>]: Number of pending Users
      [SuccessCount <Int32?>]: Number of succeeded Users
    [UserStatuses <IMicrosoftGraphDeviceConfigurationUserStatus[]>]: Device configuration installation status by user.
      [Id <String>]: Read-only.
      [DevicesCount <Int32?>]: Devices count for that user.
      [LastReportedDateTime <DateTime?>]: Last modified date time of the policy report.
      [Status <String>]: complianceStatus
      [UserDisplayName <String>]: User name of the DevicePolicyStatus.
      [UserPrincipalName <String>]: UserPrincipalName.
    [Version <Int32?>]: Version of the device configuration.
  [ExcludeGroup <Boolean?>]: Indicates if this group is should be excluded. Defaults that the group should be included
  [TargetGroupId <String>]: The Id of the AAD group we are targeting the device configuration to.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdeviceconfiguration
#>
function Set-MgDeviceManagementDeviceConfiguration {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationAssignment1])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign1', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded1', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceConfiguration
    ${DeviceConfigurationId},

    [Parameter(ParameterSetName='AssignViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsKq4LptDevicemanagementDeviceconfigurationsDeviceconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema1]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded1')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded1')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationAssignment1[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(ParameterSetName='AssignExpanded1')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceConfigurationGroupAssignment[]]
    # .
    # To construct, see NOTES section for DEVICECONFIGURATIONGROUPASSIGNMENTS properties and create a hash table.
    ${DeviceConfigurationGroupAssignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceConfiguration_Assign1';
            AssignExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceConfiguration_AssignExpanded1';
            AssignViaIdentity1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceConfiguration_AssignViaIdentity1';
            AssignViaIdentityExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceConfiguration_AssignViaIdentityExpanded1';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsS7QkhtDevicemanagementDevicecustomattributeshellscriptsDevicecustomattributeshellscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsS7QkhtDevicemanagementDevicecustomattributeshellscriptsDevicecustomattributeshellscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceManagementScriptAssignments <IMicrosoftGraphDeviceManagementScriptAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.
  [DeviceManagementScriptGroupAssignments <IMicrosoftGraphDeviceManagementScriptGroupAssignment[]>]: 
    [Id <String>]: Read-only.
    [TargetGroupId <String>]: The Id of the Azure Active Directory group we are targeting the script to.

DEVICEMANAGEMENTSCRIPTASSIGNMENTS <IMicrosoftGraphDeviceManagementScriptAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

DEVICEMANAGEMENTSCRIPTGROUPASSIGNMENTS <IMicrosoftGraphDeviceManagementScriptGroupAssignment[]>: .
  [Id <String>]: Read-only.
  [TargetGroupId <String>]: The Id of the Azure Active Directory group we are targeting the script to.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdevicecustomattributeshellscript
#>
function Set-MgDeviceManagementDeviceCustomAttributeShellScript {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceCustomAttributeShellScript
    ${DeviceCustomAttributeShellScriptId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsS7QkhtDevicemanagementDevicecustomattributeshellscriptsDevicecustomattributeshellscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementScriptAssignment[]]
    # .
    # To construct, see NOTES section for DEVICEMANAGEMENTSCRIPTASSIGNMENTS properties and create a hash table.
    ${DeviceManagementScriptAssignments},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementScriptGroupAssignment[]]
    # .
    # To construct, see NOTES section for DEVICEMANAGEMENTSCRIPTGROUPASSIGNMENTS properties and create a hash table.
    ${DeviceManagementScriptGroupAssignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCustomAttributeShellScript_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCustomAttributeShellScript_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCustomAttributeShellScript_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceCustomAttributeShellScript_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action setPriority
.Description
Invoke action setPriority

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Ch2TbmDevicemanagementDeviceenrollmentconfigurationsDeviceenrollmentconfigurationIdMicrosoftGraphSetpriorityPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Ch2TbmDevicemanagementDeviceenrollmentconfigurationsDeviceenrollmentconfigurationIdMicrosoftGraphSetpriorityPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Priority <Int32?>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdeviceenrollmentconfigurationpriority
#>
function Set-MgDeviceManagementDeviceEnrollmentConfigurationPriority {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set1', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded1', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceEnrollmentConfiguration
    ${DeviceEnrollmentConfigurationId},

    [Parameter(ParameterSetName='SetViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Set1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Ch2TbmDevicemanagementDeviceenrollmentconfigurationsDeviceenrollmentconfigurationIdMicrosoftGraphSetpriorityPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded1')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded1')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Int32]
    # .
    ${Priority},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceEnrollmentConfigurationPriority_Set1';
            SetExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceEnrollmentConfigurationPriority_SetExpanded1';
            SetViaIdentity1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceEnrollmentConfigurationPriority_SetViaIdentity1';
            SetViaIdentityExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceEnrollmentConfigurationPriority_SetViaIdentityExpanded1';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsScqz9HDevicemanagementDeviceenrollmentconfigurationsDeviceenrollmentconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema1
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsScqz9HDevicemanagementDeviceenrollmentconfigurationsDeviceenrollmentconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema1>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [EnrollmentConfigurationAssignments <IMicrosoftGraphEnrollmentConfigurationAssignment1[]>]: 
    [Id <String>]: Read-only.
    [Source <String>]: Represents source of assignment.
    [SourceId <String>]: Identifier for resource used for deployment to a group
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

ENROLLMENTCONFIGURATIONASSIGNMENTS <IMicrosoftGraphEnrollmentConfigurationAssignment1[]>: .
  [Id <String>]: Read-only.
  [Source <String>]: Represents source of assignment.
  [SourceId <String>]: Identifier for resource used for deployment to a group
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdeviceenrollmentconfiguration
#>
function Set-MgDeviceManagementDeviceEnrollmentConfiguration {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign1', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded1', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceEnrollmentConfiguration
    ${DeviceEnrollmentConfigurationId},

    [Parameter(ParameterSetName='AssignViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsScqz9HDevicemanagementDeviceenrollmentconfigurationsDeviceenrollmentconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema1]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded1')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded1')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded1')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphEnrollmentConfigurationAssignment1[]]
    # .
    # To construct, see NOTES section for ENROLLMENTCONFIGURATIONASSIGNMENTS properties and create a hash table.
    ${EnrollmentConfigurationAssignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceEnrollmentConfiguration_Assign1';
            AssignExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceEnrollmentConfiguration_AssignExpanded1';
            AssignViaIdentity1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceEnrollmentConfiguration_AssignViaIdentity1';
            AssignViaIdentityExpanded1 = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceEnrollmentConfiguration_AssignViaIdentityExpanded1';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Set device name of the device.
.Description
Set device name of the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths19Ax8J0DevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths19Ax8J0DevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevicename
#>
function Set-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceName {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths19Ax8J0DevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeviceName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceName_Set';
            SetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceName_SetExpanded';
            SetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceName_SetViaIdentity';
            SetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceName_SetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths14LamxzDevicemanagementDevicehealthscriptsDevicehealthscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths14LamxzDevicemanagementDevicehealthscriptsDevicehealthscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceHealthScriptAssignments <IMicrosoftGraphDeviceHealthScriptAssignment[]>]: 
    [Id <String>]: Read-only.
    [RunRemediationScript <Boolean?>]: Determine whether we want to run detection script only or run both detection script and remediation script
    [RunSchedule <IMicrosoftGraphDeviceHealthScriptRunSchedule>]: Base type of Device health script run schedule.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Interval <Int32?>]: The x value of every x hours for hourly schedule, every x days for Daily Schedule, every x weeks for weekly schedule, every x months for Monthly Schedule. Valid values 1 to 23
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

DEVICEHEALTHSCRIPTASSIGNMENTS <IMicrosoftGraphDeviceHealthScriptAssignment[]>: .
  [Id <String>]: Read-only.
  [RunRemediationScript <Boolean?>]: Determine whether we want to run detection script only or run both detection script and remediation script
  [RunSchedule <IMicrosoftGraphDeviceHealthScriptRunSchedule>]: Base type of Device health script run schedule.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Interval <Int32?>]: The x value of every x hours for hourly schedule, every x days for Daily Schedule, every x weeks for weekly schedule, every x months for Monthly Schedule. Valid values 1 to 23
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdevicehealthscript
#>
function Set-MgDeviceManagementDeviceHealthScript {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths14LamxzDevicemanagementDevicehealthscriptsDevicehealthscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceHealthScriptAssignment[]]
    # .
    # To construct, see NOTES section for DEVICEHEALTHSCRIPTASSIGNMENTS properties and create a hash table.
    ${DeviceHealthScriptAssignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceHealthScript_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceHealthScript_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceHealthScript_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceHealthScript_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Set device name of the device.
.Description
Set device name of the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1P3OlglDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1P3OlglDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicename
#>
function Set-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceName {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1P3OlglDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeviceName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceName_Set';
            SetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceName_SetExpanded';
            SetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceName_SetViaIdentity';
            SetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceName_SetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths13Yln21DevicemanagementDeviceshellscriptsDeviceshellscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths13Yln21DevicemanagementDeviceshellscriptsDeviceshellscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceManagementScriptAssignments <IMicrosoftGraphDeviceManagementScriptAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.
  [DeviceManagementScriptGroupAssignments <IMicrosoftGraphDeviceManagementScriptGroupAssignment[]>]: 
    [Id <String>]: Read-only.
    [TargetGroupId <String>]: The Id of the Azure Active Directory group we are targeting the script to.

DEVICEMANAGEMENTSCRIPTASSIGNMENTS <IMicrosoftGraphDeviceManagementScriptAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

DEVICEMANAGEMENTSCRIPTGROUPASSIGNMENTS <IMicrosoftGraphDeviceManagementScriptGroupAssignment[]>: .
  [Id <String>]: Read-only.
  [TargetGroupId <String>]: The Id of the Azure Active Directory group we are targeting the script to.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementdeviceshellscript
#>
function Set-MgDeviceManagementDeviceShellScript {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths13Yln21DevicemanagementDeviceshellscriptsDeviceshellscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementScriptAssignment[]]
    # .
    # To construct, see NOTES section for DEVICEMANAGEMENTSCRIPTASSIGNMENTS properties and create a hash table.
    ${DeviceManagementScriptAssignments},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementScriptGroupAssignment[]]
    # .
    # To construct, see NOTES section for DEVICEMANAGEMENTSCRIPTGROUPASSIGNMENTS properties and create a hash table.
    ${DeviceManagementScriptGroupAssignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceShellScript_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceShellScript_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceShellScript_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementDeviceShellScript_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths139IxruDevicemanagementEmbeddedsimactivationcodepoolsEmbeddedsimactivationcodepoolIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphEmbeddedSimActivationCodePoolAssignment
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphEmbeddedSimActivationCodePoolAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPaths139IxruDevicemanagementEmbeddedsimactivationcodepoolsEmbeddedsimactivationcodepoolIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphEmbeddedSimActivationCodePoolAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementembeddedsimactivationcodepool
#>
function Set-MgDeviceManagementEmbeddedSimActivationCodePool {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphEmbeddedSimActivationCodePoolAssignment])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of embeddedSIMActivationCodePool
    ${EmbeddedSimActivationCodePoolId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths139IxruDevicemanagementEmbeddedsimactivationcodepoolsEmbeddedsimactivationcodepoolIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphEmbeddedSimActivationCodePoolAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementEmbeddedSimActivationCodePool_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementEmbeddedSimActivationCodePool_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementEmbeddedSimActivationCodePool_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementEmbeddedSimActivationCodePool_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsCbiegtDevicemanagementGrouppolicyconfigurationsGrouppolicyconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyConfigurationAssignment
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphGroupPolicyConfigurationAssignment[]>: .
  [Id <String>]: Read-only.
  [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPathsCbiegtDevicemanagementGrouppolicyconfigurationsGrouppolicyconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphGroupPolicyConfigurationAssignment[]>]: 
    [Id <String>]: Read-only.
    [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementgrouppolicyconfiguration
#>
function Set-MgDeviceManagementGroupPolicyConfiguration {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyConfigurationAssignment])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of groupPolicyConfiguration
    ${GroupPolicyConfigurationId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsCbiegtDevicemanagementGrouppolicyconfigurationsGrouppolicyconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyConfigurationAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementGroupPolicyConfiguration_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementGroupPolicyConfiguration_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementGroupPolicyConfiguration_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementGroupPolicyConfiguration_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsPuxi5DevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphDeviceManagementIntentAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPathsPuxi5DevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphDeviceManagementIntentAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementintent
#>
function Set-MgDeviceManagementIntent {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementIntent
    ${DeviceManagementIntentId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsPuxi5DevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementIntentAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementIntent_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementIntent_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementIntent_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementIntent_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1I5JkzDevicemanagementIntunebrandingprofilesIntunebrandingprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphIntuneBrandingProfileAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPaths1I5JkzDevicemanagementIntunebrandingprofilesIntunebrandingprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphIntuneBrandingProfileAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementintunebrandingprofile
#>
function Set-MgDeviceManagementIntuneBrandingProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of intuneBrandingProfile
    ${IntuneBrandingProfileId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1I5JkzDevicemanagementIntunebrandingprofilesIntunebrandingprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphIntuneBrandingProfileAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementIntuneBrandingProfile_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementIntuneBrandingProfile_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementIntuneBrandingProfile_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementIntuneBrandingProfile_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Set device name of the device.
.Description
Set device name of the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsRe3VslDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsRe3VslDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementmanageddevicename
#>
function Set-MgDeviceManagementManagedDeviceName {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsRe3VslDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeviceName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementManagedDeviceName_Set';
            SetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementManagedDeviceName_SetExpanded';
            SetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementManagedDeviceName_SetViaIdentity';
            SetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementManagedDeviceName_SetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths16HigzcDevicemanagementResourceaccessprofilesDevicemanagementresourceaccessprofilebaseIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementResourceAccessProfileAssignment
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphDeviceManagementResourceAccessProfileAssignment[]>: .
  [Id <String>]: Read-only.
  [Intent <String>]: The administrator intent for the assignment of the profile.
  [SourceId <String>]: The identifier of the source of the assignment.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPaths16HigzcDevicemanagementResourceaccessprofilesDevicemanagementresourceaccessprofilebaseIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphDeviceManagementResourceAccessProfileAssignment[]>]: 
    [Id <String>]: Read-only.
    [Intent <String>]: The administrator intent for the assignment of the profile.
    [SourceId <String>]: The identifier of the source of the assignment.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementresourceaccessprofile
#>
function Set-MgDeviceManagementResourceAccessProfile {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementResourceAccessProfileAssignment])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementResourceAccessProfileBase
    ${DeviceManagementResourceAccessProfileBaseId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths16HigzcDevicemanagementResourceaccessprofilesDevicemanagementresourceaccessprofilebaseIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementResourceAccessProfileAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementResourceAccessProfile_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementResourceAccessProfile_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementResourceAccessProfile_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementResourceAccessProfile_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsNvnleuDevicemanagementRolescopetagsRolescopetagIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRoleScopeTagAutoAssignment
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphRoleScopeTagAutoAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPathsNvnleuDevicemanagementRolescopetagsRolescopetagIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphRoleScopeTagAutoAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementrolescopetag
#>
function Set-MgDeviceManagementRoleScopeTag {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRoleScopeTagAutoAssignment])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of roleScopeTag
    ${RoleScopeTagId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsNvnleuDevicemanagementRolescopetagsRolescopetagIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphRoleScopeTagAutoAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementRoleScopeTag_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementRoleScopeTag_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementRoleScopeTag_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementRoleScopeTag_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Set device name of the device.
.Description
Set device name of the device.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsXq9Bb2DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsXq9Bb2DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementscriptdevicerunstatemanageddevicename
#>
function Set-MgDeviceManagementScriptDeviceRunStateManagedDeviceName {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Set', Mandatory)]
    [Parameter(ParameterSetName='SetExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsXq9Bb2DevicemanagementDevicemanagementscriptsDevicemanagementscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphSetdevicenamePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SetExpanded')]
    [Parameter(ParameterSetName='SetViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DeviceName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Set = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementScriptDeviceRunStateManagedDeviceName_Set';
            SetExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementScriptDeviceRunStateManagedDeviceName_SetExpanded';
            SetViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementScriptDeviceRunStateManagedDeviceName_SetViaIdentity';
            SetViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementScriptDeviceRunStateManagedDeviceName_SetViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths11Bo6VdDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths11Bo6VdDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceManagementScriptAssignments <IMicrosoftGraphDeviceManagementScriptAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.
  [DeviceManagementScriptGroupAssignments <IMicrosoftGraphDeviceManagementScriptGroupAssignment[]>]: 
    [Id <String>]: Read-only.
    [TargetGroupId <String>]: The Id of the Azure Active Directory group we are targeting the script to.

DEVICEMANAGEMENTSCRIPTASSIGNMENTS <IMicrosoftGraphDeviceManagementScriptAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

DEVICEMANAGEMENTSCRIPTGROUPASSIGNMENTS <IMicrosoftGraphDeviceManagementScriptGroupAssignment[]>: .
  [Id <String>]: Read-only.
  [TargetGroupId <String>]: The Id of the Azure Active Directory group we are targeting the script to.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementscript
#>
function Set-MgDeviceManagementScript {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths11Bo6VdDevicemanagementDevicemanagementscriptsDevicemanagementscriptIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementScriptAssignment[]]
    # .
    # To construct, see NOTES section for DEVICEMANAGEMENTSCRIPTASSIGNMENTS properties and create a hash table.
    ${DeviceManagementScriptAssignments},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementScriptGroupAssignment[]]
    # .
    # To construct, see NOTES section for DEVICEMANAGEMENTSCRIPTGROUPASSIGNMENTS properties and create a hash table.
    ${DeviceManagementScriptGroupAssignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementScript_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementScript_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementScript_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementScript_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Bzvde4DevicemanagementVirtualendpointProvisioningpoliciesCloudpcprovisioningpolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphCloudPcProvisioningPolicyAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphCloudPcManagementAssignmentTarget>]: cloudPcManagementAssignmentTarget
    [(Any) <Object>]: This indicates any property can be added to this object.

BODYPARAMETER <IPaths1Bzvde4DevicemanagementVirtualendpointProvisioningpoliciesCloudpcprovisioningpolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphCloudPcProvisioningPolicyAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphCloudPcManagementAssignmentTarget>]: cloudPcManagementAssignmentTarget
      [(Any) <Object>]: This indicates any property can be added to this object.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementvirtualendpointprovisioningpolicy
#>
function Set-MgDeviceManagementVirtualEndpointProvisioningPolicy {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of cloudPcProvisioningPolicy
    ${CloudPcProvisioningPolicyId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Bzvde4DevicemanagementVirtualendpointProvisioningpoliciesCloudpcprovisioningpolicyIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphCloudPcProvisioningPolicyAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementVirtualEndpointProvisioningPolicy_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementVirtualEndpointProvisioningPolicy_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementVirtualEndpointProvisioningPolicy_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementVirtualEndpointProvisioningPolicy_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths7Tr5RcDevicemanagementVirtualendpointUsersettingsCloudpcusersettingIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphCloudPcUserSettingAssignment[]>: .
  [Id <String>]: Read-only.
  [CreatedDateTime <DateTime?>]: The date and time this assignment was created. The Timestamp type represents the date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 looks like this: '2014-01-01T00:00:00Z'.
  [Target <IMicrosoftGraphCloudPcManagementAssignmentTarget>]: cloudPcManagementAssignmentTarget
    [(Any) <Object>]: This indicates any property can be added to this object.

BODYPARAMETER <IPaths7Tr5RcDevicemanagementVirtualendpointUsersettingsCloudpcusersettingIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphCloudPcUserSettingAssignment[]>]: 
    [Id <String>]: Read-only.
    [CreatedDateTime <DateTime?>]: The date and time this assignment was created. The Timestamp type represents the date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 looks like this: '2014-01-01T00:00:00Z'.
    [Target <IMicrosoftGraphCloudPcManagementAssignmentTarget>]: cloudPcManagementAssignmentTarget
      [(Any) <Object>]: This indicates any property can be added to this object.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementvirtualendpointusersetting
#>
function Set-MgDeviceManagementVirtualEndpointUserSetting {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of cloudPcUserSetting
    ${CloudPcUserSettingId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths7Tr5RcDevicemanagementVirtualendpointUsersettingsCloudpcusersettingIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphCloudPcUserSettingAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementVirtualEndpointUserSetting_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementVirtualEndpointUserSetting_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementVirtualEndpointUserSetting_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementVirtualEndpointUserSetting_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Assigns user to Autopilot devices.
.Description
Assigns user to Autopilot devices.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths8Kj1X1DevicemanagementWindowsautopilotdeploymentprofilesWindowsautopilotdeploymentprofileIdAssigneddevicesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignusertodevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths8Kj1X1DevicemanagementWindowsautopilotdeploymentprofilesWindowsautopilotdeploymentprofileIdAssigneddevicesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignusertodevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AddressableUserName <String>]: 
  [UserPrincipalName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowautopilotdeploymentprofileassigneddeviceusertodevice
#>
function Set-MgDeviceManagementWindowAutopilotDeploymentProfileAssignedDeviceUserToDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeploymentProfile
    ${WindowsAutopilotDeploymentProfileId},

    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths8Kj1X1DevicemanagementWindowsautopilotdeploymentprofilesWindowsautopilotdeploymentprofileIdAssigneddevicesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignusertodevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${AddressableUserName},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserPrincipalName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeploymentProfileAssignedDeviceUserToDevice_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeploymentProfileAssignedDeviceUserToDevice_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeploymentProfileAssignedDeviceUserToDevice_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeploymentProfileAssignedDeviceUserToDevice_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Bmmkw4DevicemanagementWindowsautopilotdeploymentprofilesWindowsautopilotdeploymentprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Bmmkw4DevicemanagementWindowsautopilotdeploymentprofilesWindowsautopilotdeploymentprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceIds <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowautopilotdeploymentprofile
#>
function Set-MgDeviceManagementWindowAutopilotDeploymentProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeploymentProfile
    ${WindowsAutopilotDeploymentProfileId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Bmmkw4DevicemanagementWindowsautopilotdeploymentprofilesWindowsautopilotdeploymentprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeploymentProfile_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeploymentProfile_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeploymentProfile_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeploymentProfile_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsD6PejmDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdDeploymentprofileMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsD6PejmDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdDeploymentprofileMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceIds <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowautopilotdeviceidentitydeploymentprofile
#>
function Set-MgDeviceManagementWindowAutopilotDeviceIdentityDeploymentProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsD6PejmDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdDeploymentprofileMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityDeploymentProfile_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityDeploymentProfile_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityDeploymentProfile_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityDeploymentProfile_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsUqso5LDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdIntendeddeploymentprofileMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsUqso5LDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdIntendeddeploymentprofileMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceIds <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowautopilotdeviceidentityintendeddeploymentprofile
#>
function Set-MgDeviceManagementWindowAutopilotDeviceIdentityIntendedDeploymentProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsUqso5LDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdIntendeddeploymentprofileMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityIntendedDeploymentProfile_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityIntendedDeploymentProfile_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityIntendedDeploymentProfile_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityIntendedDeploymentProfile_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Assigns resource account to Autopilot devices.
.Description
Assigns resource account to Autopilot devices.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1G076VfDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignresourceaccounttodevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1G076VfDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignresourceaccounttodevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AddressableUserName <String>]: 
  [ResourceAccountName <String>]: 
  [UserPrincipalName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowautopilotdeviceidentityresourceaccounttodevice
#>
function Set-MgDeviceManagementWindowAutopilotDeviceIdentityResourceAccountToDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1G076VfDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignresourceaccounttodevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${AddressableUserName},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${ResourceAccountName},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserPrincipalName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityResourceAccountToDevice_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityResourceAccountToDevice_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityResourceAccountToDevice_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityResourceAccountToDevice_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Assigns user to Autopilot devices.
.Description
Assigns user to Autopilot devices.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsLgvh1ODevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignusertodevicePostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsLgvh1ODevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignusertodevicePostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AddressableUserName <String>]: 
  [UserPrincipalName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowautopilotdeviceidentityusertodevice
#>
function Set-MgDeviceManagementWindowAutopilotDeviceIdentityUserToDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsLgvh1ODevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphAssignusertodevicePostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${AddressableUserName},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserPrincipalName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityUserToDevice_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityUserToDevice_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityUserToDevice_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowAutopilotDeviceIdentityUserToDevice_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1F83Ez2DevicemanagementWindowsdriverupdateprofilesWindowsdriverupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphWindowsDriverUpdateProfileAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPaths1F83Ez2DevicemanagementWindowsdriverupdateprofilesWindowsdriverupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphWindowsDriverUpdateProfileAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowdriverupdateprofile
#>
function Set-MgDeviceManagementWindowDriverUpdateProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsDriverUpdateProfile
    ${WindowsDriverUpdateProfileId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1F83Ez2DevicemanagementWindowsdriverupdateprofilesWindowsdriverupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphWindowsDriverUpdateProfileAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowDriverUpdateProfile_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowDriverUpdateProfile_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowDriverUpdateProfile_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowDriverUpdateProfile_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsRtu0LxDevicemanagementWindowsfeatureupdateprofilesWindowsfeatureupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphWindowsFeatureUpdateProfileAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPathsRtu0LxDevicemanagementWindowsfeatureupdateprofilesWindowsfeatureupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphWindowsFeatureUpdateProfileAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowfeatureupdateprofile
#>
function Set-MgDeviceManagementWindowFeatureUpdateProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsFeatureUpdateProfile
    ${WindowsFeatureUpdateProfileId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsRtu0LxDevicemanagementWindowsfeatureupdateprofilesWindowsfeatureupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphWindowsFeatureUpdateProfileAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowFeatureUpdateProfile_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowFeatureUpdateProfile_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowFeatureUpdateProfile_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowFeatureUpdateProfile_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action assign
.Description
Invoke action assign

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths16Xnlm3DevicemanagementWindowsqualityupdateprofilesWindowsqualityupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ASSIGNMENTS <IMicrosoftGraphWindowsQualityUpdateProfileAssignment[]>: .
  [Id <String>]: Read-only.
  [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
    [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

BODYPARAMETER <IPaths16Xnlm3DevicemanagementWindowsqualityupdateprofilesWindowsqualityupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Assignments <IMicrosoftGraphWindowsQualityUpdateProfileAssignment[]>]: 
    [Id <String>]: Read-only.
    [Target <IMicrosoftGraphDeviceAndAppManagementAssignmentTarget1>]: Base type for assignment targets.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [DeviceAndAppManagementAssignmentFilterId <String>]: The Id of the filter for the target assignment.
      [DeviceAndAppManagementAssignmentFilterType <String>]: Represents type of the assignment filter.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/set-mgdevicemanagementwindowqualityupdateprofile
#>
function Set-MgDeviceManagementWindowQualityUpdateProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='AssignExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Assign', Mandatory)]
    [Parameter(ParameterSetName='AssignExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsQualityUpdateProfile
    ${WindowsQualityUpdateProfileId},

    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Assign', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AssignViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths16Xnlm3DevicemanagementWindowsqualityupdateprofilesWindowsqualityupdateprofileIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='AssignExpanded')]
    [Parameter(ParameterSetName='AssignViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphWindowsQualityUpdateProfileAssignment[]]
    # .
    # To construct, see NOTES section for ASSIGNMENTS properties and create a hash table.
    ${Assignments},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Assign = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowQualityUpdateProfile_Assign';
            AssignExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowQualityUpdateProfile_AssignExpanded';
            AssignViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowQualityUpdateProfile_AssignViaIdentity';
            AssignViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Set-MgDeviceManagementWindowQualityUpdateProfile_AssignViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Bypass activation lock
.Description
Bypass activation lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/skip-mgdevicemanagementcomanageddeviceactivationlock
#>
function Skip-MgDeviceManagementComanagedDeviceActivationLock {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Bypass', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Bypass', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='BypassViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Bypass = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementComanagedDeviceActivationLock_Bypass';
            BypassViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementComanagedDeviceActivationLock_BypassViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Bypass activation lock
.Description
Bypass activation lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/skip-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddeviceactivationlock
#>
function Skip-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceActivationLock {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Bypass', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Bypass', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Bypass', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='BypassViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Bypass = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceActivationLock_Bypass';
            BypassViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceActivationLock_BypassViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Bypass activation lock
.Description
Bypass activation lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/skip-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddeviceactivationlock
#>
function Skip-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceActivationLock {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Bypass', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Bypass', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Bypass', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='BypassViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Bypass = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceActivationLock_Bypass';
            BypassViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceActivationLock_BypassViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Bypass activation lock
.Description
Bypass activation lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/skip-mgdevicemanagementmanageddeviceactivationlock
#>
function Skip-MgDeviceManagementManagedDeviceActivationLock {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Bypass', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Bypass', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='BypassViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Bypass = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementManagedDeviceActivationLock_Bypass';
            BypassViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementManagedDeviceActivationLock_BypassViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Bypass activation lock
.Description
Bypass activation lock

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/skip-mgdevicemanagementscriptdevicerunstatemanageddeviceactivationlock
#>
function Skip-MgDeviceManagementScriptDeviceRunStateManagedDeviceActivationLock {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Bypass', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Bypass', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Bypass', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='BypassViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Bypass = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementScriptDeviceRunStateManagedDeviceActivationLock_Bypass';
            BypassViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Skip-MgDeviceManagementScriptDeviceRunStateManagedDeviceActivationLock_BypassViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Trigger action on ConfigurationManager client
.Description
Trigger action on ConfigurationManager client

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsD4Rzd2DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsD4Rzd2DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ConfigurationManagerAction <IMicrosoftGraphConfigurationManagerAction>]: Parameter for action triggerConfigurationManagerAction
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Action <String>]: Action type on Configuration Manager client

CONFIGURATIONMANAGERACTION <IMicrosoftGraphConfigurationManagerAction>: Parameter for action triggerConfigurationManagerAction
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Action <String>]: Action type on Configuration Manager client

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/start-mgdevicemanagementcomanageddeviceconfigurationmanageraction
#>
function Start-MgDeviceManagementComanagedDeviceConfigurationManagerAction {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='TriggerExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Trigger', Mandatory)]
    [Parameter(ParameterSetName='TriggerExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Trigger', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsD4Rzd2DevicemanagementComanageddevicesManageddeviceIdMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphConfigurationManagerAction]
    # Parameter for action triggerConfigurationManagerAction
    # To construct, see NOTES section for CONFIGURATIONMANAGERACTION properties and create a hash table.
    ${ConfigurationManagerAction},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Trigger = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementComanagedDeviceConfigurationManagerAction_Trigger';
            TriggerExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementComanagedDeviceConfigurationManagerAction_TriggerExpanded';
            TriggerViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementComanagedDeviceConfigurationManagerAction_TriggerViaIdentity';
            TriggerViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementComanagedDeviceConfigurationManagerAction_TriggerViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Trigger action on ConfigurationManager client
.Description
Trigger action on ConfigurationManager client

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsGig11DDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsGig11DDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ConfigurationManagerAction <IMicrosoftGraphConfigurationManagerAction>]: Parameter for action triggerConfigurationManagerAction
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Action <String>]: Action type on Configuration Manager client

CONFIGURATIONMANAGERACTION <IMicrosoftGraphConfigurationManagerAction>: Parameter for action triggerConfigurationManagerAction
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Action <String>]: Action type on Configuration Manager client

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/start-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddeviceconfigurationmanageraction
#>
function Start-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceConfigurationManagerAction {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='TriggerExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Trigger', Mandatory)]
    [Parameter(ParameterSetName='TriggerExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Trigger', Mandatory)]
    [Parameter(ParameterSetName='TriggerExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Trigger', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsGig11DDevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphConfigurationManagerAction]
    # Parameter for action triggerConfigurationManagerAction
    # To construct, see NOTES section for CONFIGURATIONMANAGERACTION properties and create a hash table.
    ${ConfigurationManagerAction},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Trigger = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceConfigurationManagerAction_Trigger';
            TriggerExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceConfigurationManagerAction_TriggerExpanded';
            TriggerViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceConfigurationManagerAction_TriggerViaIdentity';
            TriggerViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceConfigurationManagerAction_TriggerViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Trigger action on ConfigurationManager client
.Description
Trigger action on ConfigurationManager client

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1D8VekmDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1D8VekmDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ConfigurationManagerAction <IMicrosoftGraphConfigurationManagerAction>]: Parameter for action triggerConfigurationManagerAction
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Action <String>]: Action type on Configuration Manager client

CONFIGURATIONMANAGERACTION <IMicrosoftGraphConfigurationManagerAction>: Parameter for action triggerConfigurationManagerAction
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Action <String>]: Action type on Configuration Manager client

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/start-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddeviceconfigurationmanageraction
#>
function Start-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceConfigurationManagerAction {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='TriggerExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Trigger', Mandatory)]
    [Parameter(ParameterSetName='TriggerExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Trigger', Mandatory)]
    [Parameter(ParameterSetName='TriggerExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Trigger', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1D8VekmDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphConfigurationManagerAction]
    # Parameter for action triggerConfigurationManagerAction
    # To construct, see NOTES section for CONFIGURATIONMANAGERACTION properties and create a hash table.
    ${ConfigurationManagerAction},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Trigger = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceConfigurationManagerAction_Trigger';
            TriggerExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceConfigurationManagerAction_TriggerExpanded';
            TriggerViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceConfigurationManagerAction_TriggerViaIdentity';
            TriggerViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceConfigurationManagerAction_TriggerViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Trigger action on ConfigurationManager client
.Description
Trigger action on ConfigurationManager client

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsIgvhbiDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsIgvhbiDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [ConfigurationManagerAction <IMicrosoftGraphConfigurationManagerAction>]: Parameter for action triggerConfigurationManagerAction
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Action <String>]: Action type on Configuration Manager client

CONFIGURATIONMANAGERACTION <IMicrosoftGraphConfigurationManagerAction>: Parameter for action triggerConfigurationManagerAction
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Action <String>]: Action type on Configuration Manager client

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/start-mgdevicemanagementmanageddeviceconfigurationmanageraction
#>
function Start-MgDeviceManagementManagedDeviceConfigurationManagerAction {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='TriggerExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Trigger', Mandatory)]
    [Parameter(ParameterSetName='TriggerExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Trigger', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsIgvhbiDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphTriggerconfigurationmanageractionPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphConfigurationManagerAction]
    # Parameter for action triggerConfigurationManagerAction
    # To construct, see NOTES section for CONFIGURATIONMANAGERACTION properties and create a hash table.
    ${ConfigurationManagerAction},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Trigger = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementManagedDeviceConfigurationManagerAction_Trigger';
            TriggerExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementManagedDeviceConfigurationManagerAction_TriggerExpanded';
            TriggerViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementManagedDeviceConfigurationManagerAction_TriggerViaIdentity';
            TriggerViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementManagedDeviceConfigurationManagerAction_TriggerViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action runHealthChecks
.Description
Invoke action runHealthChecks

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/start-mgdevicemanagementvirtualendpointonpremisconnectionhealthcheck
#>
function Start-MgDeviceManagementVirtualEndpointOnPremisConnectionHealthCheck {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Run', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Run', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of cloudPcOnPremisesConnection
    ${CloudPcOnPremisesConnectionId},

    [Parameter(ParameterSetName='RunViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Run = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementVirtualEndpointOnPremisConnectionHealthCheck_Run';
            RunViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Start-MgDeviceManagementVirtualEndpointOnPremisConnectionHealthCheck_RunViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action endGracePeriod
.Description
Invoke action endGracePeriod

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/stop-mgdevicemanagementvirtualendpointcloudpcgraceperiod
#>
function Stop-MgDeviceManagementVirtualEndpointCloudPcGracePeriod {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='End', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='End', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of cloudPC
    ${CloudPcId},

    [Parameter(ParameterSetName='EndViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            End = 'Microsoft.Graph.DeviceManagement.Actions.private\Stop-MgDeviceManagementVirtualEndpointCloudPcGracePeriod_End';
            EndViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Stop-MgDeviceManagementVirtualEndpointCloudPcGracePeriod_EndViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action syncApps
.Description
Invoke action syncApps

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementandroidforworksettingapp
#>
function Sync-MgDeviceManagementAndroidForWorkSettingApp {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementAndroidForWorkSettingApp_Sync';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action syncApps
.Description
Invoke action syncApps

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementandroidmanagedstoreaccountenterprisesettingapp
#>
function Sync-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingApp {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementAndroidManagedStoreAccountEnterpriseSettingApp_Sync';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action syncDevice
.Description
Invoke action syncDevice

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementcomanageddevice
#>
function Sync-MgDeviceManagementComanagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='SyncViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementComanagedDevice_Sync';
            SyncViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementComanagedDevice_SyncViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Synchronizes between Apple Device Enrollment Program and Intune
.Description
Synchronizes between Apple Device Enrollment Program and Intune

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementdeponboardingsetting
#>
function Sync-MgDeviceManagementDepOnboardingSetting {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of depOnboardingSetting
    ${DepOnboardingSettingId},

    [Parameter(ParameterSetName='SyncViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementDepOnboardingSetting_Sync';
            SyncViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementDepOnboardingSetting_SyncViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action syncDevice
.Description
Invoke action syncDevice

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Sync-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='SyncViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Sync';
            SyncViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_SyncViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action syncDevice
.Description
Invoke action syncDevice

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Sync-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='SyncViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Sync';
            SyncViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_SyncViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action sync
.Description
Invoke action sync

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsD33NzdDevicemanagementExchangeconnectorsDevicemanagementexchangeconnectorIdMicrosoftGraphSyncPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsD33NzdDevicemanagementExchangeconnectorsDevicemanagementexchangeconnectorIdMicrosoftGraphSyncPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [SyncType <String>]: The type of Exchange Connector sync requested.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementexchangeconnector
#>
function Sync-MgDeviceManagementExchangeConnector {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='SyncExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Parameter(ParameterSetName='SyncExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementExchangeConnector
    ${DeviceManagementExchangeConnectorId},

    [Parameter(ParameterSetName='SyncViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SyncViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Sync', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SyncViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsD33NzdDevicemanagementExchangeconnectorsDevicemanagementexchangeconnectorIdMicrosoftGraphSyncPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='SyncExpanded')]
    [Parameter(ParameterSetName='SyncViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='SyncExpanded')]
    [Parameter(ParameterSetName='SyncViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # The type of Exchange Connector sync requested.
    ${SyncType},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementExchangeConnector_Sync';
            SyncExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementExchangeConnector_SyncExpanded';
            SyncViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementExchangeConnector_SyncViaIdentity';
            SyncViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementExchangeConnector_SyncViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action syncDevice
.Description
Invoke action syncDevice

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementmanageddevice
#>
function Sync-MgDeviceManagementManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='SyncViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementManagedDevice_Sync';
            SyncViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementManagedDevice_SyncViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action syncDevice
.Description
Invoke action syncDevice

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementscriptdevicerunstatemanageddevice
#>
function Sync-MgDeviceManagementScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Sync', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScript
    ${DeviceManagementScriptId},

    [Parameter(ParameterSetName='SyncViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementScriptDeviceRunStateManagedDevice_Sync';
            SyncViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementScriptDeviceRunStateManagedDevice_SyncViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Initiates a sync of all AutoPilot registered devices from Store for Business and other portals.
If the sync successful, this action returns a 204 No Content response code.
If a sync is already in progress, the action returns a 409 Conflict response code.
If this sync action is called within 10 minutes of the previous sync, the action returns a 429 Too Many Requests response code.
.Description
Initiates a sync of all AutoPilot registered devices from Store for Business and other portals.
If the sync successful, this action returns a 204 No Content response code.
If a sync is already in progress, the action returns a 409 Conflict response code.
If this sync action is called within 10 minutes of the previous sync, the action returns a 429 Too Many Requests response code.

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/sync-mgdevicemanagementwindowautopilotsetting
#>
function Sync-MgDeviceManagementWindowAutopilotSetting {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Sync', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Sync = 'Microsoft.Graph.DeviceManagement.Actions.private\Sync-MgDeviceManagementWindowAutopilotSetting_Sync';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action validateFilter
.Description
Invoke action validateFilter

.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Y9WuhoDevicemanagementAssignmentfiltersMicrosoftGraphValidatefilterPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Y9WuhoDevicemanagementAssignmentfiltersMicrosoftGraphValidatefilterPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceAndAppManagementAssignmentFilter <IMicrosoftGraphDeviceAndAppManagementAssignmentFilter>]: A class containing the properties used for Assignment Filter.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Id <String>]: Read-only.
    [CreatedDateTime <DateTime?>]: Creation time of the Assignment Filter.
    [Description <String>]: Description of the Assignment Filter.
    [DisplayName <String>]: DisplayName of the Assignment Filter.
    [LastModifiedDateTime <DateTime?>]: Last modified time of the Assignment Filter.
    [Platform <String>]: Supported platform types.
    [RoleScopeTags <String[]>]: RoleScopeTags of the Assignment Filter.
    [Rule <String>]: Rule definition of the Assignment Filter.

DEVICEANDAPPMANAGEMENTASSIGNMENTFILTER <IMicrosoftGraphDeviceAndAppManagementAssignmentFilter>: A class containing the properties used for Assignment Filter.
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Id <String>]: Read-only.
  [CreatedDateTime <DateTime?>]: Creation time of the Assignment Filter.
  [Description <String>]: Description of the Assignment Filter.
  [DisplayName <String>]: DisplayName of the Assignment Filter.
  [LastModifiedDateTime <DateTime?>]: Last modified time of the Assignment Filter.
  [Platform <String>]: Supported platform types.
  [RoleScopeTags <String[]>]: RoleScopeTags of the Assignment Filter.
  [Rule <String>]: Rule definition of the Assignment Filter.
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/test-mgdevicemanagementassignmentfilter
#>
function Test-MgDeviceManagementAssignmentFilter {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ValidateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Validate', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Y9WuhoDevicemanagementAssignmentfiltersMicrosoftGraphValidatefilterPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ValidateExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ValidateExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceAndAppManagementAssignmentFilter]
    # A class containing the properties used for Assignment Filter.
    # To construct, see NOTES section for DEVICEANDAPPMANAGEMENTASSIGNMENTFILTER properties and create a hash table.
    ${DeviceAndAppManagementAssignmentFilter},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Validate = 'Microsoft.Graph.DeviceManagement.Actions.private\Test-MgDeviceManagementAssignmentFilter_Validate';
            ValidateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Test-MgDeviceManagementAssignmentFilter_ValidateExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action validateComplianceScript
.Description
Invoke action validateComplianceScript

.Inputs
Microsoft.Graph.PowerShell.Models.IPathsV2Sh76DevicemanagementDevicecompliancepoliciesMicrosoftGraphValidatecompliancescriptPostRequestbodyContentApplicationJsonSchema
.Outputs
Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceComplianceScriptValidationResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsV2Sh76DevicemanagementDevicecompliancepoliciesMicrosoftGraphValidatecompliancescriptPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceCompliancePolicyScript <IMicrosoftGraphDeviceCompliancePolicyScript>]: deviceCompliancePolicyScript
    [(Any) <Object>]: This indicates any property can be added to this object.
    [DeviceComplianceScriptId <String>]: Device compliance script Id.
    [RulesContent <Byte[]>]: Json of the rules.

DEVICECOMPLIANCEPOLICYSCRIPT <IMicrosoftGraphDeviceCompliancePolicyScript>: deviceCompliancePolicyScript
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceComplianceScriptId <String>]: Device compliance script Id.
  [RulesContent <Byte[]>]: Json of the rules.
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/test-mgdevicemanagementdevicecompliancepolicycompliancescript
#>
function Test-MgDeviceManagementDeviceCompliancePolicyComplianceScript {
[OutputType([Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceComplianceScriptValidationResult])]
[CmdletBinding(DefaultParameterSetName='ValidateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Validate', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsV2Sh76DevicemanagementDevicecompliancepoliciesMicrosoftGraphValidatecompliancescriptPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='ValidateExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='ValidateExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceCompliancePolicyScript]
    # deviceCompliancePolicyScript
    # To construct, see NOTES section for DEVICECOMPLIANCEPOLICYSCRIPT properties and create a hash table.
    ${DeviceCompliancePolicyScript},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Validate = 'Microsoft.Graph.DeviceManagement.Actions.private\Test-MgDeviceManagementDeviceCompliancePolicyComplianceScript_Validate';
            ValidateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Test-MgDeviceManagementDeviceCompliancePolicyComplianceScript_ValidateExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action updateDeviceProfileAssignment
.Description
Invoke action updateDeviceProfileAssignment

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Blj3ZqDevicemanagementDeponboardingsettingsDeponboardingsettingIdEnrollmentprofilesEnrollmentprofileIdMicrosoftGraphUpdatedeviceprofileassignmentPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Blj3ZqDevicemanagementDeponboardingsettingsDeponboardingsettingIdEnrollmentprofilesEnrollmentprofileIdMicrosoftGraphUpdatedeviceprofileassignmentPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [DeviceIds <String[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementdeponboardingsettingenrollmentprofiledeviceprofileassignment
#>
function Update-MgDeviceManagementDepOnboardingSettingEnrollmentProfileDeviceProfileAssignment {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of depOnboardingSetting
    ${DepOnboardingSettingId},

    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of enrollmentProfile
    ${EnrollmentProfileId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Blj3ZqDevicemanagementDeponboardingsettingsDeponboardingsettingIdEnrollmentprofilesEnrollmentprofileIdMicrosoftGraphUpdatedeviceprofileassignmentPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeviceIds},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDepOnboardingSettingEnrollmentProfileDeviceProfileAssignment_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDepOnboardingSettingEnrollmentProfileDeviceProfileAssignment_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDepOnboardingSettingEnrollmentProfileDeviceProfileAssignment_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDepOnboardingSettingEnrollmentProfileDeviceProfileAssignment_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action refreshDeviceComplianceReportSummarization
.Description
Invoke action refreshDeviceComplianceReportSummarization

.Outputs
System.Boolean
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementdevicecompliancepolicydevicecompliancereportsummarization
#>
function Update-MgDeviceManagementDeviceCompliancePolicyDeviceComplianceReportSummarization {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Refresh', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Refresh = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceCompliancePolicyDeviceComplianceReportSummarization_Refresh';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action updateWindowsDeviceAccount
.Description
Invoke action updateWindowsDeviceAccount

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsDqvni9DevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsDqvni9DevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [UpdateWindowsDeviceAccountActionParameter <IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter>]: updateWindowsDeviceAccountActionParameter
    [(Any) <Object>]: This indicates any property can be added to this object.
    [CalendarSyncEnabled <Boolean?>]: Not yet documented
    [DeviceAccount <IMicrosoftGraphWindowsDeviceAccount>]: windowsDeviceAccount
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Password <String>]: Not yet documented
    [DeviceAccountEmail <String>]: Not yet documented
    [ExchangeServer <String>]: Not yet documented
    [PasswordRotationEnabled <Boolean?>]: Not yet documented
    [SessionInitiationProtocalAddress <String>]: Not yet documented

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

UPDATEWINDOWSDEVICEACCOUNTACTIONPARAMETER <IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter>: updateWindowsDeviceAccountActionParameter
  [(Any) <Object>]: This indicates any property can be added to this object.
  [CalendarSyncEnabled <Boolean?>]: Not yet documented
  [DeviceAccount <IMicrosoftGraphWindowsDeviceAccount>]: windowsDeviceAccount
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Password <String>]: Not yet documented
  [DeviceAccountEmail <String>]: Not yet documented
  [ExchangeServer <String>]: Not yet documented
  [PasswordRotationEnabled <Boolean?>]: Not yet documented
  [SessionInitiationProtocalAddress <String>]: Not yet documented
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevicewindowdeviceaccount
#>
function Update-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDeviceAccount {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsDqvni9DevicemanagementDevicehealthscriptsDevicehealthscriptIdDevicerunstatesDevicehealthscriptdevicestateIdManageddeviceMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter]
    # updateWindowsDeviceAccountActionParameter
    # To construct, see NOTES section for UPDATEWINDOWSDEVICEACCOUNTACTIONPARAMETER properties and create a hash table.
    ${UpdateWindowsDeviceAccountActionParameter},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDeviceAccount_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDeviceAccount_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDeviceAccount_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDeviceWindowDeviceAccount_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsDefenderUpdateSignatures
.Description
Invoke action windowsDefenderUpdateSignatures

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementdevicehealthscriptdevicerunstatemanageddevice
#>
function Update-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Update', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScriptDeviceState
    ${DeviceHealthScriptDeviceStateId},

    [Parameter(ParameterSetName='Update', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_Update';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptDeviceRunStateManagedDevice_UpdateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update the Proprietary Device Health Script
.Description
Update the Proprietary Device Health Script

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1Ca4Qq5DevicemanagementDevicehealthscriptsDevicehealthscriptIdMicrosoftGraphUpdateglobalscriptPostRequestbodyContentApplicationJsonSchema
.Outputs
System.String
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1Ca4Qq5DevicemanagementDevicehealthscriptsDevicehealthscriptIdMicrosoftGraphUpdateglobalscriptPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Version <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementdevicehealthscriptglobalscript
#>
function Update-MgDeviceManagementDeviceHealthScriptGlobalScript {
[OutputType([System.String])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceHealthScript
    ${DeviceHealthScriptId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1Ca4Qq5DevicemanagementDevicehealthscriptsDevicehealthscriptIdMicrosoftGraphUpdateglobalscriptPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${Version},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptGlobalScript_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptGlobalScript_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptGlobalScript_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceHealthScriptGlobalScript_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action updateWindowsDeviceAccount
.Description
Invoke action updateWindowsDeviceAccount

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1P8AgrdDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1P8AgrdDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [UpdateWindowsDeviceAccountActionParameter <IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter>]: updateWindowsDeviceAccountActionParameter
    [(Any) <Object>]: This indicates any property can be added to this object.
    [CalendarSyncEnabled <Boolean?>]: Not yet documented
    [DeviceAccount <IMicrosoftGraphWindowsDeviceAccount>]: windowsDeviceAccount
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Password <String>]: Not yet documented
    [DeviceAccountEmail <String>]: Not yet documented
    [ExchangeServer <String>]: Not yet documented
    [PasswordRotationEnabled <Boolean?>]: Not yet documented
    [SessionInitiationProtocalAddress <String>]: Not yet documented

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

UPDATEWINDOWSDEVICEACCOUNTACTIONPARAMETER <IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter>: updateWindowsDeviceAccountActionParameter
  [(Any) <Object>]: This indicates any property can be added to this object.
  [CalendarSyncEnabled <Boolean?>]: Not yet documented
  [DeviceAccount <IMicrosoftGraphWindowsDeviceAccount>]: windowsDeviceAccount
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Password <String>]: Not yet documented
  [DeviceAccountEmail <String>]: Not yet documented
  [ExchangeServer <String>]: Not yet documented
  [PasswordRotationEnabled <Boolean?>]: Not yet documented
  [SessionInitiationProtocalAddress <String>]: Not yet documented
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevicewindowdeviceaccount
#>
function Update-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDeviceAccount {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1P8AgrdDevicemanagementDeviceshellscriptsDeviceshellscriptIdDevicerunstatesDevicemanagementscriptdevicestateIdManageddeviceMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter]
    # updateWindowsDeviceAccountActionParameter
    # To construct, see NOTES section for UPDATEWINDOWSDEVICEACCOUNTACTIONPARAMETER properties and create a hash table.
    ${UpdateWindowsDeviceAccountActionParameter},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDeviceAccount_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDeviceAccount_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDeviceAccount_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDeviceWindowDeviceAccount_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action windowsDefenderUpdateSignatures
.Description
Invoke action windowsDefenderUpdateSignatures

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementdeviceshellscriptdevicerunstatemanageddevice
#>
function Update-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Update', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementScriptDeviceState
    ${DeviceManagementScriptDeviceStateId},

    [Parameter(ParameterSetName='Update', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceShellScript
    ${DeviceShellScriptId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_Update';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementDeviceShellScriptDeviceRunStateManagedDevice_UpdateViaIdentity';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action updateDefinitionValues
.Description
Invoke action updateDefinitionValues

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1A7K11RDevicemanagementGrouppolicyconfigurationsGrouppolicyconfigurationIdMicrosoftGraphUpdatedefinitionvaluesPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ADDED <IMicrosoftGraphGroupPolicyDefinitionValue[]>: .
  [Id <String>]: Read-only.
  [ConfigurationType <String>]: Group Policy Configuration Type
  [CreatedDateTime <DateTime?>]: The date and time the object was created.
  [Definition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Id <String>]: Read-only.
    [Category <IMicrosoftGraphGroupPolicyCategory>]: The category entity stores the category of a group policy definition
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [Children <IMicrosoftGraphGroupPolicyCategory[]>]: The children categories
      [DefinitionFile <IMicrosoftGraphGroupPolicyDefinitionFile>]: The entity represents an ADMX (Administrative Template) XML file. The ADMX file contains a collection of group policy definitions and their locations by category path. The group policy definition file also contains the languages supported as determined by the language dependent ADML (Administrative Template) language files.
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Id <String>]: Read-only.
        [Definitions <IMicrosoftGraphGroupPolicyDefinition[]>]: The group policy definitions associated with the file.
        [Description <String>]: The localized description of the policy settings in the ADMX file. The default value is empty.
        [DisplayName <String>]: The localized friendly name of the ADMX file.
        [LanguageCodes <String[]>]: The supported language codes for the ADMX file.
        [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
        [PolicyType <String>]: Type of Group Policy File or Definition.
        [Revision <String>]: The revision version associated with the file.
        [TargetNamespace <String>]: Specifies the URI used to identify the namespace within the ADMX file.
        [TargetPrefix <String>]: Specifies the logical name that refers to the namespace within the ADMX file.
      [Definitions <IMicrosoftGraphGroupPolicyDefinition[]>]: The immediate GroupPolicyDefinition children of the category
      [DisplayName <String>]: The string id of the category's display name
      [IsRoot <Boolean?>]: Defines if the category is a root category
      [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
      [Parent <IMicrosoftGraphGroupPolicyCategory>]: The category entity stores the category of a group policy definition
    [CategoryPath <String>]: The localized full category path for the policy.
    [ClassType <String>]: Group Policy Definition Class Type.
    [DefinitionFile <IMicrosoftGraphGroupPolicyDefinitionFile>]: The entity represents an ADMX (Administrative Template) XML file. The ADMX file contains a collection of group policy definitions and their locations by category path. The group policy definition file also contains the languages supported as determined by the language dependent ADML (Administrative Template) language files.
    [DisplayName <String>]: The localized policy name.
    [ExplainText <String>]: The localized explanation or help text associated with the policy. The default value is empty.
    [GroupPolicyCategoryId <String>]: The category id of the parent category
    [HasRelatedDefinitions <Boolean?>]: Signifies whether or not there are related definitions to this definition
    [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
    [MinDeviceCspVersion <String>]: Minimum required CSP version for device configuration in this definition
    [MinUserCspVersion <String>]: Minimum required CSP version for user configuration in this definition
    [NextVersionDefinition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
    [PolicyType <String>]: Type of Group Policy File or Definition.
    [Presentations <IMicrosoftGraphGroupPolicyPresentation[]>]: The group policy presentations associated with the definition.
      [Id <String>]: Read-only.
      [Definition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
      [Label <String>]: Localized text label for any presentation entity. The default value is empty.
      [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
    [PreviousVersionDefinition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
    [SupportedOn <String>]: Localized string used to specify what operating system or application version is affected by the policy.
    [Version <String>]: Setting definition version
  [Enabled <Boolean?>]: Enables or disables the associated group policy definition.
  [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
  [PresentationValues <IMicrosoftGraphGroupPolicyPresentationValue[]>]: The associated group policy presentation values with the definition value.
    [Id <String>]: Read-only.
    [CreatedDateTime <DateTime?>]: The date and time the object was created.
    [DefinitionValue <IMicrosoftGraphGroupPolicyDefinitionValue>]: The definition value entity stores the value for a single group policy definition.
    [LastModifiedDateTime <DateTime?>]: The date and time the object was last modified.
    [Presentation <IMicrosoftGraphGroupPolicyPresentation>]: The base entity for the display presentation of any of the additional options in a group policy definition.

BODYPARAMETER <IPaths1A7K11RDevicemanagementGrouppolicyconfigurationsGrouppolicyconfigurationIdMicrosoftGraphUpdatedefinitionvaluesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Added <IMicrosoftGraphGroupPolicyDefinitionValue[]>]: 
    [Id <String>]: Read-only.
    [ConfigurationType <String>]: Group Policy Configuration Type
    [CreatedDateTime <DateTime?>]: The date and time the object was created.
    [Definition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [Category <IMicrosoftGraphGroupPolicyCategory>]: The category entity stores the category of a group policy definition
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Id <String>]: Read-only.
        [Children <IMicrosoftGraphGroupPolicyCategory[]>]: The children categories
        [DefinitionFile <IMicrosoftGraphGroupPolicyDefinitionFile>]: The entity represents an ADMX (Administrative Template) XML file. The ADMX file contains a collection of group policy definitions and their locations by category path. The group policy definition file also contains the languages supported as determined by the language dependent ADML (Administrative Template) language files.
          [(Any) <Object>]: This indicates any property can be added to this object.
          [Id <String>]: Read-only.
          [Definitions <IMicrosoftGraphGroupPolicyDefinition[]>]: The group policy definitions associated with the file.
          [Description <String>]: The localized description of the policy settings in the ADMX file. The default value is empty.
          [DisplayName <String>]: The localized friendly name of the ADMX file.
          [LanguageCodes <String[]>]: The supported language codes for the ADMX file.
          [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
          [PolicyType <String>]: Type of Group Policy File or Definition.
          [Revision <String>]: The revision version associated with the file.
          [TargetNamespace <String>]: Specifies the URI used to identify the namespace within the ADMX file.
          [TargetPrefix <String>]: Specifies the logical name that refers to the namespace within the ADMX file.
        [Definitions <IMicrosoftGraphGroupPolicyDefinition[]>]: The immediate GroupPolicyDefinition children of the category
        [DisplayName <String>]: The string id of the category's display name
        [IsRoot <Boolean?>]: Defines if the category is a root category
        [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
        [Parent <IMicrosoftGraphGroupPolicyCategory>]: The category entity stores the category of a group policy definition
      [CategoryPath <String>]: The localized full category path for the policy.
      [ClassType <String>]: Group Policy Definition Class Type.
      [DefinitionFile <IMicrosoftGraphGroupPolicyDefinitionFile>]: The entity represents an ADMX (Administrative Template) XML file. The ADMX file contains a collection of group policy definitions and their locations by category path. The group policy definition file also contains the languages supported as determined by the language dependent ADML (Administrative Template) language files.
      [DisplayName <String>]: The localized policy name.
      [ExplainText <String>]: The localized explanation or help text associated with the policy. The default value is empty.
      [GroupPolicyCategoryId <String>]: The category id of the parent category
      [HasRelatedDefinitions <Boolean?>]: Signifies whether or not there are related definitions to this definition
      [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
      [MinDeviceCspVersion <String>]: Minimum required CSP version for device configuration in this definition
      [MinUserCspVersion <String>]: Minimum required CSP version for user configuration in this definition
      [NextVersionDefinition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
      [PolicyType <String>]: Type of Group Policy File or Definition.
      [Presentations <IMicrosoftGraphGroupPolicyPresentation[]>]: The group policy presentations associated with the definition.
        [Id <String>]: Read-only.
        [Definition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
        [Label <String>]: Localized text label for any presentation entity. The default value is empty.
        [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
      [PreviousVersionDefinition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
      [SupportedOn <String>]: Localized string used to specify what operating system or application version is affected by the policy.
      [Version <String>]: Setting definition version
    [Enabled <Boolean?>]: Enables or disables the associated group policy definition.
    [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
    [PresentationValues <IMicrosoftGraphGroupPolicyPresentationValue[]>]: The associated group policy presentation values with the definition value.
      [Id <String>]: Read-only.
      [CreatedDateTime <DateTime?>]: The date and time the object was created.
      [DefinitionValue <IMicrosoftGraphGroupPolicyDefinitionValue>]: The definition value entity stores the value for a single group policy definition.
      [LastModifiedDateTime <DateTime?>]: The date and time the object was last modified.
      [Presentation <IMicrosoftGraphGroupPolicyPresentation>]: The base entity for the display presentation of any of the additional options in a group policy definition.
  [DeletedIds <String[]>]: 
  [Updated <IMicrosoftGraphGroupPolicyDefinitionValue[]>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

UPDATED <IMicrosoftGraphGroupPolicyDefinitionValue[]>: .
  [Id <String>]: Read-only.
  [ConfigurationType <String>]: Group Policy Configuration Type
  [CreatedDateTime <DateTime?>]: The date and time the object was created.
  [Definition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Id <String>]: Read-only.
    [Category <IMicrosoftGraphGroupPolicyCategory>]: The category entity stores the category of a group policy definition
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Id <String>]: Read-only.
      [Children <IMicrosoftGraphGroupPolicyCategory[]>]: The children categories
      [DefinitionFile <IMicrosoftGraphGroupPolicyDefinitionFile>]: The entity represents an ADMX (Administrative Template) XML file. The ADMX file contains a collection of group policy definitions and their locations by category path. The group policy definition file also contains the languages supported as determined by the language dependent ADML (Administrative Template) language files.
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Id <String>]: Read-only.
        [Definitions <IMicrosoftGraphGroupPolicyDefinition[]>]: The group policy definitions associated with the file.
        [Description <String>]: The localized description of the policy settings in the ADMX file. The default value is empty.
        [DisplayName <String>]: The localized friendly name of the ADMX file.
        [LanguageCodes <String[]>]: The supported language codes for the ADMX file.
        [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
        [PolicyType <String>]: Type of Group Policy File or Definition.
        [Revision <String>]: The revision version associated with the file.
        [TargetNamespace <String>]: Specifies the URI used to identify the namespace within the ADMX file.
        [TargetPrefix <String>]: Specifies the logical name that refers to the namespace within the ADMX file.
      [Definitions <IMicrosoftGraphGroupPolicyDefinition[]>]: The immediate GroupPolicyDefinition children of the category
      [DisplayName <String>]: The string id of the category's display name
      [IsRoot <Boolean?>]: Defines if the category is a root category
      [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
      [Parent <IMicrosoftGraphGroupPolicyCategory>]: The category entity stores the category of a group policy definition
    [CategoryPath <String>]: The localized full category path for the policy.
    [ClassType <String>]: Group Policy Definition Class Type.
    [DefinitionFile <IMicrosoftGraphGroupPolicyDefinitionFile>]: The entity represents an ADMX (Administrative Template) XML file. The ADMX file contains a collection of group policy definitions and their locations by category path. The group policy definition file also contains the languages supported as determined by the language dependent ADML (Administrative Template) language files.
    [DisplayName <String>]: The localized policy name.
    [ExplainText <String>]: The localized explanation or help text associated with the policy. The default value is empty.
    [GroupPolicyCategoryId <String>]: The category id of the parent category
    [HasRelatedDefinitions <Boolean?>]: Signifies whether or not there are related definitions to this definition
    [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
    [MinDeviceCspVersion <String>]: Minimum required CSP version for device configuration in this definition
    [MinUserCspVersion <String>]: Minimum required CSP version for user configuration in this definition
    [NextVersionDefinition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
    [PolicyType <String>]: Type of Group Policy File or Definition.
    [Presentations <IMicrosoftGraphGroupPolicyPresentation[]>]: The group policy presentations associated with the definition.
      [Id <String>]: Read-only.
      [Definition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
      [Label <String>]: Localized text label for any presentation entity. The default value is empty.
      [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
    [PreviousVersionDefinition <IMicrosoftGraphGroupPolicyDefinition>]: The entity describes all of the information about a single group policy.
    [SupportedOn <String>]: Localized string used to specify what operating system or application version is affected by the policy.
    [Version <String>]: Setting definition version
  [Enabled <Boolean?>]: Enables or disables the associated group policy definition.
  [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.
  [PresentationValues <IMicrosoftGraphGroupPolicyPresentationValue[]>]: The associated group policy presentation values with the definition value.
    [Id <String>]: Read-only.
    [CreatedDateTime <DateTime?>]: The date and time the object was created.
    [DefinitionValue <IMicrosoftGraphGroupPolicyDefinitionValue>]: The definition value entity stores the value for a single group policy definition.
    [LastModifiedDateTime <DateTime?>]: The date and time the object was last modified.
    [Presentation <IMicrosoftGraphGroupPolicyPresentation>]: The base entity for the display presentation of any of the additional options in a group policy definition.
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementgrouppolicyconfigurationmultipledefinitionvalue
#>
function Update-MgDeviceManagementGroupPolicyConfigurationMultipleDefinitionValue {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of groupPolicyConfiguration
    ${GroupPolicyConfigurationId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1A7K11RDevicemanagementGrouppolicyconfigurationsGrouppolicyconfigurationIdMicrosoftGraphUpdatedefinitionvaluesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyDefinitionValue[]]
    # .
    # To construct, see NOTES section for ADDED properties and create a hash table.
    ${Added},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String[]]
    # .
    ${DeletedIds},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyDefinitionValue[]]
    # .
    # To construct, see NOTES section for UPDATED properties and create a hash table.
    ${Updated},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementGroupPolicyConfigurationMultipleDefinitionValue_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementGroupPolicyConfigurationMultipleDefinitionValue_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementGroupPolicyConfigurationMultipleDefinitionValue_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementGroupPolicyConfigurationMultipleDefinitionValue_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action updateLanguageFiles
.Description
Invoke action updateLanguageFiles

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPathsYx6FbvDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphUpdatelanguagefilesPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPathsYx6FbvDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphUpdatelanguagefilesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [GroupPolicyUploadedLanguageFiles <IMicrosoftGraphGroupPolicyUploadedLanguageFile[]>]: 
    [Content <Byte[]>]: The contents of the uploaded ADML file.
    [FileName <String>]: The file name of the uploaded ADML file.
    [Id <String>]: Key of the entity.
    [LanguageCode <String>]: The language code of the uploaded ADML file.
    [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.

GROUPPOLICYUPLOADEDLANGUAGEFILES <IMicrosoftGraphGroupPolicyUploadedLanguageFile[]>: .
  [Content <Byte[]>]: The contents of the uploaded ADML file.
  [FileName <String>]: The file name of the uploaded ADML file.
  [Id <String>]: Key of the entity.
  [LanguageCode <String>]: The language code of the uploaded ADML file.
  [LastModifiedDateTime <DateTime?>]: The date and time the entity was last modified.

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementgrouppolicyuploadeddefinitionfilelanguagefile
#>
function Update-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of groupPolicyUploadedDefinitionFile
    ${GroupPolicyUploadedDefinitionFileId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPathsYx6FbvDevicemanagementGrouppolicyuploadeddefinitionfilesGrouppolicyuploadeddefinitionfileIdMicrosoftGraphUpdatelanguagefilesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroupPolicyUploadedLanguageFile[]]
    # .
    # To construct, see NOTES section for GROUPPOLICYUPLOADEDLANGUAGEFILES properties and create a hash table.
    ${GroupPolicyUploadedLanguageFiles},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementGroupPolicyUploadedDefinitionFileLanguageFile_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action updateSettings
.Description
Invoke action updateSettings

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1E7Oxr6DevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphUpdatesettingsPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1E7Oxr6DevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphUpdatesettingsPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Settings <IMicrosoftGraphDeviceManagementSettingInstance[]>]: 
    [Id <String>]: Read-only.
    [DefinitionId <String>]: The ID of the setting definition for this instance
    [ValueJson <String>]: JSON representation of the value

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

SETTINGS <IMicrosoftGraphDeviceManagementSettingInstance[]>: .
  [Id <String>]: Read-only.
  [DefinitionId <String>]: The ID of the setting definition for this instance
  [ValueJson <String>]: JSON representation of the value
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementintentmultiplesetting
#>
function Update-MgDeviceManagementIntentMultipleSetting {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of deviceManagementIntent
    ${DeviceManagementIntentId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1E7Oxr6DevicemanagementIntentsDevicemanagementintentIdMicrosoftGraphUpdatesettingsPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphDeviceManagementSettingInstance[]]
    # .
    # To construct, see NOTES section for SETTINGS properties and create a hash table.
    ${Settings},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementIntentMultipleSetting_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementIntentMultipleSetting_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementIntentMultipleSetting_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementIntentMultipleSetting_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action updateWindowsDeviceAccount
.Description
Invoke action updateWindowsDeviceAccount

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths1L95NseDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths1L95NseDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [UpdateWindowsDeviceAccountActionParameter <IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter>]: updateWindowsDeviceAccountActionParameter
    [(Any) <Object>]: This indicates any property can be added to this object.
    [CalendarSyncEnabled <Boolean?>]: Not yet documented
    [DeviceAccount <IMicrosoftGraphWindowsDeviceAccount>]: windowsDeviceAccount
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Password <String>]: Not yet documented
    [DeviceAccountEmail <String>]: Not yet documented
    [ExchangeServer <String>]: Not yet documented
    [PasswordRotationEnabled <Boolean?>]: Not yet documented
    [SessionInitiationProtocalAddress <String>]: Not yet documented

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile

UPDATEWINDOWSDEVICEACCOUNTACTIONPARAMETER <IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter>: updateWindowsDeviceAccountActionParameter
  [(Any) <Object>]: This indicates any property can be added to this object.
  [CalendarSyncEnabled <Boolean?>]: Not yet documented
  [DeviceAccount <IMicrosoftGraphWindowsDeviceAccount>]: windowsDeviceAccount
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Password <String>]: Not yet documented
  [DeviceAccountEmail <String>]: Not yet documented
  [ExchangeServer <String>]: Not yet documented
  [PasswordRotationEnabled <Boolean?>]: Not yet documented
  [SessionInitiationProtocalAddress <String>]: Not yet documented
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementmanageddevicewindowdeviceaccount
#>
function Update-MgDeviceManagementManagedDeviceWindowDeviceAccount {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of managedDevice
    ${ManagedDeviceId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths1L95NseDevicemanagementManageddevicesManageddeviceIdMicrosoftGraphUpdatewindowsdeviceaccountPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IMicrosoftGraphUpdateWindowsDeviceAccountActionParameter]
    # updateWindowsDeviceAccountActionParameter
    # To construct, see NOTES section for UPDATEWINDOWSDEVICEACCOUNTACTIONPARAMETER properties and create a hash table.
    ${UpdateWindowsDeviceAccountActionParameter},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementManagedDeviceWindowDeviceAccount_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementManagedDeviceWindowDeviceAccount_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementManagedDeviceWindowDeviceAccount_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementManagedDeviceWindowDeviceAccount_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Invoke action updateAdDomainPassword
.Description
Invoke action updateAdDomainPassword

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths32P85ZDevicemanagementVirtualendpointOnpremisesconnectionsCloudpconpremisesconnectionIdMicrosoftGraphUpdateaddomainpasswordPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths32P85ZDevicemanagementVirtualendpointOnpremisesconnectionsCloudpconpremisesconnectionIdMicrosoftGraphUpdateaddomainpasswordPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AdDomainPassword <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementvirtualendpointonpremisconnectionaddomainpassword
#>
function Update-MgDeviceManagementVirtualEndpointOnPremisConnectionAdDomainPassword {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of cloudPcOnPremisesConnection
    ${CloudPcOnPremisesConnectionId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths32P85ZDevicemanagementVirtualendpointOnpremisesconnectionsCloudpconpremisesconnectionIdMicrosoftGraphUpdateaddomainpasswordPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${AdDomainPassword},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementVirtualEndpointOnPremisConnectionAdDomainPassword_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementVirtualEndpointOnPremisConnectionAdDomainPassword_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementVirtualEndpointOnPremisConnectionAdDomainPassword_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementVirtualEndpointOnPremisConnectionAdDomainPassword_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates properties on Autopilot devices.
.Description
Updates properties on Autopilot devices.

.Inputs
Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity
.Inputs
Microsoft.Graph.PowerShell.Models.IPaths17Vu19LDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphUpdatedevicepropertiesPostRequestbodyContentApplicationJsonSchema
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODYPARAMETER <IPaths17Vu19LDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphUpdatedevicepropertiesPostRequestbodyContentApplicationJsonSchema>: .
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AddressableUserName <String>]: 
  [DisplayName <String>]: 
  [GroupTag <String>]: 
  [UserPrincipalName <String>]: 

INPUTOBJECT <IDeviceManagementActionsIdentity>: Identity Parameter
  [AndroidDeviceOwnerEnrollmentProfileId <String>]: key: id of androidDeviceOwnerEnrollmentProfile
  [AndroidForWorkEnrollmentProfileId <String>]: key: id of androidForWorkEnrollmentProfile
  [AppLogCollectionRequestId <String>]: key: id of appLogCollectionRequest
  [AppleUserInitiatedEnrollmentProfileId <String>]: key: id of appleUserInitiatedEnrollmentProfile
  [CertificateConnectorDetailsId <String>]: key: id of certificateConnectorDetails
  [CloudPcDeviceImageId <String>]: key: id of cloudPcDeviceImage
  [CloudPcId <String>]: key: id of cloudPC
  [CloudPcOnPremisesConnectionId <String>]: key: id of cloudPcOnPremisesConnection
  [CloudPcProvisioningPolicyId <String>]: key: id of cloudPcProvisioningPolicy
  [CloudPcUserSettingId <String>]: key: id of cloudPcUserSetting
  [DataSharingConsentId <String>]: key: id of dataSharingConsent
  [DepOnboardingSettingId <String>]: key: id of depOnboardingSetting
  [DetectedAppId <String>]: key: id of detectedApp
  [DeviceAndAppManagementRoleAssignmentId <String>]: key: id of deviceAndAppManagementRoleAssignment
  [DeviceCompliancePolicyId <String>]: key: id of deviceCompliancePolicy
  [DeviceComplianceScriptId <String>]: key: id of deviceComplianceScript
  [DeviceConfigurationGroupAssignmentId <String>]: key: id of deviceConfigurationGroupAssignment
  [DeviceConfigurationId <String>]: key: id of deviceConfiguration
  [DeviceCustomAttributeShellScriptId <String>]: key: id of deviceCustomAttributeShellScript
  [DeviceEnrollmentConfigurationId <String>]: key: id of deviceEnrollmentConfiguration
  [DeviceHealthScriptDeviceStateId <String>]: key: id of deviceHealthScriptDeviceState
  [DeviceHealthScriptId <String>]: key: id of deviceHealthScript
  [DeviceLogCollectionResponseId <String>]: key: id of deviceLogCollectionResponse
  [DeviceManagementConfigurationPolicyId <String>]: key: id of deviceManagementConfigurationPolicy
  [DeviceManagementExchangeConnectorId <String>]: key: id of deviceManagementExchangeConnector
  [DeviceManagementIntentId <String>]: key: id of deviceManagementIntent
  [DeviceManagementResourceAccessProfileBaseId <String>]: key: id of deviceManagementResourceAccessProfileBase
  [DeviceManagementReusablePolicySettingId <String>]: key: id of deviceManagementReusablePolicySetting
  [DeviceManagementScriptDeviceStateId <String>]: key: id of deviceManagementScriptDeviceState
  [DeviceManagementScriptId <String>]: key: id of deviceManagementScript
  [DeviceManagementTemplateId <String>]: key: id of deviceManagementTemplate
  [DeviceManagementTemplateId1 <String>]: key: id of deviceManagementTemplate
  [DeviceShellScriptId <String>]: key: id of deviceShellScript
  [EmbeddedSimActivationCodePoolId <String>]: key: id of embeddedSIMActivationCodePool
  [EnrollmentProfileId <String>]: key: id of enrollmentProfile
  [GroupPolicyConfigurationId <String>]: key: id of groupPolicyConfiguration
  [GroupPolicyUploadedDefinitionFileId <String>]: key: id of groupPolicyUploadedDefinitionFile
  [IntuneBrandingProfileId <String>]: key: id of intuneBrandingProfile
  [ManagedDeviceId <String>]: key: id of managedDevice
  [MicrosoftTunnelServerId <String>]: key: id of microsoftTunnelServer
  [MicrosoftTunnelServerLogCollectionResponseId <String>]: key: id of microsoftTunnelServerLogCollectionResponse
  [MicrosoftTunnelSiteId <String>]: key: id of microsoftTunnelSite
  [MobileAppTroubleshootingEventId <String>]: key: id of mobileAppTroubleshootingEvent
  [NotificationMessageTemplateId <String>]: key: id of notificationMessageTemplate
  [RemoteAssistancePartnerId <String>]: key: id of remoteAssistancePartner
  [RoleScopeTagId <String>]: key: id of roleScopeTag
  [WindowsAutopilotDeploymentProfileId <String>]: key: id of windowsAutopilotDeploymentProfile
  [WindowsAutopilotDeviceIdentityId <String>]: key: id of windowsAutopilotDeviceIdentity
  [WindowsDriverUpdateProfileId <String>]: key: id of windowsDriverUpdateProfile
  [WindowsFeatureUpdateProfileId <String>]: key: id of windowsFeatureUpdateProfile
  [WindowsQualityUpdateProfileId <String>]: key: id of windowsQualityUpdateProfile
.Link
https://docs.microsoft.com/en-us/powershell/module/microsoft.graph.devicemanagement.actions/update-mgdevicemanagementwindowautopilotdeviceidentitydeviceproperty
#>
function Update-MgDeviceManagementWindowAutopilotDeviceIdentityDeviceProperty {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Graph.PowerShell.Profile('v1.0-beta')]
param(
    [Parameter(ParameterSetName='Update', Mandatory)]
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [System.String]
    # key: id of windowsAutopilotDeviceIdentity
    ${WindowsAutopilotDeviceIdentityId},

    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Path')]
    [Microsoft.Graph.PowerShell.Models.IDeviceManagementActionsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Update', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UpdateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [Microsoft.Graph.PowerShell.Models.IPaths17Vu19LDevicemanagementWindowsautopilotdeviceidentitiesWindowsautopilotdeviceidentityIdMicrosoftGraphUpdatedevicepropertiesPostRequestbodyContentApplicationJsonSchema]
    # .
    # To construct, see NOTES section for BODYPARAMETER properties and create a hash table.
    ${BodyParameter},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.Collections.Hashtable]
    # Additional Parameters
    ${AdditionalProperties},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${AddressableUserName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${DisplayName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${GroupTag},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Parameter(ParameterSetName='UpdateViaIdentityExpanded')]
    [Microsoft.Graph.PowerShell.Category('Body')]
    [System.String]
    # .
    ${UserPrincipalName},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Graph.PowerShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        $mapping = @{
            Update = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementWindowAutopilotDeviceIdentityDeviceProperty_Update';
            UpdateExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementWindowAutopilotDeviceIdentityDeviceProperty_UpdateExpanded';
            UpdateViaIdentity = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementWindowAutopilotDeviceIdentityDeviceProperty_UpdateViaIdentity';
            UpdateViaIdentityExpanded = 'Microsoft.Graph.DeviceManagement.Actions.private\Update-MgDeviceManagementWindowAutopilotDeviceIdentityDeviceProperty_UpdateViaIdentityExpanded';
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end {
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
}

# SIG # Begin signature block
# MIIjnwYJKoZIhvcNAQcCoIIjkDCCI4wCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCCtpUuMeBtvvjnh
# x5C+/05qPT8qhP/NKMtACpK6+7fyr6CCDYEwggX/MIID56ADAgECAhMzAAAB32vw
# LpKnSrTQAAAAAAHfMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjAxMjE1MjEzMTQ1WhcNMjExMjAyMjEzMTQ1WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQC2uxlZEACjqfHkuFyoCwfL25ofI9DZWKt4wEj3JBQ48GPt1UsDv834CcoUUPMn
# s/6CtPoaQ4Thy/kbOOg/zJAnrJeiMQqRe2Lsdb/NSI2gXXX9lad1/yPUDOXo4GNw
# PjXq1JZi+HZV91bUr6ZjzePj1g+bepsqd/HC1XScj0fT3aAxLRykJSzExEBmU9eS
# yuOwUuq+CriudQtWGMdJU650v/KmzfM46Y6lo/MCnnpvz3zEL7PMdUdwqj/nYhGG
# 3UVILxX7tAdMbz7LN+6WOIpT1A41rwaoOVnv+8Ua94HwhjZmu1S73yeV7RZZNxoh
# EegJi9YYssXa7UZUUkCCA+KnAgMBAAGjggF+MIIBejAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUOPbML8IdkNGtCfMmVPtvI6VZ8+Mw
# UAYDVR0RBEkwR6RFMEMxKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1
# ZXJ0byBSaWNvMRYwFAYDVQQFEw0yMzAwMTIrNDYzMDA5MB8GA1UdIwQYMBaAFEhu
# ZOVQBdOCqhc3NyK1bajKdQKVMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly93d3cu
# bWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY0NvZFNpZ1BDQTIwMTFfMjAxMS0w
# Ny0wOC5jcmwwYQYIKwYBBQUHAQEEVTBTMFEGCCsGAQUFBzAChkVodHRwOi8vd3d3
# Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY0NvZFNpZ1BDQTIwMTFfMjAx
# MS0wNy0wOC5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAgEAnnqH
# tDyYUFaVAkvAK0eqq6nhoL95SZQu3RnpZ7tdQ89QR3++7A+4hrr7V4xxmkB5BObS
# 0YK+MALE02atjwWgPdpYQ68WdLGroJZHkbZdgERG+7tETFl3aKF4KpoSaGOskZXp
# TPnCaMo2PXoAMVMGpsQEQswimZq3IQ3nRQfBlJ0PoMMcN/+Pks8ZTL1BoPYsJpok
# t6cql59q6CypZYIwgyJ892HpttybHKg1ZtQLUlSXccRMlugPgEcNZJagPEgPYni4
# b11snjRAgf0dyQ0zI9aLXqTxWUU5pCIFiPT0b2wsxzRqCtyGqpkGM8P9GazO8eao
# mVItCYBcJSByBx/pS0cSYwBBHAZxJODUqxSXoSGDvmTfqUJXntnWkL4okok1FiCD
# Z4jpyXOQunb6egIXvkgQ7jb2uO26Ow0m8RwleDvhOMrnHsupiOPbozKroSa6paFt
# VSh89abUSooR8QdZciemmoFhcWkEwFg4spzvYNP4nIs193261WyTaRMZoceGun7G
# CT2Rl653uUj+F+g94c63AhzSq4khdL4HlFIP2ePv29smfUnHtGq6yYFDLnT0q/Y+
# Di3jwloF8EWkkHRtSuXlFUbTmwr/lDDgbpZiKhLS7CBTDj32I0L5i532+uHczw82
# oZDmYmYmIUSMbZOgS65h797rj5JJ6OkeEUJoAVwwggd6MIIFYqADAgECAgphDpDS
# AAAAAAADMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0
# ZSBBdXRob3JpdHkgMjAxMTAeFw0xMTA3MDgyMDU5MDlaFw0yNjA3MDgyMTA5MDla
# MH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMT
# H01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTEwggIiMA0GCSqGSIb3DQEB
# AQUAA4ICDwAwggIKAoICAQCr8PpyEBwurdhuqoIQTTS68rZYIZ9CGypr6VpQqrgG
# OBoESbp/wwwe3TdrxhLYC/A4wpkGsMg51QEUMULTiQ15ZId+lGAkbK+eSZzpaF7S
# 35tTsgosw6/ZqSuuegmv15ZZymAaBelmdugyUiYSL+erCFDPs0S3XdjELgN1q2jz
# y23zOlyhFvRGuuA4ZKxuZDV4pqBjDy3TQJP4494HDdVceaVJKecNvqATd76UPe/7
# 4ytaEB9NViiienLgEjq3SV7Y7e1DkYPZe7J7hhvZPrGMXeiJT4Qa8qEvWeSQOy2u
# M1jFtz7+MtOzAz2xsq+SOH7SnYAs9U5WkSE1JcM5bmR/U7qcD60ZI4TL9LoDho33
# X/DQUr+MlIe8wCF0JV8YKLbMJyg4JZg5SjbPfLGSrhwjp6lm7GEfauEoSZ1fiOIl
# XdMhSz5SxLVXPyQD8NF6Wy/VI+NwXQ9RRnez+ADhvKwCgl/bwBWzvRvUVUvnOaEP
# 6SNJvBi4RHxF5MHDcnrgcuck379GmcXvwhxX24ON7E1JMKerjt/sW5+v/N2wZuLB
# l4F77dbtS+dJKacTKKanfWeA5opieF+yL4TXV5xcv3coKPHtbcMojyyPQDdPweGF
# RInECUzF1KVDL3SV9274eCBYLBNdYJWaPk8zhNqwiBfenk70lrC8RqBsmNLg1oiM
# CwIDAQABo4IB7TCCAekwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFEhuZOVQ
# BdOCqhc3NyK1bajKdQKVMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1Ud
# DwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFHItOgIxkEO5FAVO
# 4eqnxzHRI4k0MFoGA1UdHwRTMFEwT6BNoEuGSWh0dHA6Ly9jcmwubWljcm9zb2Z0
# LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y
# Mi5jcmwwXgYIKwYBBQUHAQEEUjBQME4GCCsGAQUFBzAChkJodHRwOi8vd3d3Lm1p
# Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y
# Mi5jcnQwgZ8GA1UdIASBlzCBlDCBkQYJKwYBBAGCNy4DMIGDMD8GCCsGAQUFBwIB
# FjNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2RvY3MvcHJpbWFyeWNw
# cy5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AcABvAGwAaQBjAHkA
# XwBzAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAGfyhqWY
# 4FR5Gi7T2HRnIpsLlhHhY5KZQpZ90nkMkMFlXy4sPvjDctFtg/6+P+gKyju/R6mj
# 82nbY78iNaWXXWWEkH2LRlBV2AySfNIaSxzzPEKLUtCw/WvjPgcuKZvmPRul1LUd
# d5Q54ulkyUQ9eHoj8xN9ppB0g430yyYCRirCihC7pKkFDJvtaPpoLpWgKj8qa1hJ
# Yx8JaW5amJbkg/TAj/NGK978O9C9Ne9uJa7lryft0N3zDq+ZKJeYTQ49C/IIidYf
# wzIY4vDFLc5bnrRJOQrGCsLGra7lstnbFYhRRVg4MnEnGn+x9Cf43iw6IGmYslmJ
# aG5vp7d0w0AFBqYBKig+gj8TTWYLwLNN9eGPfxxvFX1Fp3blQCplo8NdUmKGwx1j
# NpeG39rz+PIWoZon4c2ll9DuXWNB41sHnIc+BncG0QaxdR8UvmFhtfDcxhsEvt9B
# xw4o7t5lL+yX9qFcltgA1qFGvVnzl6UJS0gQmYAf0AApxbGbpT9Fdx41xtKiop96
# eiL6SJUfq/tHI4D1nvi/a7dLl+LrdXga7Oo3mXkYS//WsyNodeav+vyL6wuA6mk7
# r/ww7QRMjt/fdW1jkT3RnVZOT7+AVyKheBEyIXrvQQqxP/uozKRdwaGIm1dxVk5I
# RcBCyZt2WwqASGv9eZ/BvW1taslScxMNelDNMYIVdDCCFXACAQEwgZUwfjELMAkG
# A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
# HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z
# b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMQITMwAAAd9r8C6Sp0q00AAAAAAB3zAN
# BglghkgBZQMEAgEFAKCBrjAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgor
# BgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQghAF0m+uK
# Zrb+sYyGGL4GLqCWzYlbdWBhZthexaIklUEwQgYKKwYBBAGCNwIBDDE0MDKgFIAS
# AE0AaQBjAHIAbwBzAG8AZgB0oRqAGGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbTAN
# BgkqhkiG9w0BAQEFAASCAQBItZSHNbKaRDkhO7OaeLxg3Eqn7wKqDtUgmGFnz+z/
# +0p8kwXLZQ/yxr45GdrkjS+pn8byZzhyngx6597IDpq2z4/vo9wZsOC1nncckEDk
# BNjidxXLX7P8ic6s001Ad6N7fSrOwJQh9V0J8QQSbOJIlnPQDW7hk2R7QjQZvnzo
# bIWkNNnt47fyc810bp4Ij5bmPPS12yd12vFWqQsaqUxuQ1XMSahF6YpKMJRGynMV
# cMn4+Q2JFTpVQtym2XkJ1cGCdAlR2uPOHD+gh/n5t6FDD/FXtnHaTP2ohhsSqT5Y
# oU3QaQAYNsP6wQMhNvwsC/j5aSB21k9JvCo0sr8H8Ow9oYIS/jCCEvoGCisGAQQB
# gjcDAwExghLqMIIS5gYJKoZIhvcNAQcCoIIS1zCCEtMCAQMxDzANBglghkgBZQME
# AgEFADCCAVkGCyqGSIb3DQEJEAEEoIIBSASCAUQwggFAAgEBBgorBgEEAYRZCgMB
# MDEwDQYJYIZIAWUDBAIBBQAEIPhEtsgPuJ1y/L3KZXnEk7/7s8A0EfBqWPnPalUx
# GGqYAgZhcHkHNqYYEzIwMjExMDI3MDcxMTI2LjM0OVowBIACAfSggdikgdUwgdIx
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1p
# Y3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhh
# bGVzIFRTUyBFU046RDA4Mi00QkZELUVFQkExJTAjBgNVBAMTHE1pY3Jvc29mdCBU
# aW1lLVN0YW1wIFNlcnZpY2Wggg5NMIIE+TCCA+GgAwIBAgITMwAAAUGvf1KXXPLc
# RQAAAAABQTANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0Eg
# MjAxMDAeFw0yMDEwMTUxNzI4MjdaFw0yMjAxMTIxNzI4MjdaMIHSMQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQg
# SXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1Mg
# RVNOOkQwODItNEJGRC1FRUJBMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
# cCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA8irLqL28
# dal+PJUmUJOwvYn/sOCEzQzZyj94XbFPtRhDhPjagvvKOv1GgMoOuXvkpM3uM5E6
# 7vyOCPxqhTAzq7Ak3zkEXXBv7JoM8Xm0x5UcnAkpUiEo0eycRl6bnYIB3KlZW3uz
# 4Jc2v2FV0KCGkLrvqfKP8V/i2hVyN854OejWpx8wGUazM4CYUVowcgEDc76OY+Xa
# 4W27DCZJm2f9ol4BjSL+b2L/T8n/LEGknaUxwSQTN1LQCt+uBDCASd6VQR5CLLJV
# t6MBL0W1NlaWxEAJwlIdyBnS1ihLvRg1jc/KUZe0sRFdD3fhKrjPac3hoy007Fvr
# 6Go0WJ4pr2rJdQIDAQABo4IBGzCCARcwHQYDVR0OBBYEFC0oPyxuLpD9RXBr9c8N
# O0EFEsbEMB8GA1UdIwQYMBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYGA1UdHwRP
# ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
# Y3RzL01pY1RpbVN0YVBDQV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcBAQROMEww
# SgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
# TWljVGltU3RhUENBXzIwMTAtMDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0l
# BAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQELBQADggEBAFJ63yJ92ChqCgpexD48
# okviGuC4ikNsvmwlCSet1sFpvJEzLJB8cTF4z4qQTz8AsQtcew6mAVmQCYDu9f5e
# e11xXj1LwHYsZGnSs/OfRul1VKmY51OQpqvK5O/Ct4fs0Iblzo8eyOLJygTk97aX
# VA4Uzq8GblL7LQ5XiwAY446MOALnNXFo/Kq9tvzipwY1YcRn/nlMQ+b92OiLLmHV
# Mi2wAUORiKFvaAfYWjhQd+2qHLMsdpNluwBbWe7FF5ABsDo0HROMWyCgxdLQ3vqr
# 3DMSH3ZWKiirFsvWJmchfZPGRObwqszvSXPFmPBZ9o+er+4UoLV+50GWnnQky7HV
# gLkwggZxMIIEWaADAgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEBCwUAMIGIMQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNy
# b3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0xMDA3MDEy
# MTM2NTVaFw0yNTA3MDEyMTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
# YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
# Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
# MDEwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwT
# l/X6f2mUa3RUENWlCgCChfvtfGhLLF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4J
# E458YTBZsTBED/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhg
# RvJYR4YyhB50YWeRX4FUsc+TTJLBxKZd0WETbijGGvmGgLvfYfxGwScdJGcSchoh
# iq9LZIlQYrFd/XcfPfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrKsajy
# eioKMfDaTgaRtogINeh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38vMDJRF1eFpwB
# BU8iTQIDAQABo4IB5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVj
# OlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsG
# A1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJc
# YmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9z
# b2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
# LmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWlj
# cm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0
# MIGgBgNVHSABAf8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9BggrBgEFBQcCARYx
# aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0
# bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMAeQBfAFMA
# dABhAHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAB+aIUQ3ixuCY
# P4FxAz2do6Ehb7Prpsz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1r
# VFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMivv3/Gf/I3
# fVo/HPKZeUqRUgCvOA8X9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2
# /QThcJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZSnFj
# nXshbcOco6I8+n99lmqQeKZt0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjgg
# tSXlZOz39L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7
# cQnfXXSYIghh2rBQHm+98eEA3+cxB6STOvdlR3jo+KhIq/fecn5ha293qYHLpwms
# ObvsxsvYgrRyzR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAzLhIp9cAv
# VCch98isTtoouLGp25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3QyS99je/WZii8bxyGv
# WbWu3EQ8l1Bx16HSxVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8NoFA1
# 2u8JJxzVs341Hgi62jbb01+P3nSISRKhggLXMIICQAIBATCCAQChgdikgdUwgdIx
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1p
# Y3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhh
# bGVzIFRTUyBFU046RDA4Mi00QkZELUVFQkExJTAjBgNVBAMTHE1pY3Jvc29mdCBU
# aW1lLVN0YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVAKrlvym1CquIoQcrzncL
# vkD1WpUDoIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
# b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
# dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwDQYJ
# KoZIhvcNAQEFBQACBQDlIuBDMCIYDzIwMjExMDI3MDQxNDU5WhgPMjAyMTEwMjgw
# NDE0NTlaMHcwPQYKKwYBBAGEWQoEATEvMC0wCgIFAOUi4EMCAQAwCgIBAAICF9YC
# Af8wBwIBAAICEUIwCgIFAOUkMcMCAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYB
# BAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOB
# gQAUCb4IvQ11XDKrVYqraypVm5yhtcG0OrheMJn8LgfDSFXBsjgd80H5l7DS6n8E
# qHPedHgAtaWWmx1dd7KZKEFxtMYCHw+eu/YRlUn+fHyxdKuYD4aQlLKwPGcxz0+V
# eu66BNmD5e5Mf8B8u05ZlH9oNUlvvHTczsFw6LVhnisl+zGCAw0wggMJAgEBMIGT
# MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
# HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAABQa9/Updc8txFAAAA
# AAFBMA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQ
# AQQwLwYJKoZIhvcNAQkEMSIEIClmwSxfy4VPUCx5FeDn9lM54gWEreWCsuBRRPsa
# n6cMMIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgUT8BPIzqc3SecHRPLKBt
# W0vOOnT+78haWo+XcxVerd4wgZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UE
# CBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
# b2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQ
# Q0EgMjAxMAITMwAAAUGvf1KXXPLcRQAAAAABQTAiBCCsIMhGci2I4hx/fnpoNUu5
# 9O/Sci8O3hwdWmbouUNrPjANBgkqhkiG9w0BAQsFAASCAQCicCHrgDxqbO3/8HSf
# mjgITGnh4akPJnrZAbIJ20gZW1A7xHN+AhSmhhJ03IeBK3MFUHO4sTAObTSJzawO
# eOw4ogcCuTOcHtY7JsW/LyfrH+7suwSt/64BLXLwPF04h+UPb/MKMhp5brWvFGK0
# 3SqkFgsTCGODrmOqTMG6AEPw+6CW5JDkIi30Yp/aQtcbK2SGt4bPlPgGVsjbs3qr
# vtZhXBI/kjzjWT4Yla9NDk9r3B5qLQweUxa13QiL4Zkj3PfuaV1ynNOj0GFLzcU6
# 5Y6jcTOpKibwhi7L9snWQaeN9dL5VYpUd7YMQubDbYHPP+cF4Ja8UBUC5+Iw9Qx/
# Y+Ue
# SIG # End signature block
